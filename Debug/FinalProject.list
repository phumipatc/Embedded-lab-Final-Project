
FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007110  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e28  080072b0  080072b0  000172b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080d8  080080d8  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080080d8  080080d8  000180d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080080e0  080080e0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080e0  080080e0  000180e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080080e4  080080e4  000180e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080080e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d4  20000078  08008160  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000074c  08008160  0002074c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013fa1  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a61  00000000  00000000  00034049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001290  00000000  00000000  00036ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001198  00000000  00000000  00037d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000186b4  00000000  00000000  00038ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000159ba  00000000  00000000  0005158c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c91b  00000000  00000000  00066f46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00103861  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005400  00000000  00000000  001038b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007298 	.word	0x08007298

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08007298 	.word	0x08007298

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_d2f>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a74:	bf24      	itt	cs
 8000a76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a7e:	d90d      	bls.n	8000a9c <__aeabi_d2f+0x30>
 8000a80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a94:	bf08      	it	eq
 8000a96:	f020 0001 	biceq.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa0:	d121      	bne.n	8000ae6 <__aeabi_d2f+0x7a>
 8000aa2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aa6:	bfbc      	itt	lt
 8000aa8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	4770      	bxlt	lr
 8000aae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ab2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab6:	f1c2 0218 	rsb	r2, r2, #24
 8000aba:	f1c2 0c20 	rsb	ip, r2, #32
 8000abe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ac2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	f040 0001 	orrne.w	r0, r0, #1
 8000acc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad8:	ea40 000c 	orr.w	r0, r0, ip
 8000adc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae4:	e7cc      	b.n	8000a80 <__aeabi_d2f+0x14>
 8000ae6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aea:	d107      	bne.n	8000afc <__aeabi_d2f+0x90>
 8000aec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af0:	bf1e      	ittt	ne
 8000af2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000af6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000afa:	4770      	bxne	lr
 8000afc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_uldivmod>:
 8000b0c:	b953      	cbnz	r3, 8000b24 <__aeabi_uldivmod+0x18>
 8000b0e:	b94a      	cbnz	r2, 8000b24 <__aeabi_uldivmod+0x18>
 8000b10:	2900      	cmp	r1, #0
 8000b12:	bf08      	it	eq
 8000b14:	2800      	cmpeq	r0, #0
 8000b16:	bf1c      	itt	ne
 8000b18:	f04f 31ff 	movne.w	r1, #4294967295
 8000b1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b20:	f000 b974 	b.w	8000e0c <__aeabi_idiv0>
 8000b24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b2c:	f000 f806 	bl	8000b3c <__udivmoddi4>
 8000b30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b38:	b004      	add	sp, #16
 8000b3a:	4770      	bx	lr

08000b3c <__udivmoddi4>:
 8000b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b40:	9d08      	ldr	r5, [sp, #32]
 8000b42:	4604      	mov	r4, r0
 8000b44:	468e      	mov	lr, r1
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d14d      	bne.n	8000be6 <__udivmoddi4+0xaa>
 8000b4a:	428a      	cmp	r2, r1
 8000b4c:	4694      	mov	ip, r2
 8000b4e:	d969      	bls.n	8000c24 <__udivmoddi4+0xe8>
 8000b50:	fab2 f282 	clz	r2, r2
 8000b54:	b152      	cbz	r2, 8000b6c <__udivmoddi4+0x30>
 8000b56:	fa01 f302 	lsl.w	r3, r1, r2
 8000b5a:	f1c2 0120 	rsb	r1, r2, #32
 8000b5e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b62:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b66:	ea41 0e03 	orr.w	lr, r1, r3
 8000b6a:	4094      	lsls	r4, r2
 8000b6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b70:	0c21      	lsrs	r1, r4, #16
 8000b72:	fbbe f6f8 	udiv	r6, lr, r8
 8000b76:	fa1f f78c 	uxth.w	r7, ip
 8000b7a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b7e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b82:	fb06 f107 	mul.w	r1, r6, r7
 8000b86:	4299      	cmp	r1, r3
 8000b88:	d90a      	bls.n	8000ba0 <__udivmoddi4+0x64>
 8000b8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b8e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b92:	f080 811f 	bcs.w	8000dd4 <__udivmoddi4+0x298>
 8000b96:	4299      	cmp	r1, r3
 8000b98:	f240 811c 	bls.w	8000dd4 <__udivmoddi4+0x298>
 8000b9c:	3e02      	subs	r6, #2
 8000b9e:	4463      	add	r3, ip
 8000ba0:	1a5b      	subs	r3, r3, r1
 8000ba2:	b2a4      	uxth	r4, r4
 8000ba4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ba8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bb0:	fb00 f707 	mul.w	r7, r0, r7
 8000bb4:	42a7      	cmp	r7, r4
 8000bb6:	d90a      	bls.n	8000bce <__udivmoddi4+0x92>
 8000bb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bbc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bc0:	f080 810a 	bcs.w	8000dd8 <__udivmoddi4+0x29c>
 8000bc4:	42a7      	cmp	r7, r4
 8000bc6:	f240 8107 	bls.w	8000dd8 <__udivmoddi4+0x29c>
 8000bca:	4464      	add	r4, ip
 8000bcc:	3802      	subs	r0, #2
 8000bce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bd2:	1be4      	subs	r4, r4, r7
 8000bd4:	2600      	movs	r6, #0
 8000bd6:	b11d      	cbz	r5, 8000be0 <__udivmoddi4+0xa4>
 8000bd8:	40d4      	lsrs	r4, r2
 8000bda:	2300      	movs	r3, #0
 8000bdc:	e9c5 4300 	strd	r4, r3, [r5]
 8000be0:	4631      	mov	r1, r6
 8000be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be6:	428b      	cmp	r3, r1
 8000be8:	d909      	bls.n	8000bfe <__udivmoddi4+0xc2>
 8000bea:	2d00      	cmp	r5, #0
 8000bec:	f000 80ef 	beq.w	8000dce <__udivmoddi4+0x292>
 8000bf0:	2600      	movs	r6, #0
 8000bf2:	e9c5 0100 	strd	r0, r1, [r5]
 8000bf6:	4630      	mov	r0, r6
 8000bf8:	4631      	mov	r1, r6
 8000bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfe:	fab3 f683 	clz	r6, r3
 8000c02:	2e00      	cmp	r6, #0
 8000c04:	d14a      	bne.n	8000c9c <__udivmoddi4+0x160>
 8000c06:	428b      	cmp	r3, r1
 8000c08:	d302      	bcc.n	8000c10 <__udivmoddi4+0xd4>
 8000c0a:	4282      	cmp	r2, r0
 8000c0c:	f200 80f9 	bhi.w	8000e02 <__udivmoddi4+0x2c6>
 8000c10:	1a84      	subs	r4, r0, r2
 8000c12:	eb61 0303 	sbc.w	r3, r1, r3
 8000c16:	2001      	movs	r0, #1
 8000c18:	469e      	mov	lr, r3
 8000c1a:	2d00      	cmp	r5, #0
 8000c1c:	d0e0      	beq.n	8000be0 <__udivmoddi4+0xa4>
 8000c1e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c22:	e7dd      	b.n	8000be0 <__udivmoddi4+0xa4>
 8000c24:	b902      	cbnz	r2, 8000c28 <__udivmoddi4+0xec>
 8000c26:	deff      	udf	#255	; 0xff
 8000c28:	fab2 f282 	clz	r2, r2
 8000c2c:	2a00      	cmp	r2, #0
 8000c2e:	f040 8092 	bne.w	8000d56 <__udivmoddi4+0x21a>
 8000c32:	eba1 010c 	sub.w	r1, r1, ip
 8000c36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c3a:	fa1f fe8c 	uxth.w	lr, ip
 8000c3e:	2601      	movs	r6, #1
 8000c40:	0c20      	lsrs	r0, r4, #16
 8000c42:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c46:	fb07 1113 	mls	r1, r7, r3, r1
 8000c4a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c4e:	fb0e f003 	mul.w	r0, lr, r3
 8000c52:	4288      	cmp	r0, r1
 8000c54:	d908      	bls.n	8000c68 <__udivmoddi4+0x12c>
 8000c56:	eb1c 0101 	adds.w	r1, ip, r1
 8000c5a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c5e:	d202      	bcs.n	8000c66 <__udivmoddi4+0x12a>
 8000c60:	4288      	cmp	r0, r1
 8000c62:	f200 80cb 	bhi.w	8000dfc <__udivmoddi4+0x2c0>
 8000c66:	4643      	mov	r3, r8
 8000c68:	1a09      	subs	r1, r1, r0
 8000c6a:	b2a4      	uxth	r4, r4
 8000c6c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c70:	fb07 1110 	mls	r1, r7, r0, r1
 8000c74:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c78:	fb0e fe00 	mul.w	lr, lr, r0
 8000c7c:	45a6      	cmp	lr, r4
 8000c7e:	d908      	bls.n	8000c92 <__udivmoddi4+0x156>
 8000c80:	eb1c 0404 	adds.w	r4, ip, r4
 8000c84:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c88:	d202      	bcs.n	8000c90 <__udivmoddi4+0x154>
 8000c8a:	45a6      	cmp	lr, r4
 8000c8c:	f200 80bb 	bhi.w	8000e06 <__udivmoddi4+0x2ca>
 8000c90:	4608      	mov	r0, r1
 8000c92:	eba4 040e 	sub.w	r4, r4, lr
 8000c96:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c9a:	e79c      	b.n	8000bd6 <__udivmoddi4+0x9a>
 8000c9c:	f1c6 0720 	rsb	r7, r6, #32
 8000ca0:	40b3      	lsls	r3, r6
 8000ca2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ca6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000caa:	fa20 f407 	lsr.w	r4, r0, r7
 8000cae:	fa01 f306 	lsl.w	r3, r1, r6
 8000cb2:	431c      	orrs	r4, r3
 8000cb4:	40f9      	lsrs	r1, r7
 8000cb6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cba:	fa00 f306 	lsl.w	r3, r0, r6
 8000cbe:	fbb1 f8f9 	udiv	r8, r1, r9
 8000cc2:	0c20      	lsrs	r0, r4, #16
 8000cc4:	fa1f fe8c 	uxth.w	lr, ip
 8000cc8:	fb09 1118 	mls	r1, r9, r8, r1
 8000ccc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cd0:	fb08 f00e 	mul.w	r0, r8, lr
 8000cd4:	4288      	cmp	r0, r1
 8000cd6:	fa02 f206 	lsl.w	r2, r2, r6
 8000cda:	d90b      	bls.n	8000cf4 <__udivmoddi4+0x1b8>
 8000cdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ce0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ce4:	f080 8088 	bcs.w	8000df8 <__udivmoddi4+0x2bc>
 8000ce8:	4288      	cmp	r0, r1
 8000cea:	f240 8085 	bls.w	8000df8 <__udivmoddi4+0x2bc>
 8000cee:	f1a8 0802 	sub.w	r8, r8, #2
 8000cf2:	4461      	add	r1, ip
 8000cf4:	1a09      	subs	r1, r1, r0
 8000cf6:	b2a4      	uxth	r4, r4
 8000cf8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cfc:	fb09 1110 	mls	r1, r9, r0, r1
 8000d00:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d04:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d08:	458e      	cmp	lr, r1
 8000d0a:	d908      	bls.n	8000d1e <__udivmoddi4+0x1e2>
 8000d0c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d10:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d14:	d26c      	bcs.n	8000df0 <__udivmoddi4+0x2b4>
 8000d16:	458e      	cmp	lr, r1
 8000d18:	d96a      	bls.n	8000df0 <__udivmoddi4+0x2b4>
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	4461      	add	r1, ip
 8000d1e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d22:	fba0 9402 	umull	r9, r4, r0, r2
 8000d26:	eba1 010e 	sub.w	r1, r1, lr
 8000d2a:	42a1      	cmp	r1, r4
 8000d2c:	46c8      	mov	r8, r9
 8000d2e:	46a6      	mov	lr, r4
 8000d30:	d356      	bcc.n	8000de0 <__udivmoddi4+0x2a4>
 8000d32:	d053      	beq.n	8000ddc <__udivmoddi4+0x2a0>
 8000d34:	b15d      	cbz	r5, 8000d4e <__udivmoddi4+0x212>
 8000d36:	ebb3 0208 	subs.w	r2, r3, r8
 8000d3a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d3e:	fa01 f707 	lsl.w	r7, r1, r7
 8000d42:	fa22 f306 	lsr.w	r3, r2, r6
 8000d46:	40f1      	lsrs	r1, r6
 8000d48:	431f      	orrs	r7, r3
 8000d4a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d4e:	2600      	movs	r6, #0
 8000d50:	4631      	mov	r1, r6
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	f1c2 0320 	rsb	r3, r2, #32
 8000d5a:	40d8      	lsrs	r0, r3
 8000d5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d60:	fa21 f303 	lsr.w	r3, r1, r3
 8000d64:	4091      	lsls	r1, r2
 8000d66:	4301      	orrs	r1, r0
 8000d68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6c:	fa1f fe8c 	uxth.w	lr, ip
 8000d70:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d74:	fb07 3610 	mls	r6, r7, r0, r3
 8000d78:	0c0b      	lsrs	r3, r1, #16
 8000d7a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d7e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d82:	429e      	cmp	r6, r3
 8000d84:	fa04 f402 	lsl.w	r4, r4, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x260>
 8000d8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d8e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d92:	d22f      	bcs.n	8000df4 <__udivmoddi4+0x2b8>
 8000d94:	429e      	cmp	r6, r3
 8000d96:	d92d      	bls.n	8000df4 <__udivmoddi4+0x2b8>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4463      	add	r3, ip
 8000d9c:	1b9b      	subs	r3, r3, r6
 8000d9e:	b289      	uxth	r1, r1
 8000da0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000da4:	fb07 3316 	mls	r3, r7, r6, r3
 8000da8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dac:	fb06 f30e 	mul.w	r3, r6, lr
 8000db0:	428b      	cmp	r3, r1
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x28a>
 8000db4:	eb1c 0101 	adds.w	r1, ip, r1
 8000db8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000dbc:	d216      	bcs.n	8000dec <__udivmoddi4+0x2b0>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d914      	bls.n	8000dec <__udivmoddi4+0x2b0>
 8000dc2:	3e02      	subs	r6, #2
 8000dc4:	4461      	add	r1, ip
 8000dc6:	1ac9      	subs	r1, r1, r3
 8000dc8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000dcc:	e738      	b.n	8000c40 <__udivmoddi4+0x104>
 8000dce:	462e      	mov	r6, r5
 8000dd0:	4628      	mov	r0, r5
 8000dd2:	e705      	b.n	8000be0 <__udivmoddi4+0xa4>
 8000dd4:	4606      	mov	r6, r0
 8000dd6:	e6e3      	b.n	8000ba0 <__udivmoddi4+0x64>
 8000dd8:	4618      	mov	r0, r3
 8000dda:	e6f8      	b.n	8000bce <__udivmoddi4+0x92>
 8000ddc:	454b      	cmp	r3, r9
 8000dde:	d2a9      	bcs.n	8000d34 <__udivmoddi4+0x1f8>
 8000de0:	ebb9 0802 	subs.w	r8, r9, r2
 8000de4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000de8:	3801      	subs	r0, #1
 8000dea:	e7a3      	b.n	8000d34 <__udivmoddi4+0x1f8>
 8000dec:	4646      	mov	r6, r8
 8000dee:	e7ea      	b.n	8000dc6 <__udivmoddi4+0x28a>
 8000df0:	4620      	mov	r0, r4
 8000df2:	e794      	b.n	8000d1e <__udivmoddi4+0x1e2>
 8000df4:	4640      	mov	r0, r8
 8000df6:	e7d1      	b.n	8000d9c <__udivmoddi4+0x260>
 8000df8:	46d0      	mov	r8, sl
 8000dfa:	e77b      	b.n	8000cf4 <__udivmoddi4+0x1b8>
 8000dfc:	3b02      	subs	r3, #2
 8000dfe:	4461      	add	r1, ip
 8000e00:	e732      	b.n	8000c68 <__udivmoddi4+0x12c>
 8000e02:	4630      	mov	r0, r6
 8000e04:	e709      	b.n	8000c1a <__udivmoddi4+0xde>
 8000e06:	4464      	add	r4, ip
 8000e08:	3802      	subs	r0, #2
 8000e0a:	e742      	b.n	8000c92 <__udivmoddi4+0x156>

08000e0c <__aeabi_idiv0>:
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop

08000e10 <DS18B20_StartAll>:

//
//	Start conversion on all sensors
//
void DS18B20_StartAll()
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
	OneWire_Reset(&OneWire); // Reset the bus
 8000e14:	4806      	ldr	r0, [pc, #24]	; (8000e30 <DS18B20_StartAll+0x20>)
 8000e16:	f000 faa6 	bl	8001366 <OneWire_Reset>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_SKIPROM); // Skip ROM command
 8000e1a:	21cc      	movs	r1, #204	; 0xcc
 8000e1c:	4804      	ldr	r0, [pc, #16]	; (8000e30 <DS18B20_StartAll+0x20>)
 8000e1e:	f000 fb1f 	bl	8001460 <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, DS18B20_CMD_CONVERTTEMP); // Start conversion on all sensors
 8000e22:	2144      	movs	r1, #68	; 0x44
 8000e24:	4802      	ldr	r0, [pc, #8]	; (8000e30 <DS18B20_StartAll+0x20>)
 8000e26:	f000 fb1b 	bl	8001460 <OneWire_WriteByte>
}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	200000d4 	.word	0x200000d4

08000e34 <DS18B20_Read>:

//
//	Read one sensor
//
uint8_t DS18B20_Read(uint8_t number, float *destination)
{
 8000e34:	b590      	push	{r4, r7, lr}
 8000e36:	b087      	sub	sp, #28
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	6039      	str	r1, [r7, #0]
 8000e3e:	71fb      	strb	r3, [r7, #7]
	if( number >= TempSensorCount) // If read sensor is not availible
 8000e40:	4b4d      	ldr	r3, [pc, #308]	; (8000f78 <DS18B20_Read+0x144>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	79fa      	ldrb	r2, [r7, #7]
 8000e46:	429a      	cmp	r2, r3
 8000e48:	d301      	bcc.n	8000e4e <DS18B20_Read+0x1a>
		return 0;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	e090      	b.n	8000f70 <DS18B20_Read+0x13c>

	uint16_t temperature;
	uint8_t resolution;
	float result;
	uint8_t i = 0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	74fb      	strb	r3, [r7, #19]
	uint8_t crc;

#endif


	if (!DS18B20_Is((uint8_t*)&ds18b20[number].Address)) // Check if sensor is DS18B20 family
 8000e52:	79fb      	ldrb	r3, [r7, #7]
 8000e54:	011b      	lsls	r3, r3, #4
 8000e56:	4a49      	ldr	r2, [pc, #292]	; (8000f7c <DS18B20_Read+0x148>)
 8000e58:	4413      	add	r3, r2
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f000 f93c 	bl	80010d8 <DS18B20_Is>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d101      	bne.n	8000e6a <DS18B20_Read+0x36>
		return 0;
 8000e66:	2300      	movs	r3, #0
 8000e68:	e082      	b.n	8000f70 <DS18B20_Read+0x13c>

	if (!OneWire_ReadBit(&OneWire)) // Check if the bus is released
 8000e6a:	4845      	ldr	r0, [pc, #276]	; (8000f80 <DS18B20_Read+0x14c>)
 8000e6c:	f000 face 	bl	800140c <OneWire_ReadBit>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d101      	bne.n	8000e7a <DS18B20_Read+0x46>
		return 0; // Busy bus - conversion is not finished
 8000e76:	2300      	movs	r3, #0
 8000e78:	e07a      	b.n	8000f70 <DS18B20_Read+0x13c>

	OneWire_Reset(&OneWire); // Reset the bus
 8000e7a:	4841      	ldr	r0, [pc, #260]	; (8000f80 <DS18B20_Read+0x14c>)
 8000e7c:	f000 fa73 	bl	8001366 <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	011b      	lsls	r3, r3, #4
 8000e84:	4a3d      	ldr	r2, [pc, #244]	; (8000f7c <DS18B20_Read+0x148>)
 8000e86:	4413      	add	r3, r2
 8000e88:	4619      	mov	r1, r3
 8000e8a:	483d      	ldr	r0, [pc, #244]	; (8000f80 <DS18B20_Read+0x14c>)
 8000e8c:	f000 fc1d 	bl	80016ca <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_RSCRATCHPAD); // Read scratchpad command
 8000e90:	21be      	movs	r1, #190	; 0xbe
 8000e92:	483b      	ldr	r0, [pc, #236]	; (8000f80 <DS18B20_Read+0x14c>)
 8000e94:	f000 fae4 	bl	8001460 <OneWire_WriteByte>

	for (i = 0; i < DS18B20_DATA_LEN; i++) // Read scratchpad
 8000e98:	2300      	movs	r3, #0
 8000e9a:	74fb      	strb	r3, [r7, #19]
 8000e9c:	e00d      	b.n	8000eba <DS18B20_Read+0x86>
		data[i] = OneWire_ReadByte(&OneWire);
 8000e9e:	7cfc      	ldrb	r4, [r7, #19]
 8000ea0:	4837      	ldr	r0, [pc, #220]	; (8000f80 <DS18B20_Read+0x14c>)
 8000ea2:	f000 fafb 	bl	800149c <OneWire_ReadByte>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	f104 0318 	add.w	r3, r4, #24
 8000eae:	443b      	add	r3, r7
 8000eb0:	f803 2c10 	strb.w	r2, [r3, #-16]
	for (i = 0; i < DS18B20_DATA_LEN; i++) // Read scratchpad
 8000eb4:	7cfb      	ldrb	r3, [r7, #19]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	74fb      	strb	r3, [r7, #19]
 8000eba:	7cfb      	ldrb	r3, [r7, #19]
 8000ebc:	2b04      	cmp	r3, #4
 8000ebe:	d9ee      	bls.n	8000e9e <DS18B20_Read+0x6a>
	crc = OneWire_CRC8(data, 8); // CRC calculation

	if (crc != data[8])
		return 0; // CRC invalid
#endif
	temperature = data[0] | (data[1] << 8); // Temperature is 16-bit length
 8000ec0:	7a3b      	ldrb	r3, [r7, #8]
 8000ec2:	b21a      	sxth	r2, r3
 8000ec4:	7a7b      	ldrb	r3, [r7, #9]
 8000ec6:	021b      	lsls	r3, r3, #8
 8000ec8:	b21b      	sxth	r3, r3
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	b21b      	sxth	r3, r3
 8000ece:	823b      	strh	r3, [r7, #16]

	OneWire_Reset(&OneWire); // Reset the bus
 8000ed0:	482b      	ldr	r0, [pc, #172]	; (8000f80 <DS18B20_Read+0x14c>)
 8000ed2:	f000 fa48 	bl	8001366 <OneWire_Reset>

	resolution = ((data[4] & 0x60) >> 5) + 9; // Sensor's resolution from scratchpad's byte 4
 8000ed6:	7b3b      	ldrb	r3, [r7, #12]
 8000ed8:	115b      	asrs	r3, r3, #5
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	f003 0303 	and.w	r3, r3, #3
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	3309      	adds	r3, #9
 8000ee4:	73fb      	strb	r3, [r7, #15]

	switch (resolution) // Chceck the correct value dur to resolution
 8000ee6:	7bfb      	ldrb	r3, [r7, #15]
 8000ee8:	3b09      	subs	r3, #9
 8000eea:	2b03      	cmp	r3, #3
 8000eec:	d83a      	bhi.n	8000f64 <DS18B20_Read+0x130>
 8000eee:	a201      	add	r2, pc, #4	; (adr r2, 8000ef4 <DS18B20_Read+0xc0>)
 8000ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ef4:	08000f05 	.word	0x08000f05
 8000ef8:	08000f1d 	.word	0x08000f1d
 8000efc:	08000f35 	.word	0x08000f35
 8000f00:	08000f4d 	.word	0x08000f4d
	{
		case DS18B20_Resolution_9bits:
			result = temperature*(float)DS18B20_STEP_9BIT;
 8000f04:	8a3b      	ldrh	r3, [r7, #16]
 8000f06:	ee07 3a90 	vmov	s15, r3
 8000f0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f0e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000f12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f16:	edc7 7a05 	vstr	s15, [r7, #20]
		break;
 8000f1a:	e025      	b.n	8000f68 <DS18B20_Read+0x134>
		case DS18B20_Resolution_10bits:
			result = temperature*(float)DS18B20_STEP_10BIT;
 8000f1c:	8a3b      	ldrh	r3, [r7, #16]
 8000f1e:	ee07 3a90 	vmov	s15, r3
 8000f22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f26:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8000f2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f2e:	edc7 7a05 	vstr	s15, [r7, #20]
		 break;
 8000f32:	e019      	b.n	8000f68 <DS18B20_Read+0x134>
		case DS18B20_Resolution_11bits:
			result = temperature*(float)DS18B20_STEP_11BIT;
 8000f34:	8a3b      	ldrh	r3, [r7, #16]
 8000f36:	ee07 3a90 	vmov	s15, r3
 8000f3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f3e:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8000f42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f46:	edc7 7a05 	vstr	s15, [r7, #20]
		break;
 8000f4a:	e00d      	b.n	8000f68 <DS18B20_Read+0x134>
		case DS18B20_Resolution_12bits:
			result = temperature*(float)DS18B20_STEP_12BIT;
 8000f4c:	8a3b      	ldrh	r3, [r7, #16]
 8000f4e:	ee07 3a90 	vmov	s15, r3
 8000f52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f56:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8000f84 <DS18B20_Read+0x150>
 8000f5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f5e:	edc7 7a05 	vstr	s15, [r7, #20]
		 break;
 8000f62:	e001      	b.n	8000f68 <DS18B20_Read+0x134>
		default:
			result = 0xFF;
 8000f64:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <DS18B20_Read+0x154>)
 8000f66:	617b      	str	r3, [r7, #20]
	}

	*destination = result;
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	697a      	ldr	r2, [r7, #20]
 8000f6c:	601a      	str	r2, [r3, #0]

	return 1; //temperature valid
 8000f6e:	2301      	movs	r3, #1
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	371c      	adds	r7, #28
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd90      	pop	{r4, r7, pc}
 8000f78:	200000e8 	.word	0x200000e8
 8000f7c:	20000094 	.word	0x20000094
 8000f80:	200000d4 	.word	0x200000d4
 8000f84:	3d800000 	.word	0x3d800000
 8000f88:	437f0000 	.word	0x437f0000

08000f8c <DS18B20_SetResolution>:

	return conf;
}

uint8_t DS18B20_SetResolution(uint8_t number, DS18B20_Resolution_t resolution)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	460a      	mov	r2, r1
 8000f96:	71fb      	strb	r3, [r7, #7]
 8000f98:	4613      	mov	r3, r2
 8000f9a:	71bb      	strb	r3, [r7, #6]
	if( number >= TempSensorCount)
 8000f9c:	4b4b      	ldr	r3, [pc, #300]	; (80010cc <DS18B20_SetResolution+0x140>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	79fa      	ldrb	r2, [r7, #7]
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	d301      	bcc.n	8000faa <DS18B20_SetResolution+0x1e>
		return 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	e08c      	b.n	80010c4 <DS18B20_SetResolution+0x138>

	uint8_t th, tl, conf;
	if (!DS18B20_Is((uint8_t*)&ds18b20[number].Address))
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	011b      	lsls	r3, r3, #4
 8000fae:	4a48      	ldr	r2, [pc, #288]	; (80010d0 <DS18B20_SetResolution+0x144>)
 8000fb0:	4413      	add	r3, r2
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f000 f890 	bl	80010d8 <DS18B20_Is>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d101      	bne.n	8000fc2 <DS18B20_SetResolution+0x36>
		return 0;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	e080      	b.n	80010c4 <DS18B20_SetResolution+0x138>

	OneWire_Reset(&OneWire); // Reset the bus
 8000fc2:	4844      	ldr	r0, [pc, #272]	; (80010d4 <DS18B20_SetResolution+0x148>)
 8000fc4:	f000 f9cf 	bl	8001366 <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	011b      	lsls	r3, r3, #4
 8000fcc:	4a40      	ldr	r2, [pc, #256]	; (80010d0 <DS18B20_SetResolution+0x144>)
 8000fce:	4413      	add	r3, r2
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4840      	ldr	r0, [pc, #256]	; (80010d4 <DS18B20_SetResolution+0x148>)
 8000fd4:	f000 fb79 	bl	80016ca <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_RSCRATCHPAD); // Read scratchpad command
 8000fd8:	21be      	movs	r1, #190	; 0xbe
 8000fda:	483e      	ldr	r0, [pc, #248]	; (80010d4 <DS18B20_SetResolution+0x148>)
 8000fdc:	f000 fa40 	bl	8001460 <OneWire_WriteByte>

	OneWire_ReadByte(&OneWire);
 8000fe0:	483c      	ldr	r0, [pc, #240]	; (80010d4 <DS18B20_SetResolution+0x148>)
 8000fe2:	f000 fa5b 	bl	800149c <OneWire_ReadByte>
	OneWire_ReadByte(&OneWire);
 8000fe6:	483b      	ldr	r0, [pc, #236]	; (80010d4 <DS18B20_SetResolution+0x148>)
 8000fe8:	f000 fa58 	bl	800149c <OneWire_ReadByte>

	th = OneWire_ReadByte(&OneWire); 	// Writing to scratchpad begins from the temperature alarms bytes
 8000fec:	4839      	ldr	r0, [pc, #228]	; (80010d4 <DS18B20_SetResolution+0x148>)
 8000fee:	f000 fa55 	bl	800149c <OneWire_ReadByte>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	73bb      	strb	r3, [r7, #14]
	tl = OneWire_ReadByte(&OneWire); 	// 	so i have to store them.
 8000ff6:	4837      	ldr	r0, [pc, #220]	; (80010d4 <DS18B20_SetResolution+0x148>)
 8000ff8:	f000 fa50 	bl	800149c <OneWire_ReadByte>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	737b      	strb	r3, [r7, #13]
	conf = OneWire_ReadByte(&OneWire);	// Config byte
 8001000:	4834      	ldr	r0, [pc, #208]	; (80010d4 <DS18B20_SetResolution+0x148>)
 8001002:	f000 fa4b 	bl	800149c <OneWire_ReadByte>
 8001006:	4603      	mov	r3, r0
 8001008:	73fb      	strb	r3, [r7, #15]

	if (resolution == DS18B20_Resolution_9bits) // Bits setting
 800100a:	79bb      	ldrb	r3, [r7, #6]
 800100c:	2b09      	cmp	r3, #9
 800100e:	d108      	bne.n	8001022 <DS18B20_SetResolution+0x96>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8001010:	7bfb      	ldrb	r3, [r7, #15]
 8001012:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001016:	73fb      	strb	r3, [r7, #15]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8001018:	7bfb      	ldrb	r3, [r7, #15]
 800101a:	f023 0320 	bic.w	r3, r3, #32
 800101e:	73fb      	strb	r3, [r7, #15]
 8001020:	e022      	b.n	8001068 <DS18B20_SetResolution+0xdc>
	}
	else if (resolution == DS18B20_Resolution_10bits)
 8001022:	79bb      	ldrb	r3, [r7, #6]
 8001024:	2b0a      	cmp	r3, #10
 8001026:	d108      	bne.n	800103a <DS18B20_SetResolution+0xae>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8001028:	7bfb      	ldrb	r3, [r7, #15]
 800102a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800102e:	73fb      	strb	r3, [r7, #15]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8001030:	7bfb      	ldrb	r3, [r7, #15]
 8001032:	f043 0320 	orr.w	r3, r3, #32
 8001036:	73fb      	strb	r3, [r7, #15]
 8001038:	e016      	b.n	8001068 <DS18B20_SetResolution+0xdc>
	}
	else if (resolution == DS18B20_Resolution_11bits)
 800103a:	79bb      	ldrb	r3, [r7, #6]
 800103c:	2b0b      	cmp	r3, #11
 800103e:	d108      	bne.n	8001052 <DS18B20_SetResolution+0xc6>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8001040:	7bfb      	ldrb	r3, [r7, #15]
 8001042:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001046:	73fb      	strb	r3, [r7, #15]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8001048:	7bfb      	ldrb	r3, [r7, #15]
 800104a:	f023 0320 	bic.w	r3, r3, #32
 800104e:	73fb      	strb	r3, [r7, #15]
 8001050:	e00a      	b.n	8001068 <DS18B20_SetResolution+0xdc>
	}
	else if (resolution == DS18B20_Resolution_12bits)
 8001052:	79bb      	ldrb	r3, [r7, #6]
 8001054:	2b0c      	cmp	r3, #12
 8001056:	d107      	bne.n	8001068 <DS18B20_SetResolution+0xdc>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8001058:	7bfb      	ldrb	r3, [r7, #15]
 800105a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800105e:	73fb      	strb	r3, [r7, #15]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8001060:	7bfb      	ldrb	r3, [r7, #15]
 8001062:	f043 0320 	orr.w	r3, r3, #32
 8001066:	73fb      	strb	r3, [r7, #15]
	}

	OneWire_Reset(&OneWire); // Reset the bus
 8001068:	481a      	ldr	r0, [pc, #104]	; (80010d4 <DS18B20_SetResolution+0x148>)
 800106a:	f000 f97c 	bl	8001366 <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	011b      	lsls	r3, r3, #4
 8001072:	4a17      	ldr	r2, [pc, #92]	; (80010d0 <DS18B20_SetResolution+0x144>)
 8001074:	4413      	add	r3, r2
 8001076:	4619      	mov	r1, r3
 8001078:	4816      	ldr	r0, [pc, #88]	; (80010d4 <DS18B20_SetResolution+0x148>)
 800107a:	f000 fb26 	bl	80016ca <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_WSCRATCHPAD); // Write scratchpad command
 800107e:	214e      	movs	r1, #78	; 0x4e
 8001080:	4814      	ldr	r0, [pc, #80]	; (80010d4 <DS18B20_SetResolution+0x148>)
 8001082:	f000 f9ed 	bl	8001460 <OneWire_WriteByte>

	OneWire_WriteByte(&OneWire, th); // Write 3 bytes to scratchpad
 8001086:	7bbb      	ldrb	r3, [r7, #14]
 8001088:	4619      	mov	r1, r3
 800108a:	4812      	ldr	r0, [pc, #72]	; (80010d4 <DS18B20_SetResolution+0x148>)
 800108c:	f000 f9e8 	bl	8001460 <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, tl);
 8001090:	7b7b      	ldrb	r3, [r7, #13]
 8001092:	4619      	mov	r1, r3
 8001094:	480f      	ldr	r0, [pc, #60]	; (80010d4 <DS18B20_SetResolution+0x148>)
 8001096:	f000 f9e3 	bl	8001460 <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, conf);
 800109a:	7bfb      	ldrb	r3, [r7, #15]
 800109c:	4619      	mov	r1, r3
 800109e:	480d      	ldr	r0, [pc, #52]	; (80010d4 <DS18B20_SetResolution+0x148>)
 80010a0:	f000 f9de 	bl	8001460 <OneWire_WriteByte>

	OneWire_Reset(&OneWire); // Reset the bus
 80010a4:	480b      	ldr	r0, [pc, #44]	; (80010d4 <DS18B20_SetResolution+0x148>)
 80010a6:	f000 f95e 	bl	8001366 <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	011b      	lsls	r3, r3, #4
 80010ae:	4a08      	ldr	r2, [pc, #32]	; (80010d0 <DS18B20_SetResolution+0x144>)
 80010b0:	4413      	add	r3, r2
 80010b2:	4619      	mov	r1, r3
 80010b4:	4807      	ldr	r0, [pc, #28]	; (80010d4 <DS18B20_SetResolution+0x148>)
 80010b6:	f000 fb08 	bl	80016ca <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_CPYSCRATCHPAD); // Copy scratchpad to EEPROM
 80010ba:	2148      	movs	r1, #72	; 0x48
 80010bc:	4805      	ldr	r0, [pc, #20]	; (80010d4 <DS18B20_SetResolution+0x148>)
 80010be:	f000 f9cf 	bl	8001460 <OneWire_WriteByte>

	return 1;
 80010c2:	2301      	movs	r3, #1
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	200000e8 	.word	0x200000e8
 80010d0:	20000094 	.word	0x20000094
 80010d4:	200000d4 	.word	0x200000d4

080010d8 <DS18B20_Is>:

uint8_t DS18B20_Is(uint8_t* ROM)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
	if (*ROM == DS18B20_FAMILY_CODE) // Check family code
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	2b28      	cmp	r3, #40	; 0x28
 80010e6:	d101      	bne.n	80010ec <DS18B20_Is+0x14>
		return 1;
 80010e8:	2301      	movs	r3, #1
 80010ea:	e000      	b.n	80010ee <DS18B20_Is+0x16>
	return 0;
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
	...

080010fc <DS18B20_AllDone>:

uint8_t DS18B20_AllDone(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
	return OneWire_ReadBit(&OneWire); // Bus is down - busy
 8001100:	4802      	ldr	r0, [pc, #8]	; (800110c <DS18B20_AllDone+0x10>)
 8001102:	f000 f983 	bl	800140c <OneWire_ReadBit>
 8001106:	4603      	mov	r3, r0
}
 8001108:	4618      	mov	r0, r3
 800110a:	bd80      	pop	{r7, pc}
 800110c:	200000d4 	.word	0x200000d4

08001110 <DS18B20_ReadAll>:

void DS18B20_ReadAll(void)
{
 8001110:	b590      	push	{r4, r7, lr}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
	uint8_t i;

	if (DS18B20_AllDone())
 8001116:	f7ff fff1 	bl	80010fc <DS18B20_AllDone>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d02e      	beq.n	800117e <DS18B20_ReadAll+0x6e>
	{
		for(i = 0; i < TempSensorCount; i++) // All detected sensors loop
 8001120:	2300      	movs	r3, #0
 8001122:	71fb      	strb	r3, [r7, #7]
 8001124:	e026      	b.n	8001174 <DS18B20_ReadAll+0x64>
		{
			ds18b20[i].ValidDataFlag = 0;
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	4a17      	ldr	r2, [pc, #92]	; (8001188 <DS18B20_ReadAll+0x78>)
 800112a:	011b      	lsls	r3, r3, #4
 800112c:	4413      	add	r3, r2
 800112e:	330c      	adds	r3, #12
 8001130:	2200      	movs	r2, #0
 8001132:	701a      	strb	r2, [r3, #0]

			if (DS18B20_Is((uint8_t*)&ds18b20[i].Address))
 8001134:	79fb      	ldrb	r3, [r7, #7]
 8001136:	011b      	lsls	r3, r3, #4
 8001138:	4a13      	ldr	r2, [pc, #76]	; (8001188 <DS18B20_ReadAll+0x78>)
 800113a:	4413      	add	r3, r2
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffcb 	bl	80010d8 <DS18B20_Is>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d012      	beq.n	800116e <DS18B20_ReadAll+0x5e>
			{
				ds18b20[i].ValidDataFlag = DS18B20_Read(i, &ds18b20[i].Temperature); // Read single sensor
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	011b      	lsls	r3, r3, #4
 800114c:	3308      	adds	r3, #8
 800114e:	4a0e      	ldr	r2, [pc, #56]	; (8001188 <DS18B20_ReadAll+0x78>)
 8001150:	441a      	add	r2, r3
 8001152:	79fc      	ldrb	r4, [r7, #7]
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	4611      	mov	r1, r2
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff fe6b 	bl	8000e34 <DS18B20_Read>
 800115e:	4603      	mov	r3, r0
 8001160:	4619      	mov	r1, r3
 8001162:	4a09      	ldr	r2, [pc, #36]	; (8001188 <DS18B20_ReadAll+0x78>)
 8001164:	0123      	lsls	r3, r4, #4
 8001166:	4413      	add	r3, r2
 8001168:	330c      	adds	r3, #12
 800116a:	460a      	mov	r2, r1
 800116c:	701a      	strb	r2, [r3, #0]
		for(i = 0; i < TempSensorCount; i++) // All detected sensors loop
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	3301      	adds	r3, #1
 8001172:	71fb      	strb	r3, [r7, #7]
 8001174:	4b05      	ldr	r3, [pc, #20]	; (800118c <DS18B20_ReadAll+0x7c>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	79fa      	ldrb	r2, [r7, #7]
 800117a:	429a      	cmp	r2, r3
 800117c:	d3d3      	bcc.n	8001126 <DS18B20_ReadAll+0x16>
			}
		}
	}
}
 800117e:	bf00      	nop
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	bd90      	pop	{r4, r7, pc}
 8001186:	bf00      	nop
 8001188:	20000094 	.word	0x20000094
 800118c:	200000e8 	.word	0x200000e8

08001190 <DS18B20_Quantity>:
	for(i = 0; i < 8; i++)
		ds18b20[number].Address[i] = ROM[i]; // Write ROM into sensor's structure
}

uint8_t DS18B20_Quantity(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
	return TempSensorCount;
 8001194:	4b03      	ldr	r3, [pc, #12]	; (80011a4 <DS18B20_Quantity+0x14>)
 8001196:	781b      	ldrb	r3, [r3, #0]
}
 8001198:	4618      	mov	r0, r3
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	200000e8 	.word	0x200000e8

080011a8 <DS18B20_GetTemperature>:

uint8_t DS18B20_GetTemperature(uint8_t number, float* destination)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	6039      	str	r1, [r7, #0]
 80011b2:	71fb      	strb	r3, [r7, #7]
	if(!ds18b20[number].ValidDataFlag)
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	4a0c      	ldr	r2, [pc, #48]	; (80011e8 <DS18B20_GetTemperature+0x40>)
 80011b8:	011b      	lsls	r3, r3, #4
 80011ba:	4413      	add	r3, r2
 80011bc:	330c      	adds	r3, #12
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d101      	bne.n	80011c8 <DS18B20_GetTemperature+0x20>
		return 0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	e008      	b.n	80011da <DS18B20_GetTemperature+0x32>

	*destination = ds18b20[number].Temperature;
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	4a07      	ldr	r2, [pc, #28]	; (80011e8 <DS18B20_GetTemperature+0x40>)
 80011cc:	011b      	lsls	r3, r3, #4
 80011ce:	4413      	add	r3, r2
 80011d0:	3308      	adds	r3, #8
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	601a      	str	r2, [r3, #0]
	return 1;
 80011d8:	2301      	movs	r3, #1

}
 80011da:	4618      	mov	r0, r3
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	20000094 	.word	0x20000094

080011ec <DS18B20_Init>:

void DS18B20_Init(DS18B20_Resolution_t resolution)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	71fb      	strb	r3, [r7, #7]
	uint8_t next = 0, i = 0, j;
 80011f6:	2300      	movs	r3, #0
 80011f8:	73fb      	strb	r3, [r7, #15]
 80011fa:	2300      	movs	r3, #0
 80011fc:	73bb      	strb	r3, [r7, #14]
	OneWire_Init(&OneWire, GPIOC, GPIO_PIN_11); // Init OneWire bus
 80011fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001202:	491f      	ldr	r1, [pc, #124]	; (8001280 <DS18B20_Init+0x94>)
 8001204:	481f      	ldr	r0, [pc, #124]	; (8001284 <DS18B20_Init+0x98>)
 8001206:	f000 fa9d 	bl	8001744 <OneWire_Init>

	next = OneWire_First(&OneWire); // Search first OneWire device
 800120a:	481e      	ldr	r0, [pc, #120]	; (8001284 <DS18B20_Init+0x98>)
 800120c:	f000 fa40 	bl	8001690 <OneWire_First>
 8001210:	4603      	mov	r3, r0
 8001212:	73fb      	strb	r3, [r7, #15]
	while(next)
 8001214:	e018      	b.n	8001248 <DS18B20_Init+0x5c>
	{
		TempSensorCount++;
 8001216:	4b1c      	ldr	r3, [pc, #112]	; (8001288 <DS18B20_Init+0x9c>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	3301      	adds	r3, #1
 800121c:	b2da      	uxtb	r2, r3
 800121e:	4b1a      	ldr	r3, [pc, #104]	; (8001288 <DS18B20_Init+0x9c>)
 8001220:	701a      	strb	r2, [r3, #0]
		OneWire_GetFullROM(&OneWire, (uint8_t*)&ds18b20[i++].Address); // Get the ROM of next sensor
 8001222:	7bbb      	ldrb	r3, [r7, #14]
 8001224:	1c5a      	adds	r2, r3, #1
 8001226:	73ba      	strb	r2, [r7, #14]
 8001228:	011b      	lsls	r3, r3, #4
 800122a:	4a18      	ldr	r2, [pc, #96]	; (800128c <DS18B20_Init+0xa0>)
 800122c:	4413      	add	r3, r2
 800122e:	4619      	mov	r1, r3
 8001230:	4814      	ldr	r0, [pc, #80]	; (8001284 <DS18B20_Init+0x98>)
 8001232:	f000 fa69 	bl	8001708 <OneWire_GetFullROM>
		next = OneWire_Next(&OneWire);
 8001236:	4813      	ldr	r0, [pc, #76]	; (8001284 <DS18B20_Init+0x98>)
 8001238:	f000 fa3a 	bl	80016b0 <OneWire_Next>
 800123c:	4603      	mov	r3, r0
 800123e:	73fb      	strb	r3, [r7, #15]
		if(TempSensorCount >= _DS18B20_MAX_SENSORS) // More sensors than set maximum is not allowed
 8001240:	4b11      	ldr	r3, [pc, #68]	; (8001288 <DS18B20_Init+0x9c>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	2b03      	cmp	r3, #3
 8001246:	d803      	bhi.n	8001250 <DS18B20_Init+0x64>
	while(next)
 8001248:	7bfb      	ldrb	r3, [r7, #15]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d1e3      	bne.n	8001216 <DS18B20_Init+0x2a>
 800124e:	e000      	b.n	8001252 <DS18B20_Init+0x66>
			break;
 8001250:	bf00      	nop
	}

	for(j = 0; j < i; j++)
 8001252:	2300      	movs	r3, #0
 8001254:	737b      	strb	r3, [r7, #13]
 8001256:	e00a      	b.n	800126e <DS18B20_Init+0x82>
	{
		DS18B20_SetResolution(j, resolution); // Set the initial resolution to sensor
 8001258:	79fa      	ldrb	r2, [r7, #7]
 800125a:	7b7b      	ldrb	r3, [r7, #13]
 800125c:	4611      	mov	r1, r2
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff fe94 	bl	8000f8c <DS18B20_SetResolution>

		DS18B20_StartAll(); // Start conversion on all sensors
 8001264:	f7ff fdd4 	bl	8000e10 <DS18B20_StartAll>
	for(j = 0; j < i; j++)
 8001268:	7b7b      	ldrb	r3, [r7, #13]
 800126a:	3301      	adds	r3, #1
 800126c:	737b      	strb	r3, [r7, #13]
 800126e:	7b7a      	ldrb	r2, [r7, #13]
 8001270:	7bbb      	ldrb	r3, [r7, #14]
 8001272:	429a      	cmp	r2, r3
 8001274:	d3f0      	bcc.n	8001258 <DS18B20_Init+0x6c>
	}
}
 8001276:	bf00      	nop
 8001278:	bf00      	nop
 800127a:	3710      	adds	r7, #16
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40020800 	.word	0x40020800
 8001284:	200000d4 	.word	0x200000d4
 8001288:	200000e8 	.word	0x200000e8
 800128c:	20000094 	.word	0x20000094

08001290 <OneWire_Delay>:

//
//	Delay function for constant 1-Wire timings
//
void OneWire_Delay(uint16_t us)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	80fb      	strh	r3, [r7, #6]
	_DS18B20_TIMER.Instance->CNT = 0;
 800129a:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <OneWire_Delay+0x30>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2200      	movs	r2, #0
 80012a0:	625a      	str	r2, [r3, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= us);
 80012a2:	bf00      	nop
 80012a4:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <OneWire_Delay+0x30>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012aa:	88fb      	ldrh	r3, [r7, #6]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d9f9      	bls.n	80012a4 <OneWire_Delay+0x14>
}
 80012b0:	bf00      	nop
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	20000594 	.word	0x20000594

080012c4 <OneWire_BusInputDirection>:

//
//	Bus direction control
//
void OneWire_BusInputDirection(OneWire_t *onewire)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b088      	sub	sp, #32
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	GPIO_InitStruct;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT; // Set as input
 80012cc:	2300      	movs	r3, #0
 80012ce:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL; // No pullup - the pullup resistor is external
 80012d0:	2300      	movs	r3, #0
 80012d2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM; // Medium GPIO frequency
 80012d4:	2301      	movs	r3, #1
 80012d6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pin = onewire->GPIO_Pin; // Pin for 1-Wire bus
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	889b      	ldrh	r3, [r3, #4]
 80012dc:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(onewire->GPIOx, &GPIO_InitStruct); // Reinitialize
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f107 020c 	add.w	r2, r7, #12
 80012e6:	4611      	mov	r1, r2
 80012e8:	4618      	mov	r0, r3
 80012ea:	f002 fb4f 	bl	800398c <HAL_GPIO_Init>
}
 80012ee:	bf00      	nop
 80012f0:	3720      	adds	r7, #32
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <OneWire_BusOutputDirection>:

void OneWire_BusOutputDirection(OneWire_t *onewire)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b088      	sub	sp, #32
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	GPIO_InitStruct;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD; // Set as open-drain output
 80012fe:	2311      	movs	r3, #17
 8001300:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL; // No pullup - the pullup resistor is external
 8001302:	2300      	movs	r3, #0
 8001304:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM; // Medium GPIO frequency
 8001306:	2301      	movs	r3, #1
 8001308:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pin = onewire->GPIO_Pin; // Pin for 1-Wire bus
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	889b      	ldrh	r3, [r3, #4]
 800130e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(onewire->GPIOx, &GPIO_InitStruct); // Reinitialize
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f107 020c 	add.w	r2, r7, #12
 8001318:	4611      	mov	r1, r2
 800131a:	4618      	mov	r0, r3
 800131c:	f002 fb36 	bl	800398c <HAL_GPIO_Init>
}
 8001320:	bf00      	nop
 8001322:	3720      	adds	r7, #32
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <OneWire_OutputLow>:

//
//	Bus pin output state control
//
void OneWire_OutputLow(OneWire_t *onewire)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
	onewire->GPIOx->BSRR = onewire->GPIO_Pin<<16; // Reset the 1-Wire pin
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	889b      	ldrh	r3, [r3, #4]
 8001334:	041a      	lsls	r2, r3, #16
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	619a      	str	r2, [r3, #24]
}
 800133c:	bf00      	nop
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <OneWire_OutputHigh>:

void OneWire_OutputHigh(OneWire_t *onewire)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
	onewire->GPIOx->BSRR = onewire->GPIO_Pin; // Set the 1-Wire pin
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	889a      	ldrh	r2, [r3, #4]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	619a      	str	r2, [r3, #24]
}
 800135a:	bf00      	nop
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr

08001366 <OneWire_Reset>:
//	Returns:
//	0 - Reset ok
//	1 - Error
//
uint8_t OneWire_Reset(OneWire_t* onewire)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b084      	sub	sp, #16
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
	uint8_t i;

	OneWire_OutputLow(onewire);  // Write bus output low
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f7ff ffda 	bl	8001328 <OneWire_OutputLow>
	OneWire_BusOutputDirection(onewire);
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f7ff ffbe 	bl	80012f6 <OneWire_BusOutputDirection>
	OneWire_Delay(480); // Wait 480 us for reset
 800137a:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 800137e:	f7ff ff87 	bl	8001290 <OneWire_Delay>

	OneWire_BusInputDirection(onewire); // Release the bus by switching to input
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff ff9e 	bl	80012c4 <OneWire_BusInputDirection>
	OneWire_Delay(70);
 8001388:	2046      	movs	r0, #70	; 0x46
 800138a:	f7ff ff81 	bl	8001290 <OneWire_Delay>

	i = HAL_GPIO_ReadPin(onewire->GPIOx, onewire->GPIO_Pin); // Check if bus is low
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	889b      	ldrh	r3, [r3, #4]
 8001396:	4619      	mov	r1, r3
 8001398:	4610      	mov	r0, r2
 800139a:	f002 fc7b 	bl	8003c94 <HAL_GPIO_ReadPin>
 800139e:	4603      	mov	r3, r0
 80013a0:	73fb      	strb	r3, [r7, #15]
															 // if it's high - no device is presence on the bus
	OneWire_Delay(410);
 80013a2:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 80013a6:	f7ff ff73 	bl	8001290 <OneWire_Delay>

	return i;
 80013aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3710      	adds	r7, #16
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <OneWire_WriteBit>:

//
//	Writing/Reading operations
//
void OneWire_WriteBit(OneWire_t* onewire, uint8_t bit)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	460b      	mov	r3, r1
 80013be:	70fb      	strb	r3, [r7, #3]
	if (bit) // Send '1',
 80013c0:	78fb      	ldrb	r3, [r7, #3]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d00f      	beq.n	80013e6 <OneWire_WriteBit+0x32>
	{
		OneWire_OutputLow(onewire);	// Set the bus low
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f7ff ffae 	bl	8001328 <OneWire_OutputLow>
		OneWire_BusOutputDirection(onewire);
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f7ff ff92 	bl	80012f6 <OneWire_BusOutputDirection>
		OneWire_Delay(6);
 80013d2:	2006      	movs	r0, #6
 80013d4:	f7ff ff5c 	bl	8001290 <OneWire_Delay>

		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f7ff ff73 	bl	80012c4 <OneWire_BusInputDirection>
		OneWire_Delay(64);
 80013de:	2040      	movs	r0, #64	; 0x40
 80013e0:	f7ff ff56 	bl	8001290 <OneWire_Delay>
		OneWire_Delay(60);

		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
		OneWire_Delay(10);
	}
}
 80013e4:	e00e      	b.n	8001404 <OneWire_WriteBit+0x50>
		OneWire_OutputLow(onewire); // Set the bus low
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f7ff ff9e 	bl	8001328 <OneWire_OutputLow>
		OneWire_BusOutputDirection(onewire);
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f7ff ff82 	bl	80012f6 <OneWire_BusOutputDirection>
		OneWire_Delay(60);
 80013f2:	203c      	movs	r0, #60	; 0x3c
 80013f4:	f7ff ff4c 	bl	8001290 <OneWire_Delay>
		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f7ff ff63 	bl	80012c4 <OneWire_BusInputDirection>
		OneWire_Delay(10);
 80013fe:	200a      	movs	r0, #10
 8001400:	f7ff ff46 	bl	8001290 <OneWire_Delay>
}
 8001404:	bf00      	nop
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <OneWire_ReadBit>:

uint8_t OneWire_ReadBit(OneWire_t* onewire)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
	uint8_t bit = 0; // Default read bit state is low
 8001414:	2300      	movs	r3, #0
 8001416:	73fb      	strb	r3, [r7, #15]

	OneWire_OutputLow(onewire); // Set low to initiate reading
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f7ff ff85 	bl	8001328 <OneWire_OutputLow>
	OneWire_BusOutputDirection(onewire);
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f7ff ff69 	bl	80012f6 <OneWire_BusOutputDirection>
	OneWire_Delay(2);
 8001424:	2002      	movs	r0, #2
 8001426:	f7ff ff33 	bl	8001290 <OneWire_Delay>

	OneWire_BusInputDirection(onewire); // Release bus for Slave response
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f7ff ff4a 	bl	80012c4 <OneWire_BusInputDirection>
	OneWire_Delay(10);
 8001430:	200a      	movs	r0, #10
 8001432:	f7ff ff2d 	bl	8001290 <OneWire_Delay>

	if (HAL_GPIO_ReadPin(onewire->GPIOx, onewire->GPIO_Pin)) // Read the bus state
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	889b      	ldrh	r3, [r3, #4]
 800143e:	4619      	mov	r1, r3
 8001440:	4610      	mov	r0, r2
 8001442:	f002 fc27 	bl	8003c94 <HAL_GPIO_ReadPin>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <OneWire_ReadBit+0x44>
		bit = 1;
 800144c:	2301      	movs	r3, #1
 800144e:	73fb      	strb	r3, [r7, #15]

	OneWire_Delay(50); // Wait for end of read cycle
 8001450:	2032      	movs	r0, #50	; 0x32
 8001452:	f7ff ff1d 	bl	8001290 <OneWire_Delay>

	return bit;
 8001456:	7bfb      	ldrb	r3, [r7, #15]
}
 8001458:	4618      	mov	r0, r3
 800145a:	3710      	adds	r7, #16
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <OneWire_WriteByte>:

void OneWire_WriteByte(OneWire_t* onewire, uint8_t byte)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	460b      	mov	r3, r1
 800146a:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 8;
 800146c:	2308      	movs	r3, #8
 800146e:	73fb      	strb	r3, [r7, #15]

	do
	{
		OneWire_WriteBit(onewire, byte & 1); // LSB first
 8001470:	78fb      	ldrb	r3, [r7, #3]
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	b2db      	uxtb	r3, r3
 8001478:	4619      	mov	r1, r3
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f7ff ff9a 	bl	80013b4 <OneWire_WriteBit>
		byte >>= 1;
 8001480:	78fb      	ldrb	r3, [r7, #3]
 8001482:	085b      	lsrs	r3, r3, #1
 8001484:	70fb      	strb	r3, [r7, #3]
	} while(--i);
 8001486:	7bfb      	ldrb	r3, [r7, #15]
 8001488:	3b01      	subs	r3, #1
 800148a:	73fb      	strb	r3, [r7, #15]
 800148c:	7bfb      	ldrb	r3, [r7, #15]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d1ee      	bne.n	8001470 <OneWire_WriteByte+0x10>
}
 8001492:	bf00      	nop
 8001494:	bf00      	nop
 8001496:	3710      	adds	r7, #16
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <OneWire_ReadByte>:

uint8_t OneWire_ReadByte(OneWire_t* onewire)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
	uint8_t i = 8, byte = 0;
 80014a4:	2308      	movs	r3, #8
 80014a6:	73fb      	strb	r3, [r7, #15]
 80014a8:	2300      	movs	r3, #0
 80014aa:	73bb      	strb	r3, [r7, #14]

	do{
		byte >>= 1;
 80014ac:	7bbb      	ldrb	r3, [r7, #14]
 80014ae:	085b      	lsrs	r3, r3, #1
 80014b0:	73bb      	strb	r3, [r7, #14]
		byte |= (OneWire_ReadBit(onewire) << 7); // LSB first
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f7ff ffaa 	bl	800140c <OneWire_ReadBit>
 80014b8:	4603      	mov	r3, r0
 80014ba:	01db      	lsls	r3, r3, #7
 80014bc:	b25a      	sxtb	r2, r3
 80014be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	b25b      	sxtb	r3, r3
 80014c6:	73bb      	strb	r3, [r7, #14]
	} while(--i);
 80014c8:	7bfb      	ldrb	r3, [r7, #15]
 80014ca:	3b01      	subs	r3, #1
 80014cc:	73fb      	strb	r3, [r7, #15]
 80014ce:	7bfb      	ldrb	r3, [r7, #15]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d1eb      	bne.n	80014ac <OneWire_ReadByte+0x10>

	return byte;
 80014d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <OneWire_ResetSearch>:

//
// 1-Wire search operations
//
void OneWire_ResetSearch(OneWire_t* onewire)
{
 80014de:	b480      	push	{r7}
 80014e0:	b083      	sub	sp, #12
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
	// Clear the search results
	onewire->LastDiscrepancy = 0;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	719a      	strb	r2, [r3, #6]
	onewire->LastDeviceFlag = 0;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2200      	movs	r2, #0
 80014f0:	721a      	strb	r2, [r3, #8]
	onewire->LastFamilyDiscrepancy = 0;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	71da      	strb	r2, [r3, #7]
}
 80014f8:	bf00      	nop
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <OneWire_Search>:

uint8_t OneWire_Search(OneWire_t* onewire, uint8_t command)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	460b      	mov	r3, r1
 800150e:	70fb      	strb	r3, [r7, #3]
	uint8_t id_bit_number;
	uint8_t last_zero, rom_byte_number, search_result;
	uint8_t id_bit, cmp_id_bit;
	uint8_t rom_byte_mask, search_direction;

	id_bit_number = 1;
 8001510:	2301      	movs	r3, #1
 8001512:	73fb      	strb	r3, [r7, #15]
	last_zero = 0;
 8001514:	2300      	movs	r3, #0
 8001516:	73bb      	strb	r3, [r7, #14]
	rom_byte_number = 0;
 8001518:	2300      	movs	r3, #0
 800151a:	737b      	strb	r3, [r7, #13]
	rom_byte_mask = 1;
 800151c:	2301      	movs	r3, #1
 800151e:	72fb      	strb	r3, [r7, #11]
	search_result = 0;
 8001520:	2300      	movs	r3, #0
 8001522:	733b      	strb	r3, [r7, #12]

	if (!onewire->LastDeviceFlag) // If last device flag is not set
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	7a1b      	ldrb	r3, [r3, #8]
 8001528:	2b00      	cmp	r3, #0
 800152a:	f040 809a 	bne.w	8001662 <OneWire_Search+0x15e>
	{
		if (OneWire_Reset(onewire)) // Reset bus
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f7ff ff19 	bl	8001366 <OneWire_Reset>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d00a      	beq.n	8001550 <OneWire_Search+0x4c>
		{
			// If error while reset - reset search results
			onewire->LastDiscrepancy = 0;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2200      	movs	r2, #0
 800153e:	719a      	strb	r2, [r3, #6]
			onewire->LastDeviceFlag = 0;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2200      	movs	r2, #0
 8001544:	721a      	strb	r2, [r3, #8]
			onewire->LastFamilyDiscrepancy = 0;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2200      	movs	r2, #0
 800154a:	71da      	strb	r2, [r3, #7]
			return 0;
 800154c:	2300      	movs	r3, #0
 800154e:	e09b      	b.n	8001688 <OneWire_Search+0x184>
		}

		OneWire_WriteByte(onewire, command); // Send searching command
 8001550:	78fb      	ldrb	r3, [r7, #3]
 8001552:	4619      	mov	r1, r3
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f7ff ff83 	bl	8001460 <OneWire_WriteByte>

		// Searching loop, Maxim APPLICATION NOTE 187
		do
		{
			id_bit = OneWire_ReadBit(onewire); // Read a bit 1
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f7ff ff56 	bl	800140c <OneWire_ReadBit>
 8001560:	4603      	mov	r3, r0
 8001562:	727b      	strb	r3, [r7, #9]
			cmp_id_bit = OneWire_ReadBit(onewire); // Read the complement of bit 1
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f7ff ff51 	bl	800140c <OneWire_ReadBit>
 800156a:	4603      	mov	r3, r0
 800156c:	723b      	strb	r3, [r7, #8]

			if ((id_bit == 1) && (cmp_id_bit == 1)) // 11 - data error
 800156e:	7a7b      	ldrb	r3, [r7, #9]
 8001570:	2b01      	cmp	r3, #1
 8001572:	d102      	bne.n	800157a <OneWire_Search+0x76>
 8001574:	7a3b      	ldrb	r3, [r7, #8]
 8001576:	2b01      	cmp	r3, #1
 8001578:	d064      	beq.n	8001644 <OneWire_Search+0x140>
			{
				break;
			}
			else
			{
				if (id_bit != cmp_id_bit)
 800157a:	7a7a      	ldrb	r2, [r7, #9]
 800157c:	7a3b      	ldrb	r3, [r7, #8]
 800157e:	429a      	cmp	r2, r3
 8001580:	d002      	beq.n	8001588 <OneWire_Search+0x84>
				{
					search_direction = id_bit;  // Bit write value for search
 8001582:	7a7b      	ldrb	r3, [r7, #9]
 8001584:	72bb      	strb	r3, [r7, #10]
 8001586:	e026      	b.n	80015d6 <OneWire_Search+0xd2>
				}
				else // 00 - 2 devices
				{
					// Table 3. Search Path Direction
					if (id_bit_number < onewire->LastDiscrepancy)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	799b      	ldrb	r3, [r3, #6]
 800158c:	7bfa      	ldrb	r2, [r7, #15]
 800158e:	429a      	cmp	r2, r3
 8001590:	d20d      	bcs.n	80015ae <OneWire_Search+0xaa>
					{
						search_direction = ((onewire->ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 8001592:	7b7b      	ldrb	r3, [r7, #13]
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	4413      	add	r3, r2
 8001598:	7a5a      	ldrb	r2, [r3, #9]
 800159a:	7afb      	ldrb	r3, [r7, #11]
 800159c:	4013      	ands	r3, r2
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	bf14      	ite	ne
 80015a4:	2301      	movne	r3, #1
 80015a6:	2300      	moveq	r3, #0
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	72bb      	strb	r3, [r7, #10]
 80015ac:	e008      	b.n	80015c0 <OneWire_Search+0xbc>
					}
					else
					{
						// If bit is equal to last - pick 1
						// If not - then pick 0
						search_direction = (id_bit_number == onewire->LastDiscrepancy);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	799b      	ldrb	r3, [r3, #6]
 80015b2:	7bfa      	ldrb	r2, [r7, #15]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	bf0c      	ite	eq
 80015b8:	2301      	moveq	r3, #1
 80015ba:	2300      	movne	r3, #0
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	72bb      	strb	r3, [r7, #10]
					}

					if (search_direction == 0) // If 0 was picked, write it to LastZero
 80015c0:	7abb      	ldrb	r3, [r7, #10]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d107      	bne.n	80015d6 <OneWire_Search+0xd2>
					{
						last_zero = id_bit_number;
 80015c6:	7bfb      	ldrb	r3, [r7, #15]
 80015c8:	73bb      	strb	r3, [r7, #14]

						if (last_zero < 9) // Check for last discrepancy in family
 80015ca:	7bbb      	ldrb	r3, [r7, #14]
 80015cc:	2b08      	cmp	r3, #8
 80015ce:	d802      	bhi.n	80015d6 <OneWire_Search+0xd2>
						{
							onewire->LastFamilyDiscrepancy = last_zero;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	7bba      	ldrb	r2, [r7, #14]
 80015d4:	71da      	strb	r2, [r3, #7]
						}
					}
				}

				if (search_direction == 1)
 80015d6:	7abb      	ldrb	r3, [r7, #10]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d10c      	bne.n	80015f6 <OneWire_Search+0xf2>
				{
					onewire->ROM_NO[rom_byte_number] |= rom_byte_mask; // Set the bit in the ROM byte rom_byte_number
 80015dc:	7b7b      	ldrb	r3, [r7, #13]
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	4413      	add	r3, r2
 80015e2:	7a59      	ldrb	r1, [r3, #9]
 80015e4:	7b7b      	ldrb	r3, [r7, #13]
 80015e6:	7afa      	ldrb	r2, [r7, #11]
 80015e8:	430a      	orrs	r2, r1
 80015ea:	b2d1      	uxtb	r1, r2
 80015ec:	687a      	ldr	r2, [r7, #4]
 80015ee:	4413      	add	r3, r2
 80015f0:	460a      	mov	r2, r1
 80015f2:	725a      	strb	r2, [r3, #9]
 80015f4:	e010      	b.n	8001618 <OneWire_Search+0x114>
				}
				else
				{
					onewire->ROM_NO[rom_byte_number] &= ~rom_byte_mask; // Clear the bit in the ROM byte rom_byte_number
 80015f6:	7b7b      	ldrb	r3, [r7, #13]
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	4413      	add	r3, r2
 80015fc:	7a5b      	ldrb	r3, [r3, #9]
 80015fe:	b25a      	sxtb	r2, r3
 8001600:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001604:	43db      	mvns	r3, r3
 8001606:	b25b      	sxtb	r3, r3
 8001608:	4013      	ands	r3, r2
 800160a:	b25a      	sxtb	r2, r3
 800160c:	7b7b      	ldrb	r3, [r7, #13]
 800160e:	b2d1      	uxtb	r1, r2
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	4413      	add	r3, r2
 8001614:	460a      	mov	r2, r1
 8001616:	725a      	strb	r2, [r3, #9]
				}

				OneWire_WriteBit(onewire, search_direction); // Search direction write bit
 8001618:	7abb      	ldrb	r3, [r7, #10]
 800161a:	4619      	mov	r1, r3
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f7ff fec9 	bl	80013b4 <OneWire_WriteBit>

				id_bit_number++; // Next bit search - increase the id
 8001622:	7bfb      	ldrb	r3, [r7, #15]
 8001624:	3301      	adds	r3, #1
 8001626:	73fb      	strb	r3, [r7, #15]
				rom_byte_mask <<= 1; // Shoft the mask for next bit
 8001628:	7afb      	ldrb	r3, [r7, #11]
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	72fb      	strb	r3, [r7, #11]

				if (rom_byte_mask == 0) // If the mask is 0, it says the whole byte is read
 800162e:	7afb      	ldrb	r3, [r7, #11]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d104      	bne.n	800163e <OneWire_Search+0x13a>
				{
					rom_byte_number++; // Next byte number
 8001634:	7b7b      	ldrb	r3, [r7, #13]
 8001636:	3301      	adds	r3, #1
 8001638:	737b      	strb	r3, [r7, #13]
					rom_byte_mask = 1; // Reset the mask - first bit
 800163a:	2301      	movs	r3, #1
 800163c:	72fb      	strb	r3, [r7, #11]
				}
			}
		} while(rom_byte_number < 8);  // Read 8 bytes
 800163e:	7b7b      	ldrb	r3, [r7, #13]
 8001640:	2b07      	cmp	r3, #7
 8001642:	d98a      	bls.n	800155a <OneWire_Search+0x56>

		if (!(id_bit_number < 65)) // If all read bits number is below 65 (8 bytes)
 8001644:	7bfb      	ldrb	r3, [r7, #15]
 8001646:	2b40      	cmp	r3, #64	; 0x40
 8001648:	d90b      	bls.n	8001662 <OneWire_Search+0x15e>
		{
			onewire->LastDiscrepancy = last_zero;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	7bba      	ldrb	r2, [r7, #14]
 800164e:	719a      	strb	r2, [r3, #6]

			if (onewire->LastDiscrepancy == 0) // If last discrepancy is 0 - last device found
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	799b      	ldrb	r3, [r3, #6]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d102      	bne.n	800165e <OneWire_Search+0x15a>
			{
				onewire->LastDeviceFlag = 1; // Set the flag
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2201      	movs	r2, #1
 800165c:	721a      	strb	r2, [r3, #8]
			}

			search_result = 1; // Searching successful
 800165e:	2301      	movs	r3, #1
 8001660:	733b      	strb	r3, [r7, #12]
		}
	}

	// If no device is found - reset search data and return 0
	if (!search_result || !onewire->ROM_NO[0])
 8001662:	7b3b      	ldrb	r3, [r7, #12]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d003      	beq.n	8001670 <OneWire_Search+0x16c>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	7a5b      	ldrb	r3, [r3, #9]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d10a      	bne.n	8001686 <OneWire_Search+0x182>
	{
		onewire->LastDiscrepancy = 0;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2200      	movs	r2, #0
 8001674:	719a      	strb	r2, [r3, #6]
		onewire->LastDeviceFlag = 0;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	721a      	strb	r2, [r3, #8]
		onewire->LastFamilyDiscrepancy = 0;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	71da      	strb	r2, [r3, #7]
		search_result = 0;
 8001682:	2300      	movs	r3, #0
 8001684:	733b      	strb	r3, [r7, #12]
	}

	return search_result;
 8001686:	7b3b      	ldrb	r3, [r7, #12]
}
 8001688:	4618      	mov	r0, r3
 800168a:	3710      	adds	r7, #16
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <OneWire_First>:

//
//	Return first device on 1-Wire bus
//
uint8_t OneWire_First(OneWire_t* onewire)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
	OneWire_ResetSearch(onewire);
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f7ff ff20 	bl	80014de <OneWire_ResetSearch>

	return OneWire_Search(onewire, ONEWIRE_CMD_SEARCHROM);
 800169e:	21f0      	movs	r1, #240	; 0xf0
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f7ff ff2f 	bl	8001504 <OneWire_Search>
 80016a6:	4603      	mov	r3, r0
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <OneWire_Next>:

//
//	Return next device on 1-Wire bus
//
uint8_t OneWire_Next(OneWire_t* onewire)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
   /* Leave the search state alone */
   return OneWire_Search(onewire, ONEWIRE_CMD_SEARCHROM);
 80016b8:	21f0      	movs	r1, #240	; 0xf0
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f7ff ff22 	bl	8001504 <OneWire_Search>
 80016c0:	4603      	mov	r3, r0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <OneWire_SelectWithPointer>:

//
//	Select a device on bus by pointer to ROM address
//
void OneWire_SelectWithPointer(OneWire_t* onewire, uint8_t *ROM)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b084      	sub	sp, #16
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
 80016d2:	6039      	str	r1, [r7, #0]
	uint8_t i;
	OneWire_WriteByte(onewire, ONEWIRE_CMD_MATCHROM); // Match ROM command
 80016d4:	2155      	movs	r1, #85	; 0x55
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f7ff fec2 	bl	8001460 <OneWire_WriteByte>

	for (i = 0; i < 8; i++)
 80016dc:	2300      	movs	r3, #0
 80016de:	73fb      	strb	r3, [r7, #15]
 80016e0:	e00a      	b.n	80016f8 <OneWire_SelectWithPointer+0x2e>
	{
		OneWire_WriteByte(onewire, *(ROM + i));
 80016e2:	7bfb      	ldrb	r3, [r7, #15]
 80016e4:	683a      	ldr	r2, [r7, #0]
 80016e6:	4413      	add	r3, r2
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	4619      	mov	r1, r3
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f7ff feb7 	bl	8001460 <OneWire_WriteByte>
	for (i = 0; i < 8; i++)
 80016f2:	7bfb      	ldrb	r3, [r7, #15]
 80016f4:	3301      	adds	r3, #1
 80016f6:	73fb      	strb	r3, [r7, #15]
 80016f8:	7bfb      	ldrb	r3, [r7, #15]
 80016fa:	2b07      	cmp	r3, #7
 80016fc:	d9f1      	bls.n	80016e2 <OneWire_SelectWithPointer+0x18>
	}
}
 80016fe:	bf00      	nop
 8001700:	bf00      	nop
 8001702:	3710      	adds	r7, #16
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <OneWire_GetFullROM>:

//
//	Get the ROM of found device
//
void OneWire_GetFullROM(OneWire_t* onewire, uint8_t *firstIndex)
{
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 8; i++) {
 8001712:	2300      	movs	r3, #0
 8001714:	73fb      	strb	r3, [r7, #15]
 8001716:	e00a      	b.n	800172e <OneWire_GetFullROM+0x26>
		*(firstIndex + i) = onewire->ROM_NO[i];
 8001718:	7bfa      	ldrb	r2, [r7, #15]
 800171a:	7bfb      	ldrb	r3, [r7, #15]
 800171c:	6839      	ldr	r1, [r7, #0]
 800171e:	440b      	add	r3, r1
 8001720:	6879      	ldr	r1, [r7, #4]
 8001722:	440a      	add	r2, r1
 8001724:	7a52      	ldrb	r2, [r2, #9]
 8001726:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) {
 8001728:	7bfb      	ldrb	r3, [r7, #15]
 800172a:	3301      	adds	r3, #1
 800172c:	73fb      	strb	r3, [r7, #15]
 800172e:	7bfb      	ldrb	r3, [r7, #15]
 8001730:	2b07      	cmp	r3, #7
 8001732:	d9f1      	bls.n	8001718 <OneWire_GetFullROM+0x10>
	}
}
 8001734:	bf00      	nop
 8001736:	bf00      	nop
 8001738:	3714      	adds	r7, #20
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
	...

08001744 <OneWire_Init>:

//
//	1-Wire initialization
//
void OneWire_Init(OneWire_t* onewire, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	4613      	mov	r3, r2
 8001750:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_Base_Start(&_DS18B20_TIMER); // Start the delay timer
 8001752:	4811      	ldr	r0, [pc, #68]	; (8001798 <OneWire_Init+0x54>)
 8001754:	f003 fc38 	bl	8004fc8 <HAL_TIM_Base_Start>

	onewire->GPIOx = GPIOx; // Save 1-wire bus pin
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	68ba      	ldr	r2, [r7, #8]
 800175c:	601a      	str	r2, [r3, #0]
	onewire->GPIO_Pin = GPIO_Pin;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	88fa      	ldrh	r2, [r7, #6]
 8001762:	809a      	strh	r2, [r3, #4]

	// 1-Wire bit bang initialization
	OneWire_BusOutputDirection(onewire);
 8001764:	68f8      	ldr	r0, [r7, #12]
 8001766:	f7ff fdc6 	bl	80012f6 <OneWire_BusOutputDirection>
	OneWire_OutputHigh(onewire);
 800176a:	68f8      	ldr	r0, [r7, #12]
 800176c:	f7ff fdec 	bl	8001348 <OneWire_OutputHigh>
	HAL_Delay(100);
 8001770:	2064      	movs	r0, #100	; 0x64
 8001772:	f001 fb85 	bl	8002e80 <HAL_Delay>
	OneWire_OutputLow(onewire);
 8001776:	68f8      	ldr	r0, [r7, #12]
 8001778:	f7ff fdd6 	bl	8001328 <OneWire_OutputLow>
	HAL_Delay(100);
 800177c:	2064      	movs	r0, #100	; 0x64
 800177e:	f001 fb7f 	bl	8002e80 <HAL_Delay>
	OneWire_OutputHigh(onewire);
 8001782:	68f8      	ldr	r0, [r7, #12]
 8001784:	f7ff fde0 	bl	8001348 <OneWire_OutputHigh>
	HAL_Delay(200);
 8001788:	20c8      	movs	r0, #200	; 0xc8
 800178a:	f001 fb79 	bl	8002e80 <HAL_Delay>
}
 800178e:	bf00      	nop
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	20000594 	.word	0x20000594

0800179c <ssd1306_write_command>:
SSD1306_FONT current_font;


/* I2C Write Function */
void ssd1306_write_command(uint8_t command)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af04      	add	r7, sp, #16
 80017a2:	4603      	mov	r3, r0
 80017a4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(SSD1306_I2C, SSD1306_I2C_SA_WRITE, SSD1306_CONTROL_BYTE_COMMAND, 1, &command, 1, 1000);
 80017a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017aa:	9302      	str	r3, [sp, #8]
 80017ac:	2301      	movs	r3, #1
 80017ae:	9301      	str	r3, [sp, #4]
 80017b0:	1dfb      	adds	r3, r7, #7
 80017b2:	9300      	str	r3, [sp, #0]
 80017b4:	2301      	movs	r3, #1
 80017b6:	2200      	movs	r2, #0
 80017b8:	2178      	movs	r1, #120	; 0x78
 80017ba:	4803      	ldr	r0, [pc, #12]	; (80017c8 <ssd1306_write_command+0x2c>)
 80017bc:	f002 fc04 	bl	8003fc8 <HAL_I2C_Mem_Write>
}
 80017c0:	bf00      	nop
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	20000540 	.word	0x20000540

080017cc <ssd1306_write_data>:

void ssd1306_write_data(uint8_t* buffer, uint16_t size)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af04      	add	r7, sp, #16
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	460b      	mov	r3, r1
 80017d6:	807b      	strh	r3, [r7, #2]
    HAL_I2C_Mem_Write(SSD1306_I2C, SSD1306_I2C_SA_WRITE, SSD1306_CONTROL_BYTE_DATA, 1, buffer, size, 1000);
 80017d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017dc:	9302      	str	r3, [sp, #8]
 80017de:	887b      	ldrh	r3, [r7, #2]
 80017e0:	9301      	str	r3, [sp, #4]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	9300      	str	r3, [sp, #0]
 80017e6:	2301      	movs	r3, #1
 80017e8:	2240      	movs	r2, #64	; 0x40
 80017ea:	2178      	movs	r1, #120	; 0x78
 80017ec:	4803      	ldr	r0, [pc, #12]	; (80017fc <ssd1306_write_data+0x30>)
 80017ee:	f002 fbeb 	bl	8003fc8 <HAL_I2C_Mem_Write>
}
 80017f2:	bf00      	nop
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	20000540 	.word	0x20000540

08001800 <charge_bump_setting>:


/* Charge Bump Setting */
void charge_bump_setting(uint8_t charge_bump)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	4603      	mov	r3, r0
 8001808:	71fb      	strb	r3, [r7, #7]
    ssd1306_write_command(CHARGE_BUMP_SETTING);
 800180a:	208d      	movs	r0, #141	; 0x8d
 800180c:	f7ff ffc6 	bl	800179c <ssd1306_write_command>
    ssd1306_write_command(charge_bump);
 8001810:	79fb      	ldrb	r3, [r7, #7]
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff ffc2 	bl	800179c <ssd1306_write_command>
}
 8001818:	bf00      	nop
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <set_contrast_control>:

/* Fundamental */
void set_contrast_control(uint8_t value)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	71fb      	strb	r3, [r7, #7]
    ssd1306_write_command(SET_CONTRAST_CONTROL);
 800182a:	2081      	movs	r0, #129	; 0x81
 800182c:	f7ff ffb6 	bl	800179c <ssd1306_write_command>
    ssd1306_write_command(value);
 8001830:	79fb      	ldrb	r3, [r7, #7]
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff ffb2 	bl	800179c <ssd1306_write_command>
}
 8001838:	bf00      	nop
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <entire_display_off>:

void entire_display_off()
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
    ssd1306_write_command(ENTIRE_DISPLAY_OFF);
 8001844:	20a4      	movs	r0, #164	; 0xa4
 8001846:	f7ff ffa9 	bl	800179c <ssd1306_write_command>
}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}

0800184e <set_normal_display>:
{
    ssd1306_write_command(ENTIRE_DISPLAY_ON);
}

void set_normal_display()
{
 800184e:	b580      	push	{r7, lr}
 8001850:	af00      	add	r7, sp, #0
    ssd1306_write_command(SET_NORMAL_DISPLAY);
 8001852:	20a6      	movs	r0, #166	; 0xa6
 8001854:	f7ff ffa2 	bl	800179c <ssd1306_write_command>
}
 8001858:	bf00      	nop
 800185a:	bd80      	pop	{r7, pc}

0800185c <set_display_on>:
{
    ssd1306_write_command(SET_INVERSE_DISPLAY);
}

void set_display_on()
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
    ssd1306_write_command(SET_DISPLAY_ON);
 8001860:	20af      	movs	r0, #175	; 0xaf
 8001862:	f7ff ff9b 	bl	800179c <ssd1306_write_command>
}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}

0800186a <set_lower_column_start_address_for_page_addressing_mode>:
// 안써용~


/* Addressing Setting */
void set_lower_column_start_address_for_page_addressing_mode(uint8_t addr)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b082      	sub	sp, #8
 800186e:	af00      	add	r7, sp, #0
 8001870:	4603      	mov	r3, r0
 8001872:	71fb      	strb	r3, [r7, #7]
    ssd1306_write_command(addr);
 8001874:	79fb      	ldrb	r3, [r7, #7]
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff ff90 	bl	800179c <ssd1306_write_command>
}
 800187c:	bf00      	nop
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <set_higher_column_start_address_for_page_addressing_mode>:

void set_higher_column_start_address_for_page_addressing_mode(uint8_t addr)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	71fb      	strb	r3, [r7, #7]
    ssd1306_write_command(addr);
 800188e:	79fb      	ldrb	r3, [r7, #7]
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff ff83 	bl	800179c <ssd1306_write_command>
}
 8001896:	bf00      	nop
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <set_page_start_address_for_page_addressing_mode>:
    ssd1306_write_command(start);
    ssd1306_write_command(end);
}

void set_page_start_address_for_page_addressing_mode(uint8_t page)  // 0xB0(page0) ~ 0xB7(page7)
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	b082      	sub	sp, #8
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	4603      	mov	r3, r0
 80018a6:	71fb      	strb	r3, [r7, #7]
    ssd1306_write_command(page);
 80018a8:	79fb      	ldrb	r3, [r7, #7]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff ff76 	bl	800179c <ssd1306_write_command>
}
 80018b0:	bf00      	nop
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <set_display_start_line>:


/* Hardware Configuration */
void set_display_start_line(uint8_t start_line)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	71fb      	strb	r3, [r7, #7]
    ssd1306_write_command(start_line);
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff ff69 	bl	800179c <ssd1306_write_command>
}
 80018ca:	bf00      	nop
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <set_segment_remap>:

void set_segment_remap(uint8_t mapping)
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b082      	sub	sp, #8
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	4603      	mov	r3, r0
 80018da:	71fb      	strb	r3, [r7, #7]
    ssd1306_write_command(mapping);
 80018dc:	79fb      	ldrb	r3, [r7, #7]
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff ff5c 	bl	800179c <ssd1306_write_command>
}
 80018e4:	bf00      	nop
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <set_multiplex_ratio>:

void set_multiplex_ratio(uint8_t mux)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	71fb      	strb	r3, [r7, #7]
    ssd1306_write_command(SET_MULTIPLEX_RATIO);
 80018f6:	20a8      	movs	r0, #168	; 0xa8
 80018f8:	f7ff ff50 	bl	800179c <ssd1306_write_command>
    ssd1306_write_command(mux);
 80018fc:	79fb      	ldrb	r3, [r7, #7]
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff ff4c 	bl	800179c <ssd1306_write_command>
}
 8001904:	bf00      	nop
 8001906:	3708      	adds	r7, #8
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <set_com_output_scan_direction>:

void set_com_output_scan_direction(uint8_t mode)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	71fb      	strb	r3, [r7, #7]
    ssd1306_write_command(mode);
 8001916:	79fb      	ldrb	r3, [r7, #7]
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff ff3f 	bl	800179c <ssd1306_write_command>
}
 800191e:	bf00      	nop
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <set_display_offset>:

void set_display_offset(uint8_t vertical_shift)
{
 8001926:	b580      	push	{r7, lr}
 8001928:	b082      	sub	sp, #8
 800192a:	af00      	add	r7, sp, #0
 800192c:	4603      	mov	r3, r0
 800192e:	71fb      	strb	r3, [r7, #7]
    ssd1306_write_command(SET_DISPLAY_OFFSET);
 8001930:	20d3      	movs	r0, #211	; 0xd3
 8001932:	f7ff ff33 	bl	800179c <ssd1306_write_command>
    ssd1306_write_command(vertical_shift);
 8001936:	79fb      	ldrb	r3, [r7, #7]
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff ff2f 	bl	800179c <ssd1306_write_command>
}
 800193e:	bf00      	nop
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <set_com_pins_hardware_config>:

void set_com_pins_hardware_config(uint8_t com_pin_config, uint8_t com_left_right_remap)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b084      	sub	sp, #16
 800194a:	af00      	add	r7, sp, #0
 800194c:	4603      	mov	r3, r0
 800194e:	460a      	mov	r2, r1
 8001950:	71fb      	strb	r3, [r7, #7]
 8001952:	4613      	mov	r3, r2
 8001954:	71bb      	strb	r3, [r7, #6]
    uint8_t buffer = 0x02 | (com_pin_config << 4) | (com_left_right_remap << 5);
 8001956:	79fb      	ldrb	r3, [r7, #7]
 8001958:	011b      	lsls	r3, r3, #4
 800195a:	b25b      	sxtb	r3, r3
 800195c:	f043 0302 	orr.w	r3, r3, #2
 8001960:	b25a      	sxtb	r2, r3
 8001962:	79bb      	ldrb	r3, [r7, #6]
 8001964:	015b      	lsls	r3, r3, #5
 8001966:	b25b      	sxtb	r3, r3
 8001968:	4313      	orrs	r3, r2
 800196a:	b25b      	sxtb	r3, r3
 800196c:	73fb      	strb	r3, [r7, #15]

    ssd1306_write_command(SET_COM_PINS_HARDWARE_CONFIG);
 800196e:	20da      	movs	r0, #218	; 0xda
 8001970:	f7ff ff14 	bl	800179c <ssd1306_write_command>
    ssd1306_write_command(buffer);
 8001974:	7bfb      	ldrb	r3, [r7, #15]
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff ff10 	bl	800179c <ssd1306_write_command>
}
 800197c:	bf00      	nop
 800197e:	3710      	adds	r7, #16
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <set_display_clock_divide_ratio_and_osc_freq>:


/* Timing & Driving Scheme Setting */
void set_display_clock_divide_ratio_and_osc_freq(uint8_t divide_ratio, uint8_t osc_freq)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	460a      	mov	r2, r1
 800198e:	71fb      	strb	r3, [r7, #7]
 8001990:	4613      	mov	r3, r2
 8001992:	71bb      	strb	r3, [r7, #6]
    uint8_t buffer = (osc_freq << 4) | divide_ratio;
 8001994:	79bb      	ldrb	r3, [r7, #6]
 8001996:	011b      	lsls	r3, r3, #4
 8001998:	b25a      	sxtb	r2, r3
 800199a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199e:	4313      	orrs	r3, r2
 80019a0:	b25b      	sxtb	r3, r3
 80019a2:	73fb      	strb	r3, [r7, #15]

    ssd1306_write_command(SET_DISPLAY_CLOCK_DIVIDE_RATIO_AND_OSC_FREQ);
 80019a4:	20d5      	movs	r0, #213	; 0xd5
 80019a6:	f7ff fef9 	bl	800179c <ssd1306_write_command>
    ssd1306_write_command(buffer);
 80019aa:	7bfb      	ldrb	r3, [r7, #15]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff fef5 	bl	800179c <ssd1306_write_command>
}
 80019b2:	bf00      	nop
 80019b4:	3710      	adds	r7, #16
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <ssd1306_init>:
}


/* SSD1306 Function */
void ssd1306_init()
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	af00      	add	r7, sp, #0
    // SSD1306 App Note 5p
    set_multiplex_ratio(63);
 80019be:	203f      	movs	r0, #63	; 0x3f
 80019c0:	f7ff ff94 	bl	80018ec <set_multiplex_ratio>

    set_display_offset(0);
 80019c4:	2000      	movs	r0, #0
 80019c6:	f7ff ffae 	bl	8001926 <set_display_offset>

    set_display_start_line(0x40);
 80019ca:	2040      	movs	r0, #64	; 0x40
 80019cc:	f7ff ff74 	bl	80018b8 <set_display_start_line>

    set_segment_remap(0xA1);
 80019d0:	20a1      	movs	r0, #161	; 0xa1
 80019d2:	f7ff ff7e 	bl	80018d2 <set_segment_remap>

    set_com_output_scan_direction(0xC8);
 80019d6:	20c8      	movs	r0, #200	; 0xc8
 80019d8:	f7ff ff98 	bl	800190c <set_com_output_scan_direction>

    set_com_pins_hardware_config(1, 0);
 80019dc:	2100      	movs	r1, #0
 80019de:	2001      	movs	r0, #1
 80019e0:	f7ff ffb1 	bl	8001946 <set_com_pins_hardware_config>

    set_contrast_control(0x7F);
 80019e4:	207f      	movs	r0, #127	; 0x7f
 80019e6:	f7ff ff1b 	bl	8001820 <set_contrast_control>

    entire_display_off();
 80019ea:	f7ff ff29 	bl	8001840 <entire_display_off>

    set_normal_display();
 80019ee:	f7ff ff2e 	bl	800184e <set_normal_display>

    set_display_clock_divide_ratio_and_osc_freq(0, 8);
 80019f2:	2108      	movs	r1, #8
 80019f4:	2000      	movs	r0, #0
 80019f6:	f7ff ffc5 	bl	8001984 <set_display_clock_divide_ratio_and_osc_freq>

    charge_bump_setting(0x14);
 80019fa:	2014      	movs	r0, #20
 80019fc:	f7ff ff00 	bl	8001800 <charge_bump_setting>

    set_display_on();
 8001a00:	f7ff ff2c 	bl	800185c <set_display_on>

    // Clear Ram Data
    ssd1306_black_screen();
 8001a04:	f000 f82e 	bl	8001a64 <ssd1306_black_screen>

    // Set cursor 0, 0
    ssd1306_set_cursor(0, 0);
 8001a08:	2100      	movs	r1, #0
 8001a0a:	2000      	movs	r0, #0
 8001a0c:	f000 f944 	bl	8001c98 <ssd1306_set_cursor>
}
 8001a10:	bf00      	nop
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <ssd1306_update_screen>:

void ssd1306_update_screen()
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
    for(int i = 0; i < SSD1306_PAGE; i ++)
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	607b      	str	r3, [r7, #4]
 8001a1e:	e017      	b.n	8001a50 <ssd1306_update_screen+0x3c>
    {
        set_page_start_address_for_page_addressing_mode(0xB0 + i);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	3b50      	subs	r3, #80	; 0x50
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff ff38 	bl	800189e <set_page_start_address_for_page_addressing_mode>
        set_lower_column_start_address_for_page_addressing_mode(0x00);
 8001a2e:	2000      	movs	r0, #0
 8001a30:	f7ff ff1b 	bl	800186a <set_lower_column_start_address_for_page_addressing_mode>
        set_higher_column_start_address_for_page_addressing_mode(0x10);
 8001a34:	2010      	movs	r0, #16
 8001a36:	f7ff ff25 	bl	8001884 <set_higher_column_start_address_for_page_addressing_mode>

        ssd1306_write_data(&ssd1306_buffer[SSD1306_WIDTH * i], SSD1306_WIDTH);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	01db      	lsls	r3, r3, #7
 8001a3e:	4a08      	ldr	r2, [pc, #32]	; (8001a60 <ssd1306_update_screen+0x4c>)
 8001a40:	4413      	add	r3, r2
 8001a42:	2180      	movs	r1, #128	; 0x80
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff fec1 	bl	80017cc <ssd1306_write_data>
    for(int i = 0; i < SSD1306_PAGE; i ++)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	607b      	str	r3, [r7, #4]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2b07      	cmp	r3, #7
 8001a54:	dde4      	ble.n	8001a20 <ssd1306_update_screen+0xc>
    }
}
 8001a56:	bf00      	nop
 8001a58:	bf00      	nop
 8001a5a:	3708      	adds	r7, #8
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	200000ec 	.word	0x200000ec

08001a64 <ssd1306_black_screen>:

void ssd1306_black_screen()
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
    for(int i = 0; i < SSD1306_BUFFER_SIZE; i++)
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	607b      	str	r3, [r7, #4]
 8001a6e:	e007      	b.n	8001a80 <ssd1306_black_screen+0x1c>
    {
        ssd1306_buffer[i] = 0x00;
 8001a70:	4a08      	ldr	r2, [pc, #32]	; (8001a94 <ssd1306_black_screen+0x30>)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4413      	add	r3, r2
 8001a76:	2200      	movs	r2, #0
 8001a78:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < SSD1306_BUFFER_SIZE; i++)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	607b      	str	r3, [r7, #4]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a86:	dbf3      	blt.n	8001a70 <ssd1306_black_screen+0xc>
    }

    ssd1306_update_screen();
 8001a88:	f7ff ffc4 	bl	8001a14 <ssd1306_update_screen>
}
 8001a8c:	bf00      	nop
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	200000ec 	.word	0x200000ec

08001a98 <ssd1306_black_pixel>:

    ssd1306_update_screen();
}

void ssd1306_black_pixel(uint8_t x, uint8_t y)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	460a      	mov	r2, r1
 8001aa2:	71fb      	strb	r3, [r7, #7]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	71bb      	strb	r3, [r7, #6]
    // (y / 8) * SSD1306_WIDTH : page
    // y % 8 : data bit D0 - D7
    ssd1306_buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001aa8:	79fa      	ldrb	r2, [r7, #7]
 8001aaa:	79bb      	ldrb	r3, [r7, #6]
 8001aac:	08db      	lsrs	r3, r3, #3
 8001aae:	b2d8      	uxtb	r0, r3
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	01db      	lsls	r3, r3, #7
 8001ab4:	4413      	add	r3, r2
 8001ab6:	4a0d      	ldr	r2, [pc, #52]	; (8001aec <ssd1306_black_pixel+0x54>)
 8001ab8:	5cd3      	ldrb	r3, [r2, r3]
 8001aba:	b25a      	sxtb	r2, r3
 8001abc:	79bb      	ldrb	r3, [r7, #6]
 8001abe:	f003 0307 	and.w	r3, r3, #7
 8001ac2:	2101      	movs	r1, #1
 8001ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac8:	b25b      	sxtb	r3, r3
 8001aca:	43db      	mvns	r3, r3
 8001acc:	b25b      	sxtb	r3, r3
 8001ace:	4013      	ands	r3, r2
 8001ad0:	b259      	sxtb	r1, r3
 8001ad2:	79fa      	ldrb	r2, [r7, #7]
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	01db      	lsls	r3, r3, #7
 8001ad8:	4413      	add	r3, r2
 8001ada:	b2c9      	uxtb	r1, r1
 8001adc:	4a03      	ldr	r2, [pc, #12]	; (8001aec <ssd1306_black_pixel+0x54>)
 8001ade:	54d1      	strb	r1, [r2, r3]
}
 8001ae0:	bf00      	nop
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr
 8001aec:	200000ec 	.word	0x200000ec

08001af0 <ssd1306_white_pixel>:

void ssd1306_white_pixel(uint8_t x, uint8_t y)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	460a      	mov	r2, r1
 8001afa:	71fb      	strb	r3, [r7, #7]
 8001afc:	4613      	mov	r3, r2
 8001afe:	71bb      	strb	r3, [r7, #6]
    // (y / 8) * SSD1306_WIDTH : page
    // y % 8 : data bit D0 - D7
    ssd1306_buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001b00:	79fa      	ldrb	r2, [r7, #7]
 8001b02:	79bb      	ldrb	r3, [r7, #6]
 8001b04:	08db      	lsrs	r3, r3, #3
 8001b06:	b2d8      	uxtb	r0, r3
 8001b08:	4603      	mov	r3, r0
 8001b0a:	01db      	lsls	r3, r3, #7
 8001b0c:	4413      	add	r3, r2
 8001b0e:	4a0c      	ldr	r2, [pc, #48]	; (8001b40 <ssd1306_white_pixel+0x50>)
 8001b10:	5cd3      	ldrb	r3, [r2, r3]
 8001b12:	b25a      	sxtb	r2, r3
 8001b14:	79bb      	ldrb	r3, [r7, #6]
 8001b16:	f003 0307 	and.w	r3, r3, #7
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b20:	b25b      	sxtb	r3, r3
 8001b22:	4313      	orrs	r3, r2
 8001b24:	b259      	sxtb	r1, r3
 8001b26:	79fa      	ldrb	r2, [r7, #7]
 8001b28:	4603      	mov	r3, r0
 8001b2a:	01db      	lsls	r3, r3, #7
 8001b2c:	4413      	add	r3, r2
 8001b2e:	b2c9      	uxtb	r1, r1
 8001b30:	4a03      	ldr	r2, [pc, #12]	; (8001b40 <ssd1306_white_pixel+0x50>)
 8001b32:	54d1      	strb	r1, [r2, r3]
}
 8001b34:	bf00      	nop
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr
 8001b40:	200000ec 	.word	0x200000ec

08001b44 <ssd1306_write_char>:

char ssd1306_write_char(SSD1306_FONT font, char ch)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b088      	sub	sp, #32
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	f107 0308 	add.w	r3, r7, #8
 8001b4e:	e883 0003 	stmia.w	r3, {r0, r1}
 8001b52:	4613      	mov	r3, r2
 8001b54:	71fb      	strb	r3, [r7, #7]
    uint32_t b;

    // Printable Characters : 32 - 126
    if(ch < 32 || ch > 126)
 8001b56:	79fb      	ldrb	r3, [r7, #7]
 8001b58:	2b1f      	cmp	r3, #31
 8001b5a:	d902      	bls.n	8001b62 <ssd1306_write_char+0x1e>
 8001b5c:	79fb      	ldrb	r3, [r7, #7]
 8001b5e:	2b7e      	cmp	r3, #126	; 0x7e
 8001b60:	d901      	bls.n	8001b66 <ssd1306_write_char+0x22>
        return 0;
 8001b62:	2300      	movs	r3, #0
 8001b64:	e060      	b.n	8001c28 <ssd1306_write_char+0xe4>

    // Check remaining space on current line
    if (SSD1306_WIDTH < (cursor.x + font.width) ||  SSD1306_HEIGHT < (cursor.y + font.height))
 8001b66:	4b32      	ldr	r3, [pc, #200]	; (8001c30 <ssd1306_write_char+0xec>)
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	7a3b      	ldrb	r3, [r7, #8]
 8001b6e:	4413      	add	r3, r2
 8001b70:	2b80      	cmp	r3, #128	; 0x80
 8001b72:	dc06      	bgt.n	8001b82 <ssd1306_write_char+0x3e>
 8001b74:	4b2e      	ldr	r3, [pc, #184]	; (8001c30 <ssd1306_write_char+0xec>)
 8001b76:	785b      	ldrb	r3, [r3, #1]
 8001b78:	461a      	mov	r2, r3
 8001b7a:	7a7b      	ldrb	r3, [r7, #9]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	2b40      	cmp	r3, #64	; 0x40
 8001b80:	dd01      	ble.n	8001b86 <ssd1306_write_char+0x42>
    {
        // Not enough space on current line
        return 0;
 8001b82:	2300      	movs	r3, #0
 8001b84:	e050      	b.n	8001c28 <ssd1306_write_char+0xe4>
    }

    // Use the font to write
    for(int i = 0; i < font.height; i++)
 8001b86:	2300      	movs	r3, #0
 8001b88:	61fb      	str	r3, [r7, #28]
 8001b8a:	e040      	b.n	8001c0e <ssd1306_write_char+0xca>
    {
        b = font.data[(ch - 32) * font.height + i];
 8001b8c:	68fa      	ldr	r2, [r7, #12]
 8001b8e:	79fb      	ldrb	r3, [r7, #7]
 8001b90:	3b20      	subs	r3, #32
 8001b92:	7a79      	ldrb	r1, [r7, #9]
 8001b94:	fb03 f101 	mul.w	r1, r3, r1
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	440b      	add	r3, r1
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	4413      	add	r3, r2
 8001ba0:	881b      	ldrh	r3, [r3, #0]
 8001ba2:	617b      	str	r3, [r7, #20]

        for(int j = 0; j < font.width; j++)
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	61bb      	str	r3, [r7, #24]
 8001ba8:	e029      	b.n	8001bfe <ssd1306_write_char+0xba>
        {
            if((b << j) & 0x8000)
 8001baa:	697a      	ldr	r2, [r7, #20]
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d00f      	beq.n	8001bda <ssd1306_write_char+0x96>
            {
                ssd1306_white_pixel(cursor.x + j, cursor.y + i);
 8001bba:	4b1d      	ldr	r3, [pc, #116]	; (8001c30 <ssd1306_write_char+0xec>)
 8001bbc:	781a      	ldrb	r2, [r3, #0]
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	4413      	add	r3, r2
 8001bc4:	b2d8      	uxtb	r0, r3
 8001bc6:	4b1a      	ldr	r3, [pc, #104]	; (8001c30 <ssd1306_write_char+0xec>)
 8001bc8:	785a      	ldrb	r2, [r3, #1]
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	4413      	add	r3, r2
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	f7ff ff8c 	bl	8001af0 <ssd1306_white_pixel>
 8001bd8:	e00e      	b.n	8001bf8 <ssd1306_write_char+0xb4>
            }
            else
            {
                ssd1306_black_pixel(cursor.x + j, cursor.y + i);
 8001bda:	4b15      	ldr	r3, [pc, #84]	; (8001c30 <ssd1306_write_char+0xec>)
 8001bdc:	781a      	ldrb	r2, [r3, #0]
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	4413      	add	r3, r2
 8001be4:	b2d8      	uxtb	r0, r3
 8001be6:	4b12      	ldr	r3, [pc, #72]	; (8001c30 <ssd1306_write_char+0xec>)
 8001be8:	785a      	ldrb	r2, [r3, #1]
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	4413      	add	r3, r2
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	f7ff ff50 	bl	8001a98 <ssd1306_black_pixel>
        for(int j = 0; j < font.width; j++)
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	61bb      	str	r3, [r7, #24]
 8001bfe:	7a3b      	ldrb	r3, [r7, #8]
 8001c00:	461a      	mov	r2, r3
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	4293      	cmp	r3, r2
 8001c06:	dbd0      	blt.n	8001baa <ssd1306_write_char+0x66>
    for(int i = 0; i < font.height; i++)
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	61fb      	str	r3, [r7, #28]
 8001c0e:	7a7b      	ldrb	r3, [r7, #9]
 8001c10:	461a      	mov	r2, r3
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	4293      	cmp	r3, r2
 8001c16:	dbb9      	blt.n	8001b8c <ssd1306_write_char+0x48>
            }
        }
    }

    // The current space is now taken
    cursor.x += font.width;
 8001c18:	4b05      	ldr	r3, [pc, #20]	; (8001c30 <ssd1306_write_char+0xec>)
 8001c1a:	781a      	ldrb	r2, [r3, #0]
 8001c1c:	7a3b      	ldrb	r3, [r7, #8]
 8001c1e:	4413      	add	r3, r2
 8001c20:	b2da      	uxtb	r2, r3
 8001c22:	4b03      	ldr	r3, [pc, #12]	; (8001c30 <ssd1306_write_char+0xec>)
 8001c24:	701a      	strb	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8001c26:	79fb      	ldrb	r3, [r7, #7]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3720      	adds	r7, #32
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	200004ec 	.word	0x200004ec

08001c34 <ssd1306_write_string>:


// Write full string to screen buffer
char ssd1306_write_string(SSD1306_FONT font, char *str)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	f107 0308 	add.w	r3, r7, #8
 8001c3e:	e883 0003 	stmia.w	r3, {r0, r1}
 8001c42:	607a      	str	r2, [r7, #4]
    current_font = font;
 8001c44:	4b13      	ldr	r3, [pc, #76]	; (8001c94 <ssd1306_write_string+0x60>)
 8001c46:	461a      	mov	r2, r3
 8001c48:	f107 0308 	add.w	r3, r7, #8
 8001c4c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001c50:	e882 0003 	stmia.w	r2, {r0, r1}

    // Write until null-byte
    while(*str)
 8001c54:	e014      	b.n	8001c80 <ssd1306_write_string+0x4c>
    {
        if(ssd1306_write_char(font, *str) != *str)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	f107 0308 	add.w	r3, r7, #8
 8001c60:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001c64:	f7ff ff6e 	bl	8001b44 <ssd1306_write_char>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d002      	beq.n	8001c7a <ssd1306_write_string+0x46>
        {
            // Char could not be written
            return *str;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	e008      	b.n	8001c8c <ssd1306_write_string+0x58>
        }

        // Next char
        str++;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	607b      	str	r3, [r7, #4]
    while(*str)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d1e6      	bne.n	8001c56 <ssd1306_write_string+0x22>
    }

    // Everything ok
    return *str;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	781b      	ldrb	r3, [r3, #0]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3710      	adds	r7, #16
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	200004f0 	.word	0x200004f0

08001c98 <ssd1306_set_cursor>:

void ssd1306_set_cursor(uint8_t x, uint8_t y)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	460a      	mov	r2, r1
 8001ca2:	71fb      	strb	r3, [r7, #7]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	71bb      	strb	r3, [r7, #6]
    cursor.x = x;
 8001ca8:	4a05      	ldr	r2, [pc, #20]	; (8001cc0 <ssd1306_set_cursor+0x28>)
 8001caa:	79fb      	ldrb	r3, [r7, #7]
 8001cac:	7013      	strb	r3, [r2, #0]
    cursor.y = y;
 8001cae:	4a04      	ldr	r2, [pc, #16]	; (8001cc0 <ssd1306_set_cursor+0x28>)
 8001cb0:	79bb      	ldrb	r3, [r7, #6]
 8001cb2:	7053      	strb	r3, [r2, #1]
}
 8001cb4:	bf00      	nop
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	200004ec 	.word	0x200004ec

08001cc4 <ssd1306_enter>:

void ssd1306_enter()
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
    cursor.x = 0;
 8001cc8:	4b07      	ldr	r3, [pc, #28]	; (8001ce8 <ssd1306_enter+0x24>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	701a      	strb	r2, [r3, #0]
    cursor.y += current_font.height;
 8001cce:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <ssd1306_enter+0x24>)
 8001cd0:	785a      	ldrb	r2, [r3, #1]
 8001cd2:	4b06      	ldr	r3, [pc, #24]	; (8001cec <ssd1306_enter+0x28>)
 8001cd4:	785b      	ldrb	r3, [r3, #1]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	b2da      	uxtb	r2, r3
 8001cda:	4b03      	ldr	r3, [pc, #12]	; (8001ce8 <ssd1306_enter+0x24>)
 8001cdc:	705a      	strb	r2, [r3, #1]
}
 8001cde:	bf00      	nop
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	200004ec 	.word	0x200004ec
 8001cec:	200004f0 	.word	0x200004f0

08001cf0 <HAL_TIM_PeriodElapsedCallback>:
int workingInProgress = 0,dataPrepared = 0,currentPositionOfBuffer = 0;
int pressedButton = 0;
uint8_t buffer[20],receivedData[10];
ADC_ChannelConfTypeDef sConfig = {0};

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
//	HAL_UART_Transmit(&huart2, "Interrupted\n\r", 13, 100);
	if(htim->Instance == TIM3){
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a21      	ldr	r2, [pc, #132]	; (8001d84 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d12c      	bne.n	8001d5c <HAL_TIM_PeriodElapsedCallback+0x6c>
		if(!dataPrepared)
 8001d02:	4b21      	ldr	r3, [pc, #132]	; (8001d88 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d037      	beq.n	8001d7a <HAL_TIM_PeriodElapsedCallback+0x8a>
			return ;
		// Display the counter values via UART
		if(currentPositionOfBuffer == 12){
 8001d0a:	4b20      	ldr	r3, [pc, #128]	; (8001d8c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2b0c      	cmp	r3, #12
 8001d10:	d10c      	bne.n	8001d2c <HAL_TIM_PeriodElapsedCallback+0x3c>
			HAL_UART_Transmit(&huart2, "\n\r", 2, 100);
 8001d12:	2364      	movs	r3, #100	; 0x64
 8001d14:	2202      	movs	r2, #2
 8001d16:	491e      	ldr	r1, [pc, #120]	; (8001d90 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001d18:	481e      	ldr	r0, [pc, #120]	; (8001d94 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001d1a:	f003 fdf2 	bl	8005902 <HAL_UART_Transmit>
			dataPrepared = 0;
 8001d1e:	4b1a      	ldr	r3, [pc, #104]	; (8001d88 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
			workingInProgress = 0;
 8001d24:	4b1c      	ldr	r3, [pc, #112]	; (8001d98 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]
			return ;
 8001d2a:	e027      	b.n	8001d7c <HAL_TIM_PeriodElapsedCallback+0x8c>
		}
		HAL_UART_Transmit(&huart1, &buffer[currentPositionOfBuffer], 1, 10);
 8001d2c:	4b17      	ldr	r3, [pc, #92]	; (8001d8c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a1a      	ldr	r2, [pc, #104]	; (8001d9c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001d32:	1899      	adds	r1, r3, r2
 8001d34:	230a      	movs	r3, #10
 8001d36:	2201      	movs	r2, #1
 8001d38:	4819      	ldr	r0, [pc, #100]	; (8001da0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001d3a:	f003 fde2 	bl	8005902 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, &buffer[currentPositionOfBuffer], 1, 10);
 8001d3e:	4b13      	ldr	r3, [pc, #76]	; (8001d8c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a16      	ldr	r2, [pc, #88]	; (8001d9c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001d44:	1899      	adds	r1, r3, r2
 8001d46:	230a      	movs	r3, #10
 8001d48:	2201      	movs	r2, #1
 8001d4a:	4812      	ldr	r0, [pc, #72]	; (8001d94 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001d4c:	f003 fdd9 	bl	8005902 <HAL_UART_Transmit>
		currentPositionOfBuffer++;
 8001d50:	4b0e      	ldr	r3, [pc, #56]	; (8001d8c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	3301      	adds	r3, #1
 8001d56:	4a0d      	ldr	r2, [pc, #52]	; (8001d8c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001d58:	6013      	str	r3, [r2, #0]
 8001d5a:	e00f      	b.n	8001d7c <HAL_TIM_PeriodElapsedCallback+0x8c>
	}else if(htim->Instance == TIM2){
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d64:	d10a      	bne.n	8001d7c <HAL_TIM_PeriodElapsedCallback+0x8c>
		pressedButton = 1;
 8001d66:	4b0f      	ldr	r3, [pc, #60]	; (8001da4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001d68:	2201      	movs	r2, #1
 8001d6a:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, "Sending...\n\r", 12, 100);
 8001d6c:	2364      	movs	r3, #100	; 0x64
 8001d6e:	220c      	movs	r2, #12
 8001d70:	490d      	ldr	r1, [pc, #52]	; (8001da8 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001d72:	4808      	ldr	r0, [pc, #32]	; (8001d94 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001d74:	f003 fdc5 	bl	8005902 <HAL_UART_Transmit>
 8001d78:	e000      	b.n	8001d7c <HAL_TIM_PeriodElapsedCallback+0x8c>
			return ;
 8001d7a:	bf00      	nop
	}
}
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	40000400 	.word	0x40000400
 8001d88:	200006f8 	.word	0x200006f8
 8001d8c:	200006fc 	.word	0x200006fc
 8001d90:	080072b0 	.word	0x080072b0
 8001d94:	200006b0 	.word	0x200006b0
 8001d98:	200006f4 	.word	0x200006f4
 8001d9c:	20000704 	.word	0x20000704
 8001da0:	2000066c 	.word	0x2000066c
 8001da4:	20000700 	.word	0x20000700
 8001da8:	080072b4 	.word	0x080072b4

08001dac <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
	workingInProgress = 0;
 8001db4:	4b05      	ldr	r3, [pc, #20]	; (8001dcc <HAL_UART_RxCpltCallback+0x20>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart1, receivedData, 1);
 8001dba:	2201      	movs	r2, #1
 8001dbc:	4904      	ldr	r1, [pc, #16]	; (8001dd0 <HAL_UART_RxCpltCallback+0x24>)
 8001dbe:	4805      	ldr	r0, [pc, #20]	; (8001dd4 <HAL_UART_RxCpltCallback+0x28>)
 8001dc0:	f003 fe31 	bl	8005a26 <HAL_UART_Receive_IT>
}
 8001dc4:	bf00      	nop
 8001dc6:	3708      	adds	r7, #8
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	200006f4 	.word	0x200006f4
 8001dd0:	20000718 	.word	0x20000718
 8001dd4:	2000066c 	.word	0x2000066c

08001dd8 <tempRead>:

float tempRead(){
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
	DS18B20_ReadAll();
 8001dde:	f7ff f997 	bl	8001110 <DS18B20_ReadAll>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, 1);
 8001de2:	2201      	movs	r2, #1
 8001de4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001de8:	4814      	ldr	r0, [pc, #80]	; (8001e3c <tempRead+0x64>)
 8001dea:	f001 ff6b 	bl	8003cc4 <HAL_GPIO_WritePin>
	DS18B20_StartAll();
 8001dee:	f7ff f80f 	bl	8000e10 <DS18B20_StartAll>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, 0);
 8001df2:	2200      	movs	r2, #0
 8001df4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001df8:	4810      	ldr	r0, [pc, #64]	; (8001e3c <tempRead+0x64>)
 8001dfa:	f001 ff63 	bl	8003cc4 <HAL_GPIO_WritePin>
	uint8_t ROM_tmp[8];
	uint8_t i;
	float temperature;
	for(i=0;i<DS18B20_Quantity();i++){
 8001dfe:	2300      	movs	r3, #0
 8001e00:	73fb      	strb	r3, [r7, #15]
 8001e02:	e00f      	b.n	8001e24 <tempRead+0x4c>
		if(DS18B20_GetTemperature(i, &temperature)){
 8001e04:	463a      	mov	r2, r7
 8001e06:	7bfb      	ldrb	r3, [r7, #15]
 8001e08:	4611      	mov	r1, r2
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7ff f9cc 	bl	80011a8 <DS18B20_GetTemperature>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d003      	beq.n	8001e1e <tempRead+0x46>
			return temperature;
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	ee07 3a90 	vmov	s15, r3
 8001e1c:	e009      	b.n	8001e32 <tempRead+0x5a>
	for(i=0;i<DS18B20_Quantity();i++){
 8001e1e:	7bfb      	ldrb	r3, [r7, #15]
 8001e20:	3301      	adds	r3, #1
 8001e22:	73fb      	strb	r3, [r7, #15]
 8001e24:	f7ff f9b4 	bl	8001190 <DS18B20_Quantity>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	7bfb      	ldrb	r3, [r7, #15]
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d3e8      	bcc.n	8001e04 <tempRead+0x2c>
		}
	}
}
 8001e32:	eeb0 0a67 	vmov.f32	s0, s15
 8001e36:	3710      	adds	r7, #16
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40020800 	.word	0x40020800

08001e40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e40:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001e44:	b090      	sub	sp, #64	; 0x40
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e48:	f000 ffa8 	bl	8002d9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e4c:	f000 fa74 	bl	8002338 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e50:	f000 fcb2 	bl	80027b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001e54:	f000 fc86 	bl	8002764 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001e58:	f000 fad6 	bl	8002408 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001e5c:	f000 fbbc 	bl	80025d8 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001e60:	f000 fc56 	bl	8002710 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001e64:	f000 fb68 	bl	8002538 <MX_TIM1_Init>
  MX_I2C1_Init();
 8001e68:	f000 fb38 	bl	80024dc <MX_I2C1_Init>
  MX_TIM3_Init();
 8001e6c:	f000 fc02 	bl	8002674 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001e70:	485f      	ldr	r0, [pc, #380]	; (8001ff0 <main+0x1b0>)
 8001e72:	f003 f903 	bl	800507c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8001e76:	485f      	ldr	r0, [pc, #380]	; (8001ff4 <main+0x1b4>)
 8001e78:	f003 f900 	bl	800507c <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart1, receivedData, 1);
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	495e      	ldr	r1, [pc, #376]	; (8001ff8 <main+0x1b8>)
 8001e80:	485e      	ldr	r0, [pc, #376]	; (8001ffc <main+0x1bc>)
 8001e82:	f003 fdd0 	bl	8005a26 <HAL_UART_Receive_IT>

  DS18B20_Init(DS18B20_Resolution_12bits);
 8001e86:	200c      	movs	r0, #12
 8001e88:	f7ff f9b0 	bl	80011ec <DS18B20_Init>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, 0);
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e92:	485b      	ldr	r0, [pc, #364]	; (8002000 <main+0x1c0>)
 8001e94:	f001 ff16 	bl	8003cc4 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  ssd1306_init();
 8001e98:	f7ff fd8f 	bl	80019ba <ssd1306_init>

  ssd1306_write_string(font11x18, "");
 8001e9c:	4b59      	ldr	r3, [pc, #356]	; (8002004 <main+0x1c4>)
 8001e9e:	4a5a      	ldr	r2, [pc, #360]	; (8002008 <main+0x1c8>)
 8001ea0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001ea4:	f7ff fec6 	bl	8001c34 <ssd1306_write_string>
  ssd1306_enter();
 8001ea8:	f7ff ff0c 	bl	8001cc4 <ssd1306_enter>
  ssd1306_write_string(font11x18, "Hello World");
 8001eac:	4b55      	ldr	r3, [pc, #340]	; (8002004 <main+0x1c4>)
 8001eae:	4a57      	ldr	r2, [pc, #348]	; (800200c <main+0x1cc>)
 8001eb0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001eb4:	f7ff febe 	bl	8001c34 <ssd1306_write_string>
  ssd1306_enter();
 8001eb8:	f7ff ff04 	bl	8001cc4 <ssd1306_enter>


  ssd1306_update_screen();
 8001ebc:	f7ff fdaa 	bl	8001a14 <ssd1306_update_screen>

  sConfig.Channel = ADC_CHANNEL_0;
 8001ec0:	4b53      	ldr	r3, [pc, #332]	; (8002010 <main+0x1d0>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = 1;
 8001ec6:	4b52      	ldr	r3, [pc, #328]	; (8002010 <main+0x1d0>)
 8001ec8:	2201      	movs	r2, #1
 8001eca:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001ecc:	4b50      	ldr	r3, [pc, #320]	; (8002010 <main+0x1d0>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	609a      	str	r2, [r3, #8]
  int pressing = 0;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_UART_Transmit(&huart2, "Initialize successful\n\r", 23, HAL_MAX_DELAY);
 8001ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eda:	2217      	movs	r2, #23
 8001edc:	494d      	ldr	r1, [pc, #308]	; (8002014 <main+0x1d4>)
 8001ede:	484e      	ldr	r0, [pc, #312]	; (8002018 <main+0x1d8>)
 8001ee0:	f003 fd0f 	bl	8005902 <HAL_UART_Transmit>
  while (1)
  {
//	 int pressedButton = !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, !workingInProgress);
 8001ee4:	4b4d      	ldr	r3, [pc, #308]	; (800201c <main+0x1dc>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	bf0c      	ite	eq
 8001eec:	2301      	moveq	r3, #1
 8001eee:	2300      	movne	r3, #0
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	2120      	movs	r1, #32
 8001ef6:	484a      	ldr	r0, [pc, #296]	; (8002020 <main+0x1e0>)
 8001ef8:	f001 fee4 	bl	8003cc4 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, workingInProgress);
 8001efc:	4b47      	ldr	r3, [pc, #284]	; (800201c <main+0x1dc>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	461a      	mov	r2, r3
 8001f04:	2180      	movs	r1, #128	; 0x80
 8001f06:	4846      	ldr	r0, [pc, #280]	; (8002020 <main+0x1e0>)
 8001f08:	f001 fedc 	bl	8003cc4 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, workingInProgress);
 8001f0c:	4b43      	ldr	r3, [pc, #268]	; (800201c <main+0x1dc>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	461a      	mov	r2, r3
 8001f14:	2180      	movs	r1, #128	; 0x80
 8001f16:	483a      	ldr	r0, [pc, #232]	; (8002000 <main+0x1c0>)
 8001f18:	f001 fed4 	bl	8003cc4 <HAL_GPIO_WritePin>

	 if(pressedButton && !pressing && !workingInProgress){
 8001f1c:	4b41      	ldr	r3, [pc, #260]	; (8002024 <main+0x1e4>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	f000 81bf 	beq.w	80022a4 <main+0x464>
 8001f26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	f040 81bb 	bne.w	80022a4 <main+0x464>
 8001f2e:	4b3b      	ldr	r3, [pc, #236]	; (800201c <main+0x1dc>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f040 81b6 	bne.w	80022a4 <main+0x464>
		 pressedButton = 0;
 8001f38:	4b3a      	ldr	r3, [pc, #232]	; (8002024 <main+0x1e4>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	601a      	str	r2, [r3, #0]
		 pressing = 1;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	63fb      	str	r3, [r7, #60]	; 0x3c
		 workingInProgress = 1;
 8001f42:	4b36      	ldr	r3, [pc, #216]	; (800201c <main+0x1dc>)
 8001f44:	2201      	movs	r2, #1
 8001f46:	601a      	str	r2, [r3, #0]
		 dataPrepared = 0;
 8001f48:	4b37      	ldr	r3, [pc, #220]	; (8002028 <main+0x1e8>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	601a      	str	r2, [r3, #0]
		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001f4e:	2200      	movs	r2, #0
 8001f50:	2120      	movs	r1, #32
 8001f52:	4833      	ldr	r0, [pc, #204]	; (8002020 <main+0x1e0>)
 8001f54:	f001 feb6 	bl	8003cc4 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8001f58:	2201      	movs	r2, #1
 8001f5a:	2180      	movs	r1, #128	; 0x80
 8001f5c:	4830      	ldr	r0, [pc, #192]	; (8002020 <main+0x1e0>)
 8001f5e:	f001 feb1 	bl	8003cc4 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8001f62:	2201      	movs	r2, #1
 8001f64:	2180      	movs	r1, #128	; 0x80
 8001f66:	4826      	ldr	r0, [pc, #152]	; (8002000 <main+0x1c0>)
 8001f68:	f001 feac 	bl	8003cc4 <HAL_GPIO_WritePin>

		 ssd1306_black_screen();
 8001f6c:	f7ff fd7a 	bl	8001a64 <ssd1306_black_screen>
		 ssd1306_set_cursor(0, 0);
 8001f70:	2100      	movs	r1, #0
 8001f72:	2000      	movs	r0, #0
 8001f74:	f7ff fe90 	bl	8001c98 <ssd1306_set_cursor>
		 ssd1306_write_string(font11x18, "");
 8001f78:	4b22      	ldr	r3, [pc, #136]	; (8002004 <main+0x1c4>)
 8001f7a:	4a23      	ldr	r2, [pc, #140]	; (8002008 <main+0x1c8>)
 8001f7c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001f80:	f7ff fe58 	bl	8001c34 <ssd1306_write_string>
		 ssd1306_enter();
 8001f84:	f7ff fe9e 	bl	8001cc4 <ssd1306_enter>
		 ssd1306_write_string(font11x18, "Working...");
 8001f88:	4b1e      	ldr	r3, [pc, #120]	; (8002004 <main+0x1c4>)
 8001f8a:	4a28      	ldr	r2, [pc, #160]	; (800202c <main+0x1ec>)
 8001f8c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001f90:	f7ff fe50 	bl	8001c34 <ssd1306_write_string>
		 ssd1306_update_screen();
 8001f94:	f7ff fd3e 	bl	8001a14 <ssd1306_update_screen>

		 // get Value from thermo Sensor
		 int thermoAv = 0;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	62bb      	str	r3, [r7, #40]	; 0x28
		 float thermoSum = 0;
 8001f9c:	f04f 0300 	mov.w	r3, #0
 8001fa0:	63bb      	str	r3, [r7, #56]	; 0x38
		 for(int i=1;i<=100;i++){
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	637b      	str	r3, [r7, #52]	; 0x34
 8001fa6:	e00c      	b.n	8001fc2 <main+0x182>
			 thermoSum+=tempRead();
 8001fa8:	f7ff ff16 	bl	8001dd8 <tempRead>
 8001fac:	eeb0 7a40 	vmov.f32	s14, s0
 8001fb0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001fb4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001fb8:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		 for(int i=1;i<=100;i++){
 8001fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	637b      	str	r3, [r7, #52]	; 0x34
 8001fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fc4:	2b64      	cmp	r3, #100	; 0x64
 8001fc6:	ddef      	ble.n	8001fa8 <main+0x168>
		 }
		 thermoAv = thermoSum/10;
 8001fc8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001fcc:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001fd0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fd8:	ee17 3a90 	vmov	r3, s15
 8001fdc:	62bb      	str	r3, [r7, #40]	; 0x28

		 // get Value from TDS Sensor
		 int TDSav = 0;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	633b      	str	r3, [r7, #48]	; 0x30
		 sConfig.Channel = ADC_CHANNEL_0;
 8001fe2:	4b0b      	ldr	r3, [pc, #44]	; (8002010 <main+0x1d0>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]

		 for(int i=1;i<=100;i++){
 8001fe8:	2301      	movs	r3, #1
 8001fea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fec:	e03a      	b.n	8002064 <main+0x224>
 8001fee:	bf00      	nop
 8001ff0:	200005dc 	.word	0x200005dc
 8001ff4:	20000624 	.word	0x20000624
 8001ff8:	20000718 	.word	0x20000718
 8001ffc:	2000066c 	.word	0x2000066c
 8002000:	40020800 	.word	0x40020800
 8002004:	20000000 	.word	0x20000000
 8002008:	080072c4 	.word	0x080072c4
 800200c:	080072c8 	.word	0x080072c8
 8002010:	20000724 	.word	0x20000724
 8002014:	080072d4 	.word	0x080072d4
 8002018:	200006b0 	.word	0x200006b0
 800201c:	200006f4 	.word	0x200006f4
 8002020:	40020000 	.word	0x40020000
 8002024:	20000700 	.word	0x20000700
 8002028:	200006f8 	.word	0x200006f8
 800202c:	080072ec 	.word	0x080072ec
			 HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8002030:	49ab      	ldr	r1, [pc, #684]	; (80022e0 <main+0x4a0>)
 8002032:	48ac      	ldr	r0, [pc, #688]	; (80022e4 <main+0x4a4>)
 8002034:	f001 f8d8 	bl	80031e8 <HAL_ADC_ConfigChannel>
			 HAL_ADC_Start(&hadc1);
 8002038:	48aa      	ldr	r0, [pc, #680]	; (80022e4 <main+0x4a4>)
 800203a:	f000 ff89 	bl	8002f50 <HAL_ADC_Start>
			 int adcValue;
			 if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK){
 800203e:	2164      	movs	r1, #100	; 0x64
 8002040:	48a8      	ldr	r0, [pc, #672]	; (80022e4 <main+0x4a4>)
 8002042:	f001 f839 	bl	80030b8 <HAL_ADC_PollForConversion>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d108      	bne.n	800205e <main+0x21e>
				adcValue = HAL_ADC_GetValue(&hadc1);
 800204c:	48a5      	ldr	r0, [pc, #660]	; (80022e4 <main+0x4a4>)
 800204e:	f001 f8be 	bl	80031ce <HAL_ADC_GetValue>
 8002052:	4603      	mov	r3, r0
 8002054:	613b      	str	r3, [r7, #16]
				TDSav+=adcValue;
 8002056:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	4413      	add	r3, r2
 800205c:	633b      	str	r3, [r7, #48]	; 0x30
		 for(int i=1;i<=100;i++){
 800205e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002060:	3301      	adds	r3, #1
 8002062:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002066:	2b64      	cmp	r3, #100	; 0x64
 8002068:	dde2      	ble.n	8002030 <main+0x1f0>
			 }
		 }
		 TDSav = TDSav/100;
 800206a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800206c:	4a9e      	ldr	r2, [pc, #632]	; (80022e8 <main+0x4a8>)
 800206e:	fb82 1203 	smull	r1, r2, r2, r3
 8002072:	1152      	asrs	r2, r2, #5
 8002074:	17db      	asrs	r3, r3, #31
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	633b      	str	r3, [r7, #48]	; 0x30
		 float averageVoltage = (TDSav * 5.0) / 1024;
 800207a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800207c:	f7fe fa52 	bl	8000524 <__aeabi_i2d>
 8002080:	f04f 0200 	mov.w	r2, #0
 8002084:	4b99      	ldr	r3, [pc, #612]	; (80022ec <main+0x4ac>)
 8002086:	f7fe fab7 	bl	80005f8 <__aeabi_dmul>
 800208a:	4602      	mov	r2, r0
 800208c:	460b      	mov	r3, r1
 800208e:	4610      	mov	r0, r2
 8002090:	4619      	mov	r1, r3
 8002092:	f04f 0200 	mov.w	r2, #0
 8002096:	4b96      	ldr	r3, [pc, #600]	; (80022f0 <main+0x4b0>)
 8002098:	f7fe fbd8 	bl	800084c <__aeabi_ddiv>
 800209c:	4602      	mov	r2, r0
 800209e:	460b      	mov	r3, r1
 80020a0:	4610      	mov	r0, r2
 80020a2:	4619      	mov	r1, r3
 80020a4:	f7fe fce2 	bl	8000a6c <__aeabi_d2f>
 80020a8:	4603      	mov	r3, r0
 80020aa:	627b      	str	r3, [r7, #36]	; 0x24
		 float compensationCoefficient=1.0+0.02*(thermoAv-25.0);    //temperature compensation formula: fFinalResult(25^C) = fFinalResult(current)/(1.0+0.02*(fTP-25.0));
 80020ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80020ae:	f7fe fa39 	bl	8000524 <__aeabi_i2d>
 80020b2:	f04f 0200 	mov.w	r2, #0
 80020b6:	4b8f      	ldr	r3, [pc, #572]	; (80022f4 <main+0x4b4>)
 80020b8:	f7fe f8e6 	bl	8000288 <__aeabi_dsub>
 80020bc:	4602      	mov	r2, r0
 80020be:	460b      	mov	r3, r1
 80020c0:	4610      	mov	r0, r2
 80020c2:	4619      	mov	r1, r3
 80020c4:	a37e      	add	r3, pc, #504	; (adr r3, 80022c0 <main+0x480>)
 80020c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ca:	f7fe fa95 	bl	80005f8 <__aeabi_dmul>
 80020ce:	4602      	mov	r2, r0
 80020d0:	460b      	mov	r3, r1
 80020d2:	4610      	mov	r0, r2
 80020d4:	4619      	mov	r1, r3
 80020d6:	f04f 0200 	mov.w	r2, #0
 80020da:	4b87      	ldr	r3, [pc, #540]	; (80022f8 <main+0x4b8>)
 80020dc:	f7fe f8d6 	bl	800028c <__adddf3>
 80020e0:	4602      	mov	r2, r0
 80020e2:	460b      	mov	r3, r1
 80020e4:	4610      	mov	r0, r2
 80020e6:	4619      	mov	r1, r3
 80020e8:	f7fe fcc0 	bl	8000a6c <__aeabi_d2f>
 80020ec:	4603      	mov	r3, r0
 80020ee:	623b      	str	r3, [r7, #32]
		 float compensationVolatge=averageVoltage/compensationCoefficient;  //temperature compensation
 80020f0:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80020f4:	ed97 7a08 	vldr	s14, [r7, #32]
 80020f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020fc:	edc7 7a07 	vstr	s15, [r7, #28]
		 int tdsValue = (133.42*compensationVolatge*compensationVolatge*compensationVolatge - 255.86*compensationVolatge*compensationVolatge + 857.39*compensationVolatge)*0.5; //convert voltage value to tds value
 8002100:	69f8      	ldr	r0, [r7, #28]
 8002102:	f7fe fa21 	bl	8000548 <__aeabi_f2d>
 8002106:	a370      	add	r3, pc, #448	; (adr r3, 80022c8 <main+0x488>)
 8002108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800210c:	f7fe fa74 	bl	80005f8 <__aeabi_dmul>
 8002110:	4602      	mov	r2, r0
 8002112:	460b      	mov	r3, r1
 8002114:	4614      	mov	r4, r2
 8002116:	461d      	mov	r5, r3
 8002118:	69f8      	ldr	r0, [r7, #28]
 800211a:	f7fe fa15 	bl	8000548 <__aeabi_f2d>
 800211e:	4602      	mov	r2, r0
 8002120:	460b      	mov	r3, r1
 8002122:	4620      	mov	r0, r4
 8002124:	4629      	mov	r1, r5
 8002126:	f7fe fa67 	bl	80005f8 <__aeabi_dmul>
 800212a:	4602      	mov	r2, r0
 800212c:	460b      	mov	r3, r1
 800212e:	4614      	mov	r4, r2
 8002130:	461d      	mov	r5, r3
 8002132:	69f8      	ldr	r0, [r7, #28]
 8002134:	f7fe fa08 	bl	8000548 <__aeabi_f2d>
 8002138:	4602      	mov	r2, r0
 800213a:	460b      	mov	r3, r1
 800213c:	4620      	mov	r0, r4
 800213e:	4629      	mov	r1, r5
 8002140:	f7fe fa5a 	bl	80005f8 <__aeabi_dmul>
 8002144:	4602      	mov	r2, r0
 8002146:	460b      	mov	r3, r1
 8002148:	4614      	mov	r4, r2
 800214a:	461d      	mov	r5, r3
 800214c:	69f8      	ldr	r0, [r7, #28]
 800214e:	f7fe f9fb 	bl	8000548 <__aeabi_f2d>
 8002152:	a35f      	add	r3, pc, #380	; (adr r3, 80022d0 <main+0x490>)
 8002154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002158:	f7fe fa4e 	bl	80005f8 <__aeabi_dmul>
 800215c:	4602      	mov	r2, r0
 800215e:	460b      	mov	r3, r1
 8002160:	4690      	mov	r8, r2
 8002162:	4699      	mov	r9, r3
 8002164:	69f8      	ldr	r0, [r7, #28]
 8002166:	f7fe f9ef 	bl	8000548 <__aeabi_f2d>
 800216a:	4602      	mov	r2, r0
 800216c:	460b      	mov	r3, r1
 800216e:	4640      	mov	r0, r8
 8002170:	4649      	mov	r1, r9
 8002172:	f7fe fa41 	bl	80005f8 <__aeabi_dmul>
 8002176:	4602      	mov	r2, r0
 8002178:	460b      	mov	r3, r1
 800217a:	4620      	mov	r0, r4
 800217c:	4629      	mov	r1, r5
 800217e:	f7fe f883 	bl	8000288 <__aeabi_dsub>
 8002182:	4602      	mov	r2, r0
 8002184:	460b      	mov	r3, r1
 8002186:	4614      	mov	r4, r2
 8002188:	461d      	mov	r5, r3
 800218a:	69f8      	ldr	r0, [r7, #28]
 800218c:	f7fe f9dc 	bl	8000548 <__aeabi_f2d>
 8002190:	a351      	add	r3, pc, #324	; (adr r3, 80022d8 <main+0x498>)
 8002192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002196:	f7fe fa2f 	bl	80005f8 <__aeabi_dmul>
 800219a:	4602      	mov	r2, r0
 800219c:	460b      	mov	r3, r1
 800219e:	4620      	mov	r0, r4
 80021a0:	4629      	mov	r1, r5
 80021a2:	f7fe f873 	bl	800028c <__adddf3>
 80021a6:	4602      	mov	r2, r0
 80021a8:	460b      	mov	r3, r1
 80021aa:	4610      	mov	r0, r2
 80021ac:	4619      	mov	r1, r3
 80021ae:	f04f 0200 	mov.w	r2, #0
 80021b2:	4b52      	ldr	r3, [pc, #328]	; (80022fc <main+0x4bc>)
 80021b4:	f7fe fa20 	bl	80005f8 <__aeabi_dmul>
 80021b8:	4602      	mov	r2, r0
 80021ba:	460b      	mov	r3, r1
 80021bc:	4610      	mov	r0, r2
 80021be:	4619      	mov	r1, r3
 80021c0:	f7fe fc2c 	bl	8000a1c <__aeabi_d2iz>
 80021c4:	4603      	mov	r3, r0
 80021c6:	61bb      	str	r3, [r7, #24]


		 // get Value from Water Sensor
		 int O2av = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) | 1;
 80021c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021cc:	484c      	ldr	r0, [pc, #304]	; (8002300 <main+0x4c0>)
 80021ce:	f001 fd61 	bl	8003c94 <HAL_GPIO_ReadPin>
 80021d2:	4603      	mov	r3, r0
 80021d4:	f043 0301 	orr.w	r3, r3, #1
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	617b      	str	r3, [r7, #20]

		 // Convert Int to String
		 sprintf(buffer, "%04d", tdsValue);
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	4949      	ldr	r1, [pc, #292]	; (8002304 <main+0x4c4>)
 80021e0:	4849      	ldr	r0, [pc, #292]	; (8002308 <main+0x4c8>)
 80021e2:	f004 fbeb 	bl	80069bc <siprintf>
		 sprintf(buffer+4, "%04d", thermoAv);
 80021e6:	4b49      	ldr	r3, [pc, #292]	; (800230c <main+0x4cc>)
 80021e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021ea:	4946      	ldr	r1, [pc, #280]	; (8002304 <main+0x4c4>)
 80021ec:	4618      	mov	r0, r3
 80021ee:	f004 fbe5 	bl	80069bc <siprintf>
		 sprintf(buffer+8, "%04d", O2av);
 80021f2:	4b47      	ldr	r3, [pc, #284]	; (8002310 <main+0x4d0>)
 80021f4:	697a      	ldr	r2, [r7, #20]
 80021f6:	4943      	ldr	r1, [pc, #268]	; (8002304 <main+0x4c4>)
 80021f8:	4618      	mov	r0, r3
 80021fa:	f004 fbdf 	bl	80069bc <siprintf>
		 buffer[0] = 'A';
 80021fe:	4b42      	ldr	r3, [pc, #264]	; (8002308 <main+0x4c8>)
 8002200:	2241      	movs	r2, #65	; 0x41
 8002202:	701a      	strb	r2, [r3, #0]
		 buffer[4] = 'B';
 8002204:	4b40      	ldr	r3, [pc, #256]	; (8002308 <main+0x4c8>)
 8002206:	2242      	movs	r2, #66	; 0x42
 8002208:	711a      	strb	r2, [r3, #4]
		 buffer[8] = 'C';
 800220a:	4b3f      	ldr	r3, [pc, #252]	; (8002308 <main+0x4c8>)
 800220c:	2243      	movs	r2, #67	; 0x43
 800220e:	721a      	strb	r2, [r3, #8]
		 buffer[12] = '\0';
 8002210:	4b3d      	ldr	r3, [pc, #244]	; (8002308 <main+0x4c8>)
 8002212:	2200      	movs	r2, #0
 8002214:	731a      	strb	r2, [r3, #12]

		 currentPositionOfBuffer = 0;
 8002216:	4b3f      	ldr	r3, [pc, #252]	; (8002314 <main+0x4d4>)
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]
		 dataPrepared = 1;
 800221c:	4b3e      	ldr	r3, [pc, #248]	; (8002318 <main+0x4d8>)
 800221e:	2201      	movs	r2, #1
 8002220:	601a      	str	r2, [r3, #0]

		 ssd1306_black_screen();
 8002222:	f7ff fc1f 	bl	8001a64 <ssd1306_black_screen>
		 ssd1306_set_cursor(0, 0);
 8002226:	2100      	movs	r1, #0
 8002228:	2000      	movs	r0, #0
 800222a:	f7ff fd35 	bl	8001c98 <ssd1306_set_cursor>
		 char scrBuffer[15];
		 sprintf(scrBuffer, "TDS: %dppm",tdsValue);
 800222e:	463b      	mov	r3, r7
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	493a      	ldr	r1, [pc, #232]	; (800231c <main+0x4dc>)
 8002234:	4618      	mov	r0, r3
 8002236:	f004 fbc1 	bl	80069bc <siprintf>
		 ssd1306_write_string(font11x18, scrBuffer);
 800223a:	463b      	mov	r3, r7
 800223c:	4938      	ldr	r1, [pc, #224]	; (8002320 <main+0x4e0>)
 800223e:	461a      	mov	r2, r3
 8002240:	c903      	ldmia	r1, {r0, r1}
 8002242:	f7ff fcf7 	bl	8001c34 <ssd1306_write_string>
		 ssd1306_enter();
 8002246:	f7ff fd3d 	bl	8001cc4 <ssd1306_enter>
		 sprintf(scrBuffer, "Temp: %d C",thermoAv/10);
 800224a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800224c:	4a35      	ldr	r2, [pc, #212]	; (8002324 <main+0x4e4>)
 800224e:	fb82 1203 	smull	r1, r2, r2, r3
 8002252:	1092      	asrs	r2, r2, #2
 8002254:	17db      	asrs	r3, r3, #31
 8002256:	1ad2      	subs	r2, r2, r3
 8002258:	463b      	mov	r3, r7
 800225a:	4933      	ldr	r1, [pc, #204]	; (8002328 <main+0x4e8>)
 800225c:	4618      	mov	r0, r3
 800225e:	f004 fbad 	bl	80069bc <siprintf>
		 ssd1306_write_string(font11x18, scrBuffer);
 8002262:	463b      	mov	r3, r7
 8002264:	492e      	ldr	r1, [pc, #184]	; (8002320 <main+0x4e0>)
 8002266:	461a      	mov	r2, r3
 8002268:	c903      	ldmia	r1, {r0, r1}
 800226a:	f7ff fce3 	bl	8001c34 <ssd1306_write_string>
		 ssd1306_enter();
 800226e:	f7ff fd29 	bl	8001cc4 <ssd1306_enter>
		 if(O2av)
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d005      	beq.n	8002284 <main+0x444>
			 sprintf(scrBuffer, "Water: YES");
 8002278:	463b      	mov	r3, r7
 800227a:	492c      	ldr	r1, [pc, #176]	; (800232c <main+0x4ec>)
 800227c:	4618      	mov	r0, r3
 800227e:	f004 fb9d 	bl	80069bc <siprintf>
 8002282:	e004      	b.n	800228e <main+0x44e>
		 else
			 sprintf(scrBuffer, "Water: NO");
 8002284:	463b      	mov	r3, r7
 8002286:	492a      	ldr	r1, [pc, #168]	; (8002330 <main+0x4f0>)
 8002288:	4618      	mov	r0, r3
 800228a:	f004 fb97 	bl	80069bc <siprintf>
		 ssd1306_write_string(font11x18, scrBuffer);
 800228e:	463b      	mov	r3, r7
 8002290:	4923      	ldr	r1, [pc, #140]	; (8002320 <main+0x4e0>)
 8002292:	461a      	mov	r2, r3
 8002294:	c903      	ldmia	r1, {r0, r1}
 8002296:	f7ff fccd 	bl	8001c34 <ssd1306_write_string>
		 ssd1306_enter();
 800229a:	f7ff fd13 	bl	8001cc4 <ssd1306_enter>
		 ssd1306_update_screen();
 800229e:	f7ff fbb9 	bl	8001a14 <ssd1306_update_screen>
	 if(pressedButton && !pressing && !workingInProgress){
 80022a2:	e00a      	b.n	80022ba <main+0x47a>
	 }else if(!pressedButton && pressing){
 80022a4:	4b23      	ldr	r3, [pc, #140]	; (8002334 <main+0x4f4>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	f47f ae1b 	bne.w	8001ee4 <main+0xa4>
 80022ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	f43f ae17 	beq.w	8001ee4 <main+0xa4>
		 pressing = 0;
 80022b6:	2300      	movs	r3, #0
 80022b8:	63fb      	str	r3, [r7, #60]	; 0x3c
	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, !workingInProgress);
 80022ba:	e613      	b.n	8001ee4 <main+0xa4>
 80022bc:	f3af 8000 	nop.w
 80022c0:	47ae147b 	.word	0x47ae147b
 80022c4:	3f947ae1 	.word	0x3f947ae1
 80022c8:	a3d70a3d 	.word	0xa3d70a3d
 80022cc:	4060ad70 	.word	0x4060ad70
 80022d0:	1eb851ec 	.word	0x1eb851ec
 80022d4:	406ffb85 	.word	0x406ffb85
 80022d8:	b851eb85 	.word	0xb851eb85
 80022dc:	408acb1e 	.word	0x408acb1e
 80022e0:	20000724 	.word	0x20000724
 80022e4:	200004f8 	.word	0x200004f8
 80022e8:	51eb851f 	.word	0x51eb851f
 80022ec:	40140000 	.word	0x40140000
 80022f0:	40900000 	.word	0x40900000
 80022f4:	40390000 	.word	0x40390000
 80022f8:	3ff00000 	.word	0x3ff00000
 80022fc:	3fe00000 	.word	0x3fe00000
 8002300:	40020800 	.word	0x40020800
 8002304:	080072f8 	.word	0x080072f8
 8002308:	20000704 	.word	0x20000704
 800230c:	20000708 	.word	0x20000708
 8002310:	2000070c 	.word	0x2000070c
 8002314:	200006fc 	.word	0x200006fc
 8002318:	200006f8 	.word	0x200006f8
 800231c:	08007300 	.word	0x08007300
 8002320:	20000000 	.word	0x20000000
 8002324:	66666667 	.word	0x66666667
 8002328:	0800730c 	.word	0x0800730c
 800232c:	08007318 	.word	0x08007318
 8002330:	08007324 	.word	0x08007324
 8002334:	20000700 	.word	0x20000700

08002338 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b094      	sub	sp, #80	; 0x50
 800233c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800233e:	f107 0320 	add.w	r3, r7, #32
 8002342:	2230      	movs	r2, #48	; 0x30
 8002344:	2100      	movs	r1, #0
 8002346:	4618      	mov	r0, r3
 8002348:	f004 fb30 	bl	80069ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800234c:	f107 030c 	add.w	r3, r7, #12
 8002350:	2200      	movs	r2, #0
 8002352:	601a      	str	r2, [r3, #0]
 8002354:	605a      	str	r2, [r3, #4]
 8002356:	609a      	str	r2, [r3, #8]
 8002358:	60da      	str	r2, [r3, #12]
 800235a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800235c:	2300      	movs	r3, #0
 800235e:	60bb      	str	r3, [r7, #8]
 8002360:	4b27      	ldr	r3, [pc, #156]	; (8002400 <SystemClock_Config+0xc8>)
 8002362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002364:	4a26      	ldr	r2, [pc, #152]	; (8002400 <SystemClock_Config+0xc8>)
 8002366:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800236a:	6413      	str	r3, [r2, #64]	; 0x40
 800236c:	4b24      	ldr	r3, [pc, #144]	; (8002400 <SystemClock_Config+0xc8>)
 800236e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002370:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002374:	60bb      	str	r3, [r7, #8]
 8002376:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002378:	2300      	movs	r3, #0
 800237a:	607b      	str	r3, [r7, #4]
 800237c:	4b21      	ldr	r3, [pc, #132]	; (8002404 <SystemClock_Config+0xcc>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a20      	ldr	r2, [pc, #128]	; (8002404 <SystemClock_Config+0xcc>)
 8002382:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002386:	6013      	str	r3, [r2, #0]
 8002388:	4b1e      	ldr	r3, [pc, #120]	; (8002404 <SystemClock_Config+0xcc>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002390:	607b      	str	r3, [r7, #4]
 8002392:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002394:	2302      	movs	r3, #2
 8002396:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002398:	2301      	movs	r3, #1
 800239a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800239c:	2310      	movs	r3, #16
 800239e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023a0:	2302      	movs	r3, #2
 80023a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80023a4:	2300      	movs	r3, #0
 80023a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80023a8:	2308      	movs	r3, #8
 80023aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80023ac:	2364      	movs	r3, #100	; 0x64
 80023ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80023b0:	2302      	movs	r3, #2
 80023b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80023b4:	2304      	movs	r3, #4
 80023b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023b8:	f107 0320 	add.w	r3, r7, #32
 80023bc:	4618      	mov	r0, r3
 80023be:	f002 f91b 	bl	80045f8 <HAL_RCC_OscConfig>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80023c8:	f000 fa8e 	bl	80028e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023cc:	230f      	movs	r3, #15
 80023ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023d0:	2302      	movs	r3, #2
 80023d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023d4:	2300      	movs	r3, #0
 80023d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80023d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023de:	2300      	movs	r3, #0
 80023e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80023e2:	f107 030c 	add.w	r3, r7, #12
 80023e6:	2103      	movs	r1, #3
 80023e8:	4618      	mov	r0, r3
 80023ea:	f002 fb7d 	bl	8004ae8 <HAL_RCC_ClockConfig>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80023f4:	f000 fa78 	bl	80028e8 <Error_Handler>
  }
}
 80023f8:	bf00      	nop
 80023fa:	3750      	adds	r7, #80	; 0x50
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	40023800 	.word	0x40023800
 8002404:	40007000 	.word	0x40007000

08002408 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800240e:	463b      	mov	r3, r7
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	605a      	str	r2, [r3, #4]
 8002416:	609a      	str	r2, [r3, #8]
 8002418:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800241a:	4b2d      	ldr	r3, [pc, #180]	; (80024d0 <MX_ADC1_Init+0xc8>)
 800241c:	4a2d      	ldr	r2, [pc, #180]	; (80024d4 <MX_ADC1_Init+0xcc>)
 800241e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002420:	4b2b      	ldr	r3, [pc, #172]	; (80024d0 <MX_ADC1_Init+0xc8>)
 8002422:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002426:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002428:	4b29      	ldr	r3, [pc, #164]	; (80024d0 <MX_ADC1_Init+0xc8>)
 800242a:	2200      	movs	r2, #0
 800242c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800242e:	4b28      	ldr	r3, [pc, #160]	; (80024d0 <MX_ADC1_Init+0xc8>)
 8002430:	2201      	movs	r2, #1
 8002432:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002434:	4b26      	ldr	r3, [pc, #152]	; (80024d0 <MX_ADC1_Init+0xc8>)
 8002436:	2200      	movs	r2, #0
 8002438:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800243a:	4b25      	ldr	r3, [pc, #148]	; (80024d0 <MX_ADC1_Init+0xc8>)
 800243c:	2200      	movs	r2, #0
 800243e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002442:	4b23      	ldr	r3, [pc, #140]	; (80024d0 <MX_ADC1_Init+0xc8>)
 8002444:	2200      	movs	r2, #0
 8002446:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002448:	4b21      	ldr	r3, [pc, #132]	; (80024d0 <MX_ADC1_Init+0xc8>)
 800244a:	4a23      	ldr	r2, [pc, #140]	; (80024d8 <MX_ADC1_Init+0xd0>)
 800244c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800244e:	4b20      	ldr	r3, [pc, #128]	; (80024d0 <MX_ADC1_Init+0xc8>)
 8002450:	2200      	movs	r2, #0
 8002452:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8002454:	4b1e      	ldr	r3, [pc, #120]	; (80024d0 <MX_ADC1_Init+0xc8>)
 8002456:	2203      	movs	r2, #3
 8002458:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800245a:	4b1d      	ldr	r3, [pc, #116]	; (80024d0 <MX_ADC1_Init+0xc8>)
 800245c:	2200      	movs	r2, #0
 800245e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002462:	4b1b      	ldr	r3, [pc, #108]	; (80024d0 <MX_ADC1_Init+0xc8>)
 8002464:	2201      	movs	r2, #1
 8002466:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002468:	4819      	ldr	r0, [pc, #100]	; (80024d0 <MX_ADC1_Init+0xc8>)
 800246a:	f000 fd2d 	bl	8002ec8 <HAL_ADC_Init>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002474:	f000 fa38 	bl	80028e8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002478:	2300      	movs	r3, #0
 800247a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800247c:	2301      	movs	r3, #1
 800247e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002480:	2300      	movs	r3, #0
 8002482:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002484:	463b      	mov	r3, r7
 8002486:	4619      	mov	r1, r3
 8002488:	4811      	ldr	r0, [pc, #68]	; (80024d0 <MX_ADC1_Init+0xc8>)
 800248a:	f000 fead 	bl	80031e8 <HAL_ADC_ConfigChannel>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002494:	f000 fa28 	bl	80028e8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 8002498:	2302      	movs	r3, #2
 800249a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800249c:	463b      	mov	r3, r7
 800249e:	4619      	mov	r1, r3
 80024a0:	480b      	ldr	r0, [pc, #44]	; (80024d0 <MX_ADC1_Init+0xc8>)
 80024a2:	f000 fea1 	bl	80031e8 <HAL_ADC_ConfigChannel>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 80024ac:	f000 fa1c 	bl	80028e8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 3;
 80024b0:	2303      	movs	r3, #3
 80024b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024b4:	463b      	mov	r3, r7
 80024b6:	4619      	mov	r1, r3
 80024b8:	4805      	ldr	r0, [pc, #20]	; (80024d0 <MX_ADC1_Init+0xc8>)
 80024ba:	f000 fe95 	bl	80031e8 <HAL_ADC_ConfigChannel>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 80024c4:	f000 fa10 	bl	80028e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80024c8:	bf00      	nop
 80024ca:	3710      	adds	r7, #16
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	200004f8 	.word	0x200004f8
 80024d4:	40012000 	.word	0x40012000
 80024d8:	0f000001 	.word	0x0f000001

080024dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80024e0:	4b12      	ldr	r3, [pc, #72]	; (800252c <MX_I2C1_Init+0x50>)
 80024e2:	4a13      	ldr	r2, [pc, #76]	; (8002530 <MX_I2C1_Init+0x54>)
 80024e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80024e6:	4b11      	ldr	r3, [pc, #68]	; (800252c <MX_I2C1_Init+0x50>)
 80024e8:	4a12      	ldr	r2, [pc, #72]	; (8002534 <MX_I2C1_Init+0x58>)
 80024ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80024ec:	4b0f      	ldr	r3, [pc, #60]	; (800252c <MX_I2C1_Init+0x50>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 2;
 80024f2:	4b0e      	ldr	r3, [pc, #56]	; (800252c <MX_I2C1_Init+0x50>)
 80024f4:	2202      	movs	r2, #2
 80024f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024f8:	4b0c      	ldr	r3, [pc, #48]	; (800252c <MX_I2C1_Init+0x50>)
 80024fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80024fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002500:	4b0a      	ldr	r3, [pc, #40]	; (800252c <MX_I2C1_Init+0x50>)
 8002502:	2200      	movs	r2, #0
 8002504:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002506:	4b09      	ldr	r3, [pc, #36]	; (800252c <MX_I2C1_Init+0x50>)
 8002508:	2200      	movs	r2, #0
 800250a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800250c:	4b07      	ldr	r3, [pc, #28]	; (800252c <MX_I2C1_Init+0x50>)
 800250e:	2200      	movs	r2, #0
 8002510:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002512:	4b06      	ldr	r3, [pc, #24]	; (800252c <MX_I2C1_Init+0x50>)
 8002514:	2200      	movs	r2, #0
 8002516:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002518:	4804      	ldr	r0, [pc, #16]	; (800252c <MX_I2C1_Init+0x50>)
 800251a:	f001 fc11 	bl	8003d40 <HAL_I2C_Init>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002524:	f000 f9e0 	bl	80028e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002528:	bf00      	nop
 800252a:	bd80      	pop	{r7, pc}
 800252c:	20000540 	.word	0x20000540
 8002530:	40005400 	.word	0x40005400
 8002534:	000186a0 	.word	0x000186a0

08002538 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b086      	sub	sp, #24
 800253c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800253e:	f107 0308 	add.w	r3, r7, #8
 8002542:	2200      	movs	r2, #0
 8002544:	601a      	str	r2, [r3, #0]
 8002546:	605a      	str	r2, [r3, #4]
 8002548:	609a      	str	r2, [r3, #8]
 800254a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800254c:	463b      	mov	r3, r7
 800254e:	2200      	movs	r2, #0
 8002550:	601a      	str	r2, [r3, #0]
 8002552:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002554:	4b1e      	ldr	r3, [pc, #120]	; (80025d0 <MX_TIM1_Init+0x98>)
 8002556:	4a1f      	ldr	r2, [pc, #124]	; (80025d4 <MX_TIM1_Init+0x9c>)
 8002558:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63;
 800255a:	4b1d      	ldr	r3, [pc, #116]	; (80025d0 <MX_TIM1_Init+0x98>)
 800255c:	223f      	movs	r2, #63	; 0x3f
 800255e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002560:	4b1b      	ldr	r3, [pc, #108]	; (80025d0 <MX_TIM1_Init+0x98>)
 8002562:	2200      	movs	r2, #0
 8002564:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002566:	4b1a      	ldr	r3, [pc, #104]	; (80025d0 <MX_TIM1_Init+0x98>)
 8002568:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800256c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800256e:	4b18      	ldr	r3, [pc, #96]	; (80025d0 <MX_TIM1_Init+0x98>)
 8002570:	2200      	movs	r2, #0
 8002572:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002574:	4b16      	ldr	r3, [pc, #88]	; (80025d0 <MX_TIM1_Init+0x98>)
 8002576:	2200      	movs	r2, #0
 8002578:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800257a:	4b15      	ldr	r3, [pc, #84]	; (80025d0 <MX_TIM1_Init+0x98>)
 800257c:	2200      	movs	r2, #0
 800257e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002580:	4813      	ldr	r0, [pc, #76]	; (80025d0 <MX_TIM1_Init+0x98>)
 8002582:	f002 fcd1 	bl	8004f28 <HAL_TIM_Base_Init>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800258c:	f000 f9ac 	bl	80028e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002590:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002594:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002596:	f107 0308 	add.w	r3, r7, #8
 800259a:	4619      	mov	r1, r3
 800259c:	480c      	ldr	r0, [pc, #48]	; (80025d0 <MX_TIM1_Init+0x98>)
 800259e:	f002 fed7 	bl	8005350 <HAL_TIM_ConfigClockSource>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80025a8:	f000 f99e 	bl	80028e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025ac:	2300      	movs	r3, #0
 80025ae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025b0:	2300      	movs	r3, #0
 80025b2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80025b4:	463b      	mov	r3, r7
 80025b6:	4619      	mov	r1, r3
 80025b8:	4805      	ldr	r0, [pc, #20]	; (80025d0 <MX_TIM1_Init+0x98>)
 80025ba:	f003 f8d3 	bl	8005764 <HAL_TIMEx_MasterConfigSynchronization>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80025c4:	f000 f990 	bl	80028e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80025c8:	bf00      	nop
 80025ca:	3718      	adds	r7, #24
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	20000594 	.word	0x20000594
 80025d4:	40010000 	.word	0x40010000

080025d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025de:	f107 0308 	add.w	r3, r7, #8
 80025e2:	2200      	movs	r2, #0
 80025e4:	601a      	str	r2, [r3, #0]
 80025e6:	605a      	str	r2, [r3, #4]
 80025e8:	609a      	str	r2, [r3, #8]
 80025ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025ec:	463b      	mov	r3, r7
 80025ee:	2200      	movs	r2, #0
 80025f0:	601a      	str	r2, [r3, #0]
 80025f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80025f4:	4b1d      	ldr	r3, [pc, #116]	; (800266c <MX_TIM2_Init+0x94>)
 80025f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80025fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100;
 80025fc:	4b1b      	ldr	r3, [pc, #108]	; (800266c <MX_TIM2_Init+0x94>)
 80025fe:	2264      	movs	r2, #100	; 0x64
 8002600:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002602:	4b1a      	ldr	r3, [pc, #104]	; (800266c <MX_TIM2_Init+0x94>)
 8002604:	2200      	movs	r2, #0
 8002606:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000000;
 8002608:	4b18      	ldr	r3, [pc, #96]	; (800266c <MX_TIM2_Init+0x94>)
 800260a:	4a19      	ldr	r2, [pc, #100]	; (8002670 <MX_TIM2_Init+0x98>)
 800260c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800260e:	4b17      	ldr	r3, [pc, #92]	; (800266c <MX_TIM2_Init+0x94>)
 8002610:	2200      	movs	r2, #0
 8002612:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002614:	4b15      	ldr	r3, [pc, #84]	; (800266c <MX_TIM2_Init+0x94>)
 8002616:	2200      	movs	r2, #0
 8002618:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800261a:	4814      	ldr	r0, [pc, #80]	; (800266c <MX_TIM2_Init+0x94>)
 800261c:	f002 fc84 	bl	8004f28 <HAL_TIM_Base_Init>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8002626:	f000 f95f 	bl	80028e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800262a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800262e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002630:	f107 0308 	add.w	r3, r7, #8
 8002634:	4619      	mov	r1, r3
 8002636:	480d      	ldr	r0, [pc, #52]	; (800266c <MX_TIM2_Init+0x94>)
 8002638:	f002 fe8a 	bl	8005350 <HAL_TIM_ConfigClockSource>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8002642:	f000 f951 	bl	80028e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002646:	2300      	movs	r3, #0
 8002648:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800264a:	2300      	movs	r3, #0
 800264c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800264e:	463b      	mov	r3, r7
 8002650:	4619      	mov	r1, r3
 8002652:	4806      	ldr	r0, [pc, #24]	; (800266c <MX_TIM2_Init+0x94>)
 8002654:	f003 f886 	bl	8005764 <HAL_TIMEx_MasterConfigSynchronization>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800265e:	f000 f943 	bl	80028e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002662:	bf00      	nop
 8002664:	3718      	adds	r7, #24
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	200005dc 	.word	0x200005dc
 8002670:	00989680 	.word	0x00989680

08002674 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800267a:	f107 0308 	add.w	r3, r7, #8
 800267e:	2200      	movs	r2, #0
 8002680:	601a      	str	r2, [r3, #0]
 8002682:	605a      	str	r2, [r3, #4]
 8002684:	609a      	str	r2, [r3, #8]
 8002686:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002688:	463b      	mov	r3, r7
 800268a:	2200      	movs	r2, #0
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002690:	4b1d      	ldr	r3, [pc, #116]	; (8002708 <MX_TIM3_Init+0x94>)
 8002692:	4a1e      	ldr	r2, [pc, #120]	; (800270c <MX_TIM3_Init+0x98>)
 8002694:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000;
 8002696:	4b1c      	ldr	r3, [pc, #112]	; (8002708 <MX_TIM3_Init+0x94>)
 8002698:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800269c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800269e:	4b1a      	ldr	r3, [pc, #104]	; (8002708 <MX_TIM3_Init+0x94>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 80026a4:	4b18      	ldr	r3, [pc, #96]	; (8002708 <MX_TIM3_Init+0x94>)
 80026a6:	f242 7210 	movw	r2, #10000	; 0x2710
 80026aa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026ac:	4b16      	ldr	r3, [pc, #88]	; (8002708 <MX_TIM3_Init+0x94>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026b2:	4b15      	ldr	r3, [pc, #84]	; (8002708 <MX_TIM3_Init+0x94>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80026b8:	4813      	ldr	r0, [pc, #76]	; (8002708 <MX_TIM3_Init+0x94>)
 80026ba:	f002 fc35 	bl	8004f28 <HAL_TIM_Base_Init>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80026c4:	f000 f910 	bl	80028e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80026ce:	f107 0308 	add.w	r3, r7, #8
 80026d2:	4619      	mov	r1, r3
 80026d4:	480c      	ldr	r0, [pc, #48]	; (8002708 <MX_TIM3_Init+0x94>)
 80026d6:	f002 fe3b 	bl	8005350 <HAL_TIM_ConfigClockSource>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80026e0:	f000 f902 	bl	80028e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026e4:	2300      	movs	r3, #0
 80026e6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026e8:	2300      	movs	r3, #0
 80026ea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80026ec:	463b      	mov	r3, r7
 80026ee:	4619      	mov	r1, r3
 80026f0:	4805      	ldr	r0, [pc, #20]	; (8002708 <MX_TIM3_Init+0x94>)
 80026f2:	f003 f837 	bl	8005764 <HAL_TIMEx_MasterConfigSynchronization>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80026fc:	f000 f8f4 	bl	80028e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002700:	bf00      	nop
 8002702:	3718      	adds	r7, #24
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	20000624 	.word	0x20000624
 800270c:	40000400 	.word	0x40000400

08002710 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002714:	4b11      	ldr	r3, [pc, #68]	; (800275c <MX_USART1_UART_Init+0x4c>)
 8002716:	4a12      	ldr	r2, [pc, #72]	; (8002760 <MX_USART1_UART_Init+0x50>)
 8002718:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800271a:	4b10      	ldr	r3, [pc, #64]	; (800275c <MX_USART1_UART_Init+0x4c>)
 800271c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002720:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002722:	4b0e      	ldr	r3, [pc, #56]	; (800275c <MX_USART1_UART_Init+0x4c>)
 8002724:	2200      	movs	r2, #0
 8002726:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002728:	4b0c      	ldr	r3, [pc, #48]	; (800275c <MX_USART1_UART_Init+0x4c>)
 800272a:	2200      	movs	r2, #0
 800272c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800272e:	4b0b      	ldr	r3, [pc, #44]	; (800275c <MX_USART1_UART_Init+0x4c>)
 8002730:	2200      	movs	r2, #0
 8002732:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002734:	4b09      	ldr	r3, [pc, #36]	; (800275c <MX_USART1_UART_Init+0x4c>)
 8002736:	220c      	movs	r2, #12
 8002738:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800273a:	4b08      	ldr	r3, [pc, #32]	; (800275c <MX_USART1_UART_Init+0x4c>)
 800273c:	2200      	movs	r2, #0
 800273e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002740:	4b06      	ldr	r3, [pc, #24]	; (800275c <MX_USART1_UART_Init+0x4c>)
 8002742:	2200      	movs	r2, #0
 8002744:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002746:	4805      	ldr	r0, [pc, #20]	; (800275c <MX_USART1_UART_Init+0x4c>)
 8002748:	f003 f88e 	bl	8005868 <HAL_UART_Init>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002752:	f000 f8c9 	bl	80028e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002756:	bf00      	nop
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	2000066c 	.word	0x2000066c
 8002760:	40011000 	.word	0x40011000

08002764 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002768:	4b11      	ldr	r3, [pc, #68]	; (80027b0 <MX_USART2_UART_Init+0x4c>)
 800276a:	4a12      	ldr	r2, [pc, #72]	; (80027b4 <MX_USART2_UART_Init+0x50>)
 800276c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800276e:	4b10      	ldr	r3, [pc, #64]	; (80027b0 <MX_USART2_UART_Init+0x4c>)
 8002770:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002774:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002776:	4b0e      	ldr	r3, [pc, #56]	; (80027b0 <MX_USART2_UART_Init+0x4c>)
 8002778:	2200      	movs	r2, #0
 800277a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800277c:	4b0c      	ldr	r3, [pc, #48]	; (80027b0 <MX_USART2_UART_Init+0x4c>)
 800277e:	2200      	movs	r2, #0
 8002780:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002782:	4b0b      	ldr	r3, [pc, #44]	; (80027b0 <MX_USART2_UART_Init+0x4c>)
 8002784:	2200      	movs	r2, #0
 8002786:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002788:	4b09      	ldr	r3, [pc, #36]	; (80027b0 <MX_USART2_UART_Init+0x4c>)
 800278a:	220c      	movs	r2, #12
 800278c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800278e:	4b08      	ldr	r3, [pc, #32]	; (80027b0 <MX_USART2_UART_Init+0x4c>)
 8002790:	2200      	movs	r2, #0
 8002792:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002794:	4b06      	ldr	r3, [pc, #24]	; (80027b0 <MX_USART2_UART_Init+0x4c>)
 8002796:	2200      	movs	r2, #0
 8002798:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800279a:	4805      	ldr	r0, [pc, #20]	; (80027b0 <MX_USART2_UART_Init+0x4c>)
 800279c:	f003 f864 	bl	8005868 <HAL_UART_Init>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80027a6:	f000 f89f 	bl	80028e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80027aa:	bf00      	nop
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	200006b0 	.word	0x200006b0
 80027b4:	40004400 	.word	0x40004400

080027b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b08a      	sub	sp, #40	; 0x28
 80027bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027be:	f107 0314 	add.w	r3, r7, #20
 80027c2:	2200      	movs	r2, #0
 80027c4:	601a      	str	r2, [r3, #0]
 80027c6:	605a      	str	r2, [r3, #4]
 80027c8:	609a      	str	r2, [r3, #8]
 80027ca:	60da      	str	r2, [r3, #12]
 80027cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027ce:	2300      	movs	r3, #0
 80027d0:	613b      	str	r3, [r7, #16]
 80027d2:	4b42      	ldr	r3, [pc, #264]	; (80028dc <MX_GPIO_Init+0x124>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d6:	4a41      	ldr	r2, [pc, #260]	; (80028dc <MX_GPIO_Init+0x124>)
 80027d8:	f043 0304 	orr.w	r3, r3, #4
 80027dc:	6313      	str	r3, [r2, #48]	; 0x30
 80027de:	4b3f      	ldr	r3, [pc, #252]	; (80028dc <MX_GPIO_Init+0x124>)
 80027e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e2:	f003 0304 	and.w	r3, r3, #4
 80027e6:	613b      	str	r3, [r7, #16]
 80027e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80027ea:	2300      	movs	r3, #0
 80027ec:	60fb      	str	r3, [r7, #12]
 80027ee:	4b3b      	ldr	r3, [pc, #236]	; (80028dc <MX_GPIO_Init+0x124>)
 80027f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f2:	4a3a      	ldr	r2, [pc, #232]	; (80028dc <MX_GPIO_Init+0x124>)
 80027f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027f8:	6313      	str	r3, [r2, #48]	; 0x30
 80027fa:	4b38      	ldr	r3, [pc, #224]	; (80028dc <MX_GPIO_Init+0x124>)
 80027fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002802:	60fb      	str	r3, [r7, #12]
 8002804:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002806:	2300      	movs	r3, #0
 8002808:	60bb      	str	r3, [r7, #8]
 800280a:	4b34      	ldr	r3, [pc, #208]	; (80028dc <MX_GPIO_Init+0x124>)
 800280c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280e:	4a33      	ldr	r2, [pc, #204]	; (80028dc <MX_GPIO_Init+0x124>)
 8002810:	f043 0301 	orr.w	r3, r3, #1
 8002814:	6313      	str	r3, [r2, #48]	; 0x30
 8002816:	4b31      	ldr	r3, [pc, #196]	; (80028dc <MX_GPIO_Init+0x124>)
 8002818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	60bb      	str	r3, [r7, #8]
 8002820:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002822:	2300      	movs	r3, #0
 8002824:	607b      	str	r3, [r7, #4]
 8002826:	4b2d      	ldr	r3, [pc, #180]	; (80028dc <MX_GPIO_Init+0x124>)
 8002828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282a:	4a2c      	ldr	r2, [pc, #176]	; (80028dc <MX_GPIO_Init+0x124>)
 800282c:	f043 0302 	orr.w	r3, r3, #2
 8002830:	6313      	str	r3, [r2, #48]	; 0x30
 8002832:	4b2a      	ldr	r3, [pc, #168]	; (80028dc <MX_GPIO_Init+0x124>)
 8002834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	607b      	str	r3, [r7, #4]
 800283c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800283e:	2200      	movs	r2, #0
 8002840:	21e0      	movs	r1, #224	; 0xe0
 8002842:	4827      	ldr	r0, [pc, #156]	; (80028e0 <MX_GPIO_Init+0x128>)
 8002844:	f001 fa3e 	bl	8003cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8002848:	2200      	movs	r2, #0
 800284a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800284e:	4825      	ldr	r0, [pc, #148]	; (80028e4 <MX_GPIO_Init+0x12c>)
 8002850:	f001 fa38 	bl	8003cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002854:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002858:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800285a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800285e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002860:	2300      	movs	r3, #0
 8002862:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002864:	f107 0314 	add.w	r3, r7, #20
 8002868:	4619      	mov	r1, r3
 800286a:	481e      	ldr	r0, [pc, #120]	; (80028e4 <MX_GPIO_Init+0x12c>)
 800286c:	f001 f88e 	bl	800398c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 PA7 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_7;
 8002870:	23e0      	movs	r3, #224	; 0xe0
 8002872:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002874:	2301      	movs	r3, #1
 8002876:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002878:	2300      	movs	r3, #0
 800287a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800287c:	2300      	movs	r3, #0
 800287e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002880:	f107 0314 	add.w	r3, r7, #20
 8002884:	4619      	mov	r1, r3
 8002886:	4816      	ldr	r0, [pc, #88]	; (80028e0 <MX_GPIO_Init+0x128>)
 8002888:	f001 f880 	bl	800398c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800288c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002890:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002892:	2300      	movs	r3, #0
 8002894:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002896:	2300      	movs	r3, #0
 8002898:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800289a:	f107 0314 	add.w	r3, r7, #20
 800289e:	4619      	mov	r1, r3
 80028a0:	4810      	ldr	r0, [pc, #64]	; (80028e4 <MX_GPIO_Init+0x12c>)
 80028a2:	f001 f873 	bl	800398c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80028a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80028aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028ac:	2301      	movs	r3, #1
 80028ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b0:	2300      	movs	r3, #0
 80028b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b4:	2300      	movs	r3, #0
 80028b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028b8:	f107 0314 	add.w	r3, r7, #20
 80028bc:	4619      	mov	r1, r3
 80028be:	4809      	ldr	r0, [pc, #36]	; (80028e4 <MX_GPIO_Init+0x12c>)
 80028c0:	f001 f864 	bl	800398c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80028c4:	2200      	movs	r2, #0
 80028c6:	2100      	movs	r1, #0
 80028c8:	2028      	movs	r0, #40	; 0x28
 80028ca:	f000 ff96 	bl	80037fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80028ce:	2028      	movs	r0, #40	; 0x28
 80028d0:	f000 ffaf 	bl	8003832 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80028d4:	bf00      	nop
 80028d6:	3728      	adds	r7, #40	; 0x28
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	40023800 	.word	0x40023800
 80028e0:	40020000 	.word	0x40020000
 80028e4:	40020800 	.word	0x40020800

080028e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028ec:	b672      	cpsid	i
}
 80028ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028f0:	e7fe      	b.n	80028f0 <Error_Handler+0x8>
	...

080028f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028fa:	2300      	movs	r3, #0
 80028fc:	607b      	str	r3, [r7, #4]
 80028fe:	4b10      	ldr	r3, [pc, #64]	; (8002940 <HAL_MspInit+0x4c>)
 8002900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002902:	4a0f      	ldr	r2, [pc, #60]	; (8002940 <HAL_MspInit+0x4c>)
 8002904:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002908:	6453      	str	r3, [r2, #68]	; 0x44
 800290a:	4b0d      	ldr	r3, [pc, #52]	; (8002940 <HAL_MspInit+0x4c>)
 800290c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002912:	607b      	str	r3, [r7, #4]
 8002914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002916:	2300      	movs	r3, #0
 8002918:	603b      	str	r3, [r7, #0]
 800291a:	4b09      	ldr	r3, [pc, #36]	; (8002940 <HAL_MspInit+0x4c>)
 800291c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291e:	4a08      	ldr	r2, [pc, #32]	; (8002940 <HAL_MspInit+0x4c>)
 8002920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002924:	6413      	str	r3, [r2, #64]	; 0x40
 8002926:	4b06      	ldr	r3, [pc, #24]	; (8002940 <HAL_MspInit+0x4c>)
 8002928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800292e:	603b      	str	r3, [r7, #0]
 8002930:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002932:	bf00      	nop
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	40023800 	.word	0x40023800

08002944 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b08a      	sub	sp, #40	; 0x28
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800294c:	f107 0314 	add.w	r3, r7, #20
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	605a      	str	r2, [r3, #4]
 8002956:	609a      	str	r2, [r3, #8]
 8002958:	60da      	str	r2, [r3, #12]
 800295a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a17      	ldr	r2, [pc, #92]	; (80029c0 <HAL_ADC_MspInit+0x7c>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d127      	bne.n	80029b6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002966:	2300      	movs	r3, #0
 8002968:	613b      	str	r3, [r7, #16]
 800296a:	4b16      	ldr	r3, [pc, #88]	; (80029c4 <HAL_ADC_MspInit+0x80>)
 800296c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296e:	4a15      	ldr	r2, [pc, #84]	; (80029c4 <HAL_ADC_MspInit+0x80>)
 8002970:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002974:	6453      	str	r3, [r2, #68]	; 0x44
 8002976:	4b13      	ldr	r3, [pc, #76]	; (80029c4 <HAL_ADC_MspInit+0x80>)
 8002978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800297a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297e:	613b      	str	r3, [r7, #16]
 8002980:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002982:	2300      	movs	r3, #0
 8002984:	60fb      	str	r3, [r7, #12]
 8002986:	4b0f      	ldr	r3, [pc, #60]	; (80029c4 <HAL_ADC_MspInit+0x80>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298a:	4a0e      	ldr	r2, [pc, #56]	; (80029c4 <HAL_ADC_MspInit+0x80>)
 800298c:	f043 0301 	orr.w	r3, r3, #1
 8002990:	6313      	str	r3, [r2, #48]	; 0x30
 8002992:	4b0c      	ldr	r3, [pc, #48]	; (80029c4 <HAL_ADC_MspInit+0x80>)
 8002994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	60fb      	str	r3, [r7, #12]
 800299c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 800299e:	2313      	movs	r3, #19
 80029a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029a2:	2303      	movs	r3, #3
 80029a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a6:	2300      	movs	r3, #0
 80029a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029aa:	f107 0314 	add.w	r3, r7, #20
 80029ae:	4619      	mov	r1, r3
 80029b0:	4805      	ldr	r0, [pc, #20]	; (80029c8 <HAL_ADC_MspInit+0x84>)
 80029b2:	f000 ffeb 	bl	800398c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80029b6:	bf00      	nop
 80029b8:	3728      	adds	r7, #40	; 0x28
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	40012000 	.word	0x40012000
 80029c4:	40023800 	.word	0x40023800
 80029c8:	40020000 	.word	0x40020000

080029cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b08a      	sub	sp, #40	; 0x28
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d4:	f107 0314 	add.w	r3, r7, #20
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]
 80029dc:	605a      	str	r2, [r3, #4]
 80029de:	609a      	str	r2, [r3, #8]
 80029e0:	60da      	str	r2, [r3, #12]
 80029e2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a19      	ldr	r2, [pc, #100]	; (8002a50 <HAL_I2C_MspInit+0x84>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d12b      	bne.n	8002a46 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029ee:	2300      	movs	r3, #0
 80029f0:	613b      	str	r3, [r7, #16]
 80029f2:	4b18      	ldr	r3, [pc, #96]	; (8002a54 <HAL_I2C_MspInit+0x88>)
 80029f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f6:	4a17      	ldr	r2, [pc, #92]	; (8002a54 <HAL_I2C_MspInit+0x88>)
 80029f8:	f043 0302 	orr.w	r3, r3, #2
 80029fc:	6313      	str	r3, [r2, #48]	; 0x30
 80029fe:	4b15      	ldr	r3, [pc, #84]	; (8002a54 <HAL_I2C_MspInit+0x88>)
 8002a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	613b      	str	r3, [r7, #16]
 8002a08:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a0a:	23c0      	movs	r3, #192	; 0xc0
 8002a0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a0e:	2312      	movs	r3, #18
 8002a10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a12:	2300      	movs	r3, #0
 8002a14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a16:	2303      	movs	r3, #3
 8002a18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a1a:	2304      	movs	r3, #4
 8002a1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a1e:	f107 0314 	add.w	r3, r7, #20
 8002a22:	4619      	mov	r1, r3
 8002a24:	480c      	ldr	r0, [pc, #48]	; (8002a58 <HAL_I2C_MspInit+0x8c>)
 8002a26:	f000 ffb1 	bl	800398c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	60fb      	str	r3, [r7, #12]
 8002a2e:	4b09      	ldr	r3, [pc, #36]	; (8002a54 <HAL_I2C_MspInit+0x88>)
 8002a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a32:	4a08      	ldr	r2, [pc, #32]	; (8002a54 <HAL_I2C_MspInit+0x88>)
 8002a34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a38:	6413      	str	r3, [r2, #64]	; 0x40
 8002a3a:	4b06      	ldr	r3, [pc, #24]	; (8002a54 <HAL_I2C_MspInit+0x88>)
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a42:	60fb      	str	r3, [r7, #12]
 8002a44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002a46:	bf00      	nop
 8002a48:	3728      	adds	r7, #40	; 0x28
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	40005400 	.word	0x40005400
 8002a54:	40023800 	.word	0x40023800
 8002a58:	40020400 	.word	0x40020400

08002a5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a26      	ldr	r2, [pc, #152]	; (8002b04 <HAL_TIM_Base_MspInit+0xa8>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d10e      	bne.n	8002a8c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a6e:	2300      	movs	r3, #0
 8002a70:	617b      	str	r3, [r7, #20]
 8002a72:	4b25      	ldr	r3, [pc, #148]	; (8002b08 <HAL_TIM_Base_MspInit+0xac>)
 8002a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a76:	4a24      	ldr	r2, [pc, #144]	; (8002b08 <HAL_TIM_Base_MspInit+0xac>)
 8002a78:	f043 0301 	orr.w	r3, r3, #1
 8002a7c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a7e:	4b22      	ldr	r3, [pc, #136]	; (8002b08 <HAL_TIM_Base_MspInit+0xac>)
 8002a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	617b      	str	r3, [r7, #20]
 8002a88:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002a8a:	e036      	b.n	8002afa <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM2)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a94:	d116      	bne.n	8002ac4 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a96:	2300      	movs	r3, #0
 8002a98:	613b      	str	r3, [r7, #16]
 8002a9a:	4b1b      	ldr	r3, [pc, #108]	; (8002b08 <HAL_TIM_Base_MspInit+0xac>)
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	4a1a      	ldr	r2, [pc, #104]	; (8002b08 <HAL_TIM_Base_MspInit+0xac>)
 8002aa0:	f043 0301 	orr.w	r3, r3, #1
 8002aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8002aa6:	4b18      	ldr	r3, [pc, #96]	; (8002b08 <HAL_TIM_Base_MspInit+0xac>)
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	613b      	str	r3, [r7, #16]
 8002ab0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	2100      	movs	r1, #0
 8002ab6:	201c      	movs	r0, #28
 8002ab8:	f000 fe9f 	bl	80037fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002abc:	201c      	movs	r0, #28
 8002abe:	f000 feb8 	bl	8003832 <HAL_NVIC_EnableIRQ>
}
 8002ac2:	e01a      	b.n	8002afa <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a10      	ldr	r2, [pc, #64]	; (8002b0c <HAL_TIM_Base_MspInit+0xb0>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d115      	bne.n	8002afa <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ace:	2300      	movs	r3, #0
 8002ad0:	60fb      	str	r3, [r7, #12]
 8002ad2:	4b0d      	ldr	r3, [pc, #52]	; (8002b08 <HAL_TIM_Base_MspInit+0xac>)
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad6:	4a0c      	ldr	r2, [pc, #48]	; (8002b08 <HAL_TIM_Base_MspInit+0xac>)
 8002ad8:	f043 0302 	orr.w	r3, r3, #2
 8002adc:	6413      	str	r3, [r2, #64]	; 0x40
 8002ade:	4b0a      	ldr	r3, [pc, #40]	; (8002b08 <HAL_TIM_Base_MspInit+0xac>)
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	60fb      	str	r3, [r7, #12]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002aea:	2200      	movs	r2, #0
 8002aec:	2100      	movs	r1, #0
 8002aee:	201d      	movs	r0, #29
 8002af0:	f000 fe83 	bl	80037fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002af4:	201d      	movs	r0, #29
 8002af6:	f000 fe9c 	bl	8003832 <HAL_NVIC_EnableIRQ>
}
 8002afa:	bf00      	nop
 8002afc:	3718      	adds	r7, #24
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	40010000 	.word	0x40010000
 8002b08:	40023800 	.word	0x40023800
 8002b0c:	40000400 	.word	0x40000400

08002b10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b08c      	sub	sp, #48	; 0x30
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b18:	f107 031c 	add.w	r3, r7, #28
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	605a      	str	r2, [r3, #4]
 8002b22:	609a      	str	r2, [r3, #8]
 8002b24:	60da      	str	r2, [r3, #12]
 8002b26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a36      	ldr	r2, [pc, #216]	; (8002c08 <HAL_UART_MspInit+0xf8>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d135      	bne.n	8002b9e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b32:	2300      	movs	r3, #0
 8002b34:	61bb      	str	r3, [r7, #24]
 8002b36:	4b35      	ldr	r3, [pc, #212]	; (8002c0c <HAL_UART_MspInit+0xfc>)
 8002b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3a:	4a34      	ldr	r2, [pc, #208]	; (8002c0c <HAL_UART_MspInit+0xfc>)
 8002b3c:	f043 0310 	orr.w	r3, r3, #16
 8002b40:	6453      	str	r3, [r2, #68]	; 0x44
 8002b42:	4b32      	ldr	r3, [pc, #200]	; (8002c0c <HAL_UART_MspInit+0xfc>)
 8002b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b46:	f003 0310 	and.w	r3, r3, #16
 8002b4a:	61bb      	str	r3, [r7, #24]
 8002b4c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b4e:	2300      	movs	r3, #0
 8002b50:	617b      	str	r3, [r7, #20]
 8002b52:	4b2e      	ldr	r3, [pc, #184]	; (8002c0c <HAL_UART_MspInit+0xfc>)
 8002b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b56:	4a2d      	ldr	r2, [pc, #180]	; (8002c0c <HAL_UART_MspInit+0xfc>)
 8002b58:	f043 0301 	orr.w	r3, r3, #1
 8002b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b5e:	4b2b      	ldr	r3, [pc, #172]	; (8002c0c <HAL_UART_MspInit+0xfc>)
 8002b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	617b      	str	r3, [r7, #20]
 8002b68:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002b6a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002b6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b70:	2302      	movs	r3, #2
 8002b72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b74:	2300      	movs	r3, #0
 8002b76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b7c:	2307      	movs	r3, #7
 8002b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b80:	f107 031c 	add.w	r3, r7, #28
 8002b84:	4619      	mov	r1, r3
 8002b86:	4822      	ldr	r0, [pc, #136]	; (8002c10 <HAL_UART_MspInit+0x100>)
 8002b88:	f000 ff00 	bl	800398c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	2100      	movs	r1, #0
 8002b90:	2025      	movs	r0, #37	; 0x25
 8002b92:	f000 fe32 	bl	80037fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002b96:	2025      	movs	r0, #37	; 0x25
 8002b98:	f000 fe4b 	bl	8003832 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002b9c:	e030      	b.n	8002c00 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a1c      	ldr	r2, [pc, #112]	; (8002c14 <HAL_UART_MspInit+0x104>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d12b      	bne.n	8002c00 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ba8:	2300      	movs	r3, #0
 8002baa:	613b      	str	r3, [r7, #16]
 8002bac:	4b17      	ldr	r3, [pc, #92]	; (8002c0c <HAL_UART_MspInit+0xfc>)
 8002bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb0:	4a16      	ldr	r2, [pc, #88]	; (8002c0c <HAL_UART_MspInit+0xfc>)
 8002bb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bb6:	6413      	str	r3, [r2, #64]	; 0x40
 8002bb8:	4b14      	ldr	r3, [pc, #80]	; (8002c0c <HAL_UART_MspInit+0xfc>)
 8002bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc0:	613b      	str	r3, [r7, #16]
 8002bc2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	60fb      	str	r3, [r7, #12]
 8002bc8:	4b10      	ldr	r3, [pc, #64]	; (8002c0c <HAL_UART_MspInit+0xfc>)
 8002bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bcc:	4a0f      	ldr	r2, [pc, #60]	; (8002c0c <HAL_UART_MspInit+0xfc>)
 8002bce:	f043 0301 	orr.w	r3, r3, #1
 8002bd2:	6313      	str	r3, [r2, #48]	; 0x30
 8002bd4:	4b0d      	ldr	r3, [pc, #52]	; (8002c0c <HAL_UART_MspInit+0xfc>)
 8002bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd8:	f003 0301 	and.w	r3, r3, #1
 8002bdc:	60fb      	str	r3, [r7, #12]
 8002bde:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002be0:	230c      	movs	r3, #12
 8002be2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be4:	2302      	movs	r3, #2
 8002be6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be8:	2300      	movs	r3, #0
 8002bea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bec:	2303      	movs	r3, #3
 8002bee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002bf0:	2307      	movs	r3, #7
 8002bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bf4:	f107 031c 	add.w	r3, r7, #28
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	4805      	ldr	r0, [pc, #20]	; (8002c10 <HAL_UART_MspInit+0x100>)
 8002bfc:	f000 fec6 	bl	800398c <HAL_GPIO_Init>
}
 8002c00:	bf00      	nop
 8002c02:	3730      	adds	r7, #48	; 0x30
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	40011000 	.word	0x40011000
 8002c0c:	40023800 	.word	0x40023800
 8002c10:	40020000 	.word	0x40020000
 8002c14:	40004400 	.word	0x40004400

08002c18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c1c:	e7fe      	b.n	8002c1c <NMI_Handler+0x4>

08002c1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c22:	e7fe      	b.n	8002c22 <HardFault_Handler+0x4>

08002c24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c28:	e7fe      	b.n	8002c28 <MemManage_Handler+0x4>

08002c2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c2e:	e7fe      	b.n	8002c2e <BusFault_Handler+0x4>

08002c30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c34:	e7fe      	b.n	8002c34 <UsageFault_Handler+0x4>

08002c36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c36:	b480      	push	{r7}
 8002c38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c3a:	bf00      	nop
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c48:	bf00      	nop
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr

08002c52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c52:	b480      	push	{r7}
 8002c54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c56:	bf00      	nop
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c64:	f000 f8ec 	bl	8002e40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c68:	bf00      	nop
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002c70:	4802      	ldr	r0, [pc, #8]	; (8002c7c <TIM2_IRQHandler+0x10>)
 8002c72:	f002 fa65 	bl	8005140 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002c76:	bf00      	nop
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	200005dc 	.word	0x200005dc

08002c80 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002c84:	4802      	ldr	r0, [pc, #8]	; (8002c90 <TIM3_IRQHandler+0x10>)
 8002c86:	f002 fa5b 	bl	8005140 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002c8a:	bf00      	nop
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	20000624 	.word	0x20000624

08002c94 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002c98:	4802      	ldr	r0, [pc, #8]	; (8002ca4 <USART1_IRQHandler+0x10>)
 8002c9a:	f002 fef5 	bl	8005a88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002c9e:	bf00      	nop
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	2000066c 	.word	0x2000066c

08002ca8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002cac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002cb0:	f001 f822 	bl	8003cf8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002cb4:	bf00      	nop
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b086      	sub	sp, #24
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cc0:	4a14      	ldr	r2, [pc, #80]	; (8002d14 <_sbrk+0x5c>)
 8002cc2:	4b15      	ldr	r3, [pc, #84]	; (8002d18 <_sbrk+0x60>)
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ccc:	4b13      	ldr	r3, [pc, #76]	; (8002d1c <_sbrk+0x64>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d102      	bne.n	8002cda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cd4:	4b11      	ldr	r3, [pc, #68]	; (8002d1c <_sbrk+0x64>)
 8002cd6:	4a12      	ldr	r2, [pc, #72]	; (8002d20 <_sbrk+0x68>)
 8002cd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cda:	4b10      	ldr	r3, [pc, #64]	; (8002d1c <_sbrk+0x64>)
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	693a      	ldr	r2, [r7, #16]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d207      	bcs.n	8002cf8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ce8:	f003 fe36 	bl	8006958 <__errno>
 8002cec:	4603      	mov	r3, r0
 8002cee:	220c      	movs	r2, #12
 8002cf0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8002cf6:	e009      	b.n	8002d0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cf8:	4b08      	ldr	r3, [pc, #32]	; (8002d1c <_sbrk+0x64>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cfe:	4b07      	ldr	r3, [pc, #28]	; (8002d1c <_sbrk+0x64>)
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4413      	add	r3, r2
 8002d06:	4a05      	ldr	r2, [pc, #20]	; (8002d1c <_sbrk+0x64>)
 8002d08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3718      	adds	r7, #24
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	20020000 	.word	0x20020000
 8002d18:	00000400 	.word	0x00000400
 8002d1c:	20000734 	.word	0x20000734
 8002d20:	20000750 	.word	0x20000750

08002d24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d28:	4b06      	ldr	r3, [pc, #24]	; (8002d44 <SystemInit+0x20>)
 8002d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d2e:	4a05      	ldr	r2, [pc, #20]	; (8002d44 <SystemInit+0x20>)
 8002d30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d38:	bf00      	nop
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	e000ed00 	.word	0xe000ed00

08002d48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002d48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d80 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d4c:	480d      	ldr	r0, [pc, #52]	; (8002d84 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002d4e:	490e      	ldr	r1, [pc, #56]	; (8002d88 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002d50:	4a0e      	ldr	r2, [pc, #56]	; (8002d8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d54:	e002      	b.n	8002d5c <LoopCopyDataInit>

08002d56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d5a:	3304      	adds	r3, #4

08002d5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d60:	d3f9      	bcc.n	8002d56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d62:	4a0b      	ldr	r2, [pc, #44]	; (8002d90 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002d64:	4c0b      	ldr	r4, [pc, #44]	; (8002d94 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002d66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d68:	e001      	b.n	8002d6e <LoopFillZerobss>

08002d6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d6c:	3204      	adds	r2, #4

08002d6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d70:	d3fb      	bcc.n	8002d6a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002d72:	f7ff ffd7 	bl	8002d24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d76:	f003 fdf5 	bl	8006964 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d7a:	f7ff f861 	bl	8001e40 <main>
  bx  lr    
 8002d7e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002d80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d88:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002d8c:	080080e8 	.word	0x080080e8
  ldr r2, =_sbss
 8002d90:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002d94:	2000074c 	.word	0x2000074c

08002d98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d98:	e7fe      	b.n	8002d98 <ADC_IRQHandler>
	...

08002d9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002da0:	4b0e      	ldr	r3, [pc, #56]	; (8002ddc <HAL_Init+0x40>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a0d      	ldr	r2, [pc, #52]	; (8002ddc <HAL_Init+0x40>)
 8002da6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002daa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002dac:	4b0b      	ldr	r3, [pc, #44]	; (8002ddc <HAL_Init+0x40>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a0a      	ldr	r2, [pc, #40]	; (8002ddc <HAL_Init+0x40>)
 8002db2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002db6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002db8:	4b08      	ldr	r3, [pc, #32]	; (8002ddc <HAL_Init+0x40>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a07      	ldr	r2, [pc, #28]	; (8002ddc <HAL_Init+0x40>)
 8002dbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dc4:	2003      	movs	r0, #3
 8002dc6:	f000 fd0d 	bl	80037e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dca:	2000      	movs	r0, #0
 8002dcc:	f000 f808 	bl	8002de0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002dd0:	f7ff fd90 	bl	80028f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	40023c00 	.word	0x40023c00

08002de0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002de8:	4b12      	ldr	r3, [pc, #72]	; (8002e34 <HAL_InitTick+0x54>)
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	4b12      	ldr	r3, [pc, #72]	; (8002e38 <HAL_InitTick+0x58>)
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	4619      	mov	r1, r3
 8002df2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002df6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f000 fd25 	bl	800384e <HAL_SYSTICK_Config>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e00e      	b.n	8002e2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2b0f      	cmp	r3, #15
 8002e12:	d80a      	bhi.n	8002e2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e14:	2200      	movs	r2, #0
 8002e16:	6879      	ldr	r1, [r7, #4]
 8002e18:	f04f 30ff 	mov.w	r0, #4294967295
 8002e1c:	f000 fced 	bl	80037fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e20:	4a06      	ldr	r2, [pc, #24]	; (8002e3c <HAL_InitTick+0x5c>)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
 8002e28:	e000      	b.n	8002e2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3708      	adds	r7, #8
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	20000008 	.word	0x20000008
 8002e38:	20000010 	.word	0x20000010
 8002e3c:	2000000c 	.word	0x2000000c

08002e40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e44:	4b06      	ldr	r3, [pc, #24]	; (8002e60 <HAL_IncTick+0x20>)
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	461a      	mov	r2, r3
 8002e4a:	4b06      	ldr	r3, [pc, #24]	; (8002e64 <HAL_IncTick+0x24>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4413      	add	r3, r2
 8002e50:	4a04      	ldr	r2, [pc, #16]	; (8002e64 <HAL_IncTick+0x24>)
 8002e52:	6013      	str	r3, [r2, #0]
}
 8002e54:	bf00      	nop
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	20000010 	.word	0x20000010
 8002e64:	20000738 	.word	0x20000738

08002e68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0
  return uwTick;
 8002e6c:	4b03      	ldr	r3, [pc, #12]	; (8002e7c <HAL_GetTick+0x14>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	20000738 	.word	0x20000738

08002e80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e88:	f7ff ffee 	bl	8002e68 <HAL_GetTick>
 8002e8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e98:	d005      	beq.n	8002ea6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e9a:	4b0a      	ldr	r3, [pc, #40]	; (8002ec4 <HAL_Delay+0x44>)
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ea6:	bf00      	nop
 8002ea8:	f7ff ffde 	bl	8002e68 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d8f7      	bhi.n	8002ea8 <HAL_Delay+0x28>
  {
  }
}
 8002eb8:	bf00      	nop
 8002eba:	bf00      	nop
 8002ebc:	3710      	adds	r7, #16
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	20000010 	.word	0x20000010

08002ec8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d101      	bne.n	8002ede <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e033      	b.n	8002f46 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d109      	bne.n	8002efa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f7ff fd2c 	bl	8002944 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efe:	f003 0310 	and.w	r3, r3, #16
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d118      	bne.n	8002f38 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f0e:	f023 0302 	bic.w	r3, r3, #2
 8002f12:	f043 0202 	orr.w	r2, r3, #2
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f000 fa96 	bl	800344c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2a:	f023 0303 	bic.w	r3, r3, #3
 8002f2e:	f043 0201 	orr.w	r2, r3, #1
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	641a      	str	r2, [r3, #64]	; 0x40
 8002f36:	e001      	b.n	8002f3c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3710      	adds	r7, #16
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
	...

08002f50 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b085      	sub	sp, #20
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d101      	bne.n	8002f6a <HAL_ADC_Start+0x1a>
 8002f66:	2302      	movs	r3, #2
 8002f68:	e097      	b.n	800309a <HAL_ADC_Start+0x14a>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f003 0301 	and.w	r3, r3, #1
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d018      	beq.n	8002fb2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689a      	ldr	r2, [r3, #8]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f042 0201 	orr.w	r2, r2, #1
 8002f8e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002f90:	4b45      	ldr	r3, [pc, #276]	; (80030a8 <HAL_ADC_Start+0x158>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a45      	ldr	r2, [pc, #276]	; (80030ac <HAL_ADC_Start+0x15c>)
 8002f96:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9a:	0c9a      	lsrs	r2, r3, #18
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	4413      	add	r3, r2
 8002fa2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002fa4:	e002      	b.n	8002fac <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d1f9      	bne.n	8002fa6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f003 0301 	and.w	r3, r3, #1
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d15f      	bne.n	8003080 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002fc8:	f023 0301 	bic.w	r3, r3, #1
 8002fcc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d007      	beq.n	8002ff2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002fea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ffa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ffe:	d106      	bne.n	800300e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003004:	f023 0206 	bic.w	r2, r3, #6
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	645a      	str	r2, [r3, #68]	; 0x44
 800300c:	e002      	b.n	8003014 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800301c:	4b24      	ldr	r3, [pc, #144]	; (80030b0 <HAL_ADC_Start+0x160>)
 800301e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003028:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f003 031f 	and.w	r3, r3, #31
 8003032:	2b00      	cmp	r3, #0
 8003034:	d10f      	bne.n	8003056 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d129      	bne.n	8003098 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	689a      	ldr	r2, [r3, #8]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003052:	609a      	str	r2, [r3, #8]
 8003054:	e020      	b.n	8003098 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a16      	ldr	r2, [pc, #88]	; (80030b4 <HAL_ADC_Start+0x164>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d11b      	bne.n	8003098 <HAL_ADC_Start+0x148>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d114      	bne.n	8003098 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	689a      	ldr	r2, [r3, #8]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800307c:	609a      	str	r2, [r3, #8]
 800307e:	e00b      	b.n	8003098 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003084:	f043 0210 	orr.w	r2, r3, #16
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003090:	f043 0201 	orr.w	r2, r3, #1
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	3714      	adds	r7, #20
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	20000008 	.word	0x20000008
 80030ac:	431bde83 	.word	0x431bde83
 80030b0:	40012300 	.word	0x40012300
 80030b4:	40012000 	.word	0x40012000

080030b8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80030c2:	2300      	movs	r3, #0
 80030c4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030d4:	d113      	bne.n	80030fe <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80030e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030e4:	d10b      	bne.n	80030fe <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ea:	f043 0220 	orr.w	r2, r3, #32
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e063      	b.n	80031c6 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80030fe:	f7ff feb3 	bl	8002e68 <HAL_GetTick>
 8003102:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003104:	e021      	b.n	800314a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800310c:	d01d      	beq.n	800314a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d007      	beq.n	8003124 <HAL_ADC_PollForConversion+0x6c>
 8003114:	f7ff fea8 	bl	8002e68 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	683a      	ldr	r2, [r7, #0]
 8003120:	429a      	cmp	r2, r3
 8003122:	d212      	bcs.n	800314a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	2b02      	cmp	r3, #2
 8003130:	d00b      	beq.n	800314a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003136:	f043 0204 	orr.w	r2, r3, #4
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e03d      	b.n	80031c6 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0302 	and.w	r3, r3, #2
 8003154:	2b02      	cmp	r3, #2
 8003156:	d1d6      	bne.n	8003106 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f06f 0212 	mvn.w	r2, #18
 8003160:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003166:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d123      	bne.n	80031c4 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003180:	2b00      	cmp	r3, #0
 8003182:	d11f      	bne.n	80031c4 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800318a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800318e:	2b00      	cmp	r3, #0
 8003190:	d006      	beq.n	80031a0 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800319c:	2b00      	cmp	r3, #0
 800319e:	d111      	bne.n	80031c4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d105      	bne.n	80031c4 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031bc:	f043 0201 	orr.w	r2, r3, #1
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3710      	adds	r7, #16
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}

080031ce <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80031ce:	b480      	push	{r7}
 80031d0:	b083      	sub	sp, #12
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80031dc:	4618      	mov	r0, r3
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b085      	sub	sp, #20
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80031f2:	2300      	movs	r3, #0
 80031f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d101      	bne.n	8003204 <HAL_ADC_ConfigChannel+0x1c>
 8003200:	2302      	movs	r3, #2
 8003202:	e113      	b.n	800342c <HAL_ADC_ConfigChannel+0x244>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2b09      	cmp	r3, #9
 8003212:	d925      	bls.n	8003260 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68d9      	ldr	r1, [r3, #12]
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	b29b      	uxth	r3, r3
 8003220:	461a      	mov	r2, r3
 8003222:	4613      	mov	r3, r2
 8003224:	005b      	lsls	r3, r3, #1
 8003226:	4413      	add	r3, r2
 8003228:	3b1e      	subs	r3, #30
 800322a:	2207      	movs	r2, #7
 800322c:	fa02 f303 	lsl.w	r3, r2, r3
 8003230:	43da      	mvns	r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	400a      	ands	r2, r1
 8003238:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	68d9      	ldr	r1, [r3, #12]
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	689a      	ldr	r2, [r3, #8]
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	b29b      	uxth	r3, r3
 800324a:	4618      	mov	r0, r3
 800324c:	4603      	mov	r3, r0
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	4403      	add	r3, r0
 8003252:	3b1e      	subs	r3, #30
 8003254:	409a      	lsls	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	430a      	orrs	r2, r1
 800325c:	60da      	str	r2, [r3, #12]
 800325e:	e022      	b.n	80032a6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	6919      	ldr	r1, [r3, #16]
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	b29b      	uxth	r3, r3
 800326c:	461a      	mov	r2, r3
 800326e:	4613      	mov	r3, r2
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	4413      	add	r3, r2
 8003274:	2207      	movs	r2, #7
 8003276:	fa02 f303 	lsl.w	r3, r2, r3
 800327a:	43da      	mvns	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	400a      	ands	r2, r1
 8003282:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	6919      	ldr	r1, [r3, #16]
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	689a      	ldr	r2, [r3, #8]
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	b29b      	uxth	r3, r3
 8003294:	4618      	mov	r0, r3
 8003296:	4603      	mov	r3, r0
 8003298:	005b      	lsls	r3, r3, #1
 800329a:	4403      	add	r3, r0
 800329c:	409a      	lsls	r2, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	430a      	orrs	r2, r1
 80032a4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	2b06      	cmp	r3, #6
 80032ac:	d824      	bhi.n	80032f8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	685a      	ldr	r2, [r3, #4]
 80032b8:	4613      	mov	r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	4413      	add	r3, r2
 80032be:	3b05      	subs	r3, #5
 80032c0:	221f      	movs	r2, #31
 80032c2:	fa02 f303 	lsl.w	r3, r2, r3
 80032c6:	43da      	mvns	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	400a      	ands	r2, r1
 80032ce:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	b29b      	uxth	r3, r3
 80032dc:	4618      	mov	r0, r3
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	685a      	ldr	r2, [r3, #4]
 80032e2:	4613      	mov	r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	4413      	add	r3, r2
 80032e8:	3b05      	subs	r3, #5
 80032ea:	fa00 f203 	lsl.w	r2, r0, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	635a      	str	r2, [r3, #52]	; 0x34
 80032f6:	e04c      	b.n	8003392 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	2b0c      	cmp	r3, #12
 80032fe:	d824      	bhi.n	800334a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	685a      	ldr	r2, [r3, #4]
 800330a:	4613      	mov	r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	4413      	add	r3, r2
 8003310:	3b23      	subs	r3, #35	; 0x23
 8003312:	221f      	movs	r2, #31
 8003314:	fa02 f303 	lsl.w	r3, r2, r3
 8003318:	43da      	mvns	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	400a      	ands	r2, r1
 8003320:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	b29b      	uxth	r3, r3
 800332e:	4618      	mov	r0, r3
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685a      	ldr	r2, [r3, #4]
 8003334:	4613      	mov	r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	4413      	add	r3, r2
 800333a:	3b23      	subs	r3, #35	; 0x23
 800333c:	fa00 f203 	lsl.w	r2, r0, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	430a      	orrs	r2, r1
 8003346:	631a      	str	r2, [r3, #48]	; 0x30
 8003348:	e023      	b.n	8003392 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685a      	ldr	r2, [r3, #4]
 8003354:	4613      	mov	r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	4413      	add	r3, r2
 800335a:	3b41      	subs	r3, #65	; 0x41
 800335c:	221f      	movs	r2, #31
 800335e:	fa02 f303 	lsl.w	r3, r2, r3
 8003362:	43da      	mvns	r2, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	400a      	ands	r2, r1
 800336a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	b29b      	uxth	r3, r3
 8003378:	4618      	mov	r0, r3
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	685a      	ldr	r2, [r3, #4]
 800337e:	4613      	mov	r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	4413      	add	r3, r2
 8003384:	3b41      	subs	r3, #65	; 0x41
 8003386:	fa00 f203 	lsl.w	r2, r0, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	430a      	orrs	r2, r1
 8003390:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003392:	4b29      	ldr	r3, [pc, #164]	; (8003438 <HAL_ADC_ConfigChannel+0x250>)
 8003394:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a28      	ldr	r2, [pc, #160]	; (800343c <HAL_ADC_ConfigChannel+0x254>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d10f      	bne.n	80033c0 <HAL_ADC_ConfigChannel+0x1d8>
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2b12      	cmp	r3, #18
 80033a6:	d10b      	bne.n	80033c0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a1d      	ldr	r2, [pc, #116]	; (800343c <HAL_ADC_ConfigChannel+0x254>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d12b      	bne.n	8003422 <HAL_ADC_ConfigChannel+0x23a>
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a1c      	ldr	r2, [pc, #112]	; (8003440 <HAL_ADC_ConfigChannel+0x258>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d003      	beq.n	80033dc <HAL_ADC_ConfigChannel+0x1f4>
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2b11      	cmp	r3, #17
 80033da:	d122      	bne.n	8003422 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a11      	ldr	r2, [pc, #68]	; (8003440 <HAL_ADC_ConfigChannel+0x258>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d111      	bne.n	8003422 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80033fe:	4b11      	ldr	r3, [pc, #68]	; (8003444 <HAL_ADC_ConfigChannel+0x25c>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a11      	ldr	r2, [pc, #68]	; (8003448 <HAL_ADC_ConfigChannel+0x260>)
 8003404:	fba2 2303 	umull	r2, r3, r2, r3
 8003408:	0c9a      	lsrs	r2, r3, #18
 800340a:	4613      	mov	r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	4413      	add	r3, r2
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003414:	e002      	b.n	800341c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	3b01      	subs	r3, #1
 800341a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d1f9      	bne.n	8003416 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800342a:	2300      	movs	r3, #0
}
 800342c:	4618      	mov	r0, r3
 800342e:	3714      	adds	r7, #20
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr
 8003438:	40012300 	.word	0x40012300
 800343c:	40012000 	.word	0x40012000
 8003440:	10000012 	.word	0x10000012
 8003444:	20000008 	.word	0x20000008
 8003448:	431bde83 	.word	0x431bde83

0800344c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800344c:	b480      	push	{r7}
 800344e:	b085      	sub	sp, #20
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003454:	4b79      	ldr	r3, [pc, #484]	; (800363c <ADC_Init+0x1f0>)
 8003456:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	685a      	ldr	r2, [r3, #4]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	431a      	orrs	r2, r3
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	685a      	ldr	r2, [r3, #4]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003480:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	6859      	ldr	r1, [r3, #4]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	691b      	ldr	r3, [r3, #16]
 800348c:	021a      	lsls	r2, r3, #8
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	430a      	orrs	r2, r1
 8003494:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	685a      	ldr	r2, [r3, #4]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80034a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	6859      	ldr	r1, [r3, #4]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	689a      	ldr	r2, [r3, #8]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	430a      	orrs	r2, r1
 80034b6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	689a      	ldr	r2, [r3, #8]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	6899      	ldr	r1, [r3, #8]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	68da      	ldr	r2, [r3, #12]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	430a      	orrs	r2, r1
 80034d8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034de:	4a58      	ldr	r2, [pc, #352]	; (8003640 <ADC_Init+0x1f4>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d022      	beq.n	800352a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	689a      	ldr	r2, [r3, #8]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80034f2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	6899      	ldr	r1, [r3, #8]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	430a      	orrs	r2, r1
 8003504:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	689a      	ldr	r2, [r3, #8]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003514:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	6899      	ldr	r1, [r3, #8]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	430a      	orrs	r2, r1
 8003526:	609a      	str	r2, [r3, #8]
 8003528:	e00f      	b.n	800354a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	689a      	ldr	r2, [r3, #8]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003538:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	689a      	ldr	r2, [r3, #8]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003548:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	689a      	ldr	r2, [r3, #8]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f022 0202 	bic.w	r2, r2, #2
 8003558:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	6899      	ldr	r1, [r3, #8]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	7e1b      	ldrb	r3, [r3, #24]
 8003564:	005a      	lsls	r2, r3, #1
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	430a      	orrs	r2, r1
 800356c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d01b      	beq.n	80035b0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	685a      	ldr	r2, [r3, #4]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003586:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	685a      	ldr	r2, [r3, #4]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003596:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6859      	ldr	r1, [r3, #4]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a2:	3b01      	subs	r3, #1
 80035a4:	035a      	lsls	r2, r3, #13
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	430a      	orrs	r2, r1
 80035ac:	605a      	str	r2, [r3, #4]
 80035ae:	e007      	b.n	80035c0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	685a      	ldr	r2, [r3, #4]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035be:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80035ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	69db      	ldr	r3, [r3, #28]
 80035da:	3b01      	subs	r3, #1
 80035dc:	051a      	lsls	r2, r3, #20
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	430a      	orrs	r2, r1
 80035e4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	689a      	ldr	r2, [r3, #8]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80035f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	6899      	ldr	r1, [r3, #8]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003602:	025a      	lsls	r2, r3, #9
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	430a      	orrs	r2, r1
 800360a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	689a      	ldr	r2, [r3, #8]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800361a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	6899      	ldr	r1, [r3, #8]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	029a      	lsls	r2, r3, #10
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	430a      	orrs	r2, r1
 800362e:	609a      	str	r2, [r3, #8]
}
 8003630:	bf00      	nop
 8003632:	3714      	adds	r7, #20
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr
 800363c:	40012300 	.word	0x40012300
 8003640:	0f000001 	.word	0x0f000001

08003644 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003644:	b480      	push	{r7}
 8003646:	b085      	sub	sp, #20
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f003 0307 	and.w	r3, r3, #7
 8003652:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003654:	4b0c      	ldr	r3, [pc, #48]	; (8003688 <__NVIC_SetPriorityGrouping+0x44>)
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800365a:	68ba      	ldr	r2, [r7, #8]
 800365c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003660:	4013      	ands	r3, r2
 8003662:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800366c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003670:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003674:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003676:	4a04      	ldr	r2, [pc, #16]	; (8003688 <__NVIC_SetPriorityGrouping+0x44>)
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	60d3      	str	r3, [r2, #12]
}
 800367c:	bf00      	nop
 800367e:	3714      	adds	r7, #20
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr
 8003688:	e000ed00 	.word	0xe000ed00

0800368c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800368c:	b480      	push	{r7}
 800368e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003690:	4b04      	ldr	r3, [pc, #16]	; (80036a4 <__NVIC_GetPriorityGrouping+0x18>)
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	0a1b      	lsrs	r3, r3, #8
 8003696:	f003 0307 	and.w	r3, r3, #7
}
 800369a:	4618      	mov	r0, r3
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr
 80036a4:	e000ed00 	.word	0xe000ed00

080036a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	4603      	mov	r3, r0
 80036b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	db0b      	blt.n	80036d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036ba:	79fb      	ldrb	r3, [r7, #7]
 80036bc:	f003 021f 	and.w	r2, r3, #31
 80036c0:	4907      	ldr	r1, [pc, #28]	; (80036e0 <__NVIC_EnableIRQ+0x38>)
 80036c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036c6:	095b      	lsrs	r3, r3, #5
 80036c8:	2001      	movs	r0, #1
 80036ca:	fa00 f202 	lsl.w	r2, r0, r2
 80036ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80036d2:	bf00      	nop
 80036d4:	370c      	adds	r7, #12
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	e000e100 	.word	0xe000e100

080036e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	4603      	mov	r3, r0
 80036ec:	6039      	str	r1, [r7, #0]
 80036ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	db0a      	blt.n	800370e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	b2da      	uxtb	r2, r3
 80036fc:	490c      	ldr	r1, [pc, #48]	; (8003730 <__NVIC_SetPriority+0x4c>)
 80036fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003702:	0112      	lsls	r2, r2, #4
 8003704:	b2d2      	uxtb	r2, r2
 8003706:	440b      	add	r3, r1
 8003708:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800370c:	e00a      	b.n	8003724 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	b2da      	uxtb	r2, r3
 8003712:	4908      	ldr	r1, [pc, #32]	; (8003734 <__NVIC_SetPriority+0x50>)
 8003714:	79fb      	ldrb	r3, [r7, #7]
 8003716:	f003 030f 	and.w	r3, r3, #15
 800371a:	3b04      	subs	r3, #4
 800371c:	0112      	lsls	r2, r2, #4
 800371e:	b2d2      	uxtb	r2, r2
 8003720:	440b      	add	r3, r1
 8003722:	761a      	strb	r2, [r3, #24]
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr
 8003730:	e000e100 	.word	0xe000e100
 8003734:	e000ed00 	.word	0xe000ed00

08003738 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003738:	b480      	push	{r7}
 800373a:	b089      	sub	sp, #36	; 0x24
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f003 0307 	and.w	r3, r3, #7
 800374a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	f1c3 0307 	rsb	r3, r3, #7
 8003752:	2b04      	cmp	r3, #4
 8003754:	bf28      	it	cs
 8003756:	2304      	movcs	r3, #4
 8003758:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	3304      	adds	r3, #4
 800375e:	2b06      	cmp	r3, #6
 8003760:	d902      	bls.n	8003768 <NVIC_EncodePriority+0x30>
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	3b03      	subs	r3, #3
 8003766:	e000      	b.n	800376a <NVIC_EncodePriority+0x32>
 8003768:	2300      	movs	r3, #0
 800376a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800376c:	f04f 32ff 	mov.w	r2, #4294967295
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	fa02 f303 	lsl.w	r3, r2, r3
 8003776:	43da      	mvns	r2, r3
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	401a      	ands	r2, r3
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003780:	f04f 31ff 	mov.w	r1, #4294967295
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	fa01 f303 	lsl.w	r3, r1, r3
 800378a:	43d9      	mvns	r1, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003790:	4313      	orrs	r3, r2
         );
}
 8003792:	4618      	mov	r0, r3
 8003794:	3724      	adds	r7, #36	; 0x24
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
	...

080037a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	3b01      	subs	r3, #1
 80037ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037b0:	d301      	bcc.n	80037b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037b2:	2301      	movs	r3, #1
 80037b4:	e00f      	b.n	80037d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037b6:	4a0a      	ldr	r2, [pc, #40]	; (80037e0 <SysTick_Config+0x40>)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	3b01      	subs	r3, #1
 80037bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037be:	210f      	movs	r1, #15
 80037c0:	f04f 30ff 	mov.w	r0, #4294967295
 80037c4:	f7ff ff8e 	bl	80036e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037c8:	4b05      	ldr	r3, [pc, #20]	; (80037e0 <SysTick_Config+0x40>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037ce:	4b04      	ldr	r3, [pc, #16]	; (80037e0 <SysTick_Config+0x40>)
 80037d0:	2207      	movs	r2, #7
 80037d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3708      	adds	r7, #8
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	e000e010 	.word	0xe000e010

080037e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f7ff ff29 	bl	8003644 <__NVIC_SetPriorityGrouping>
}
 80037f2:	bf00      	nop
 80037f4:	3708      	adds	r7, #8
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037fa:	b580      	push	{r7, lr}
 80037fc:	b086      	sub	sp, #24
 80037fe:	af00      	add	r7, sp, #0
 8003800:	4603      	mov	r3, r0
 8003802:	60b9      	str	r1, [r7, #8]
 8003804:	607a      	str	r2, [r7, #4]
 8003806:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003808:	2300      	movs	r3, #0
 800380a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800380c:	f7ff ff3e 	bl	800368c <__NVIC_GetPriorityGrouping>
 8003810:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	68b9      	ldr	r1, [r7, #8]
 8003816:	6978      	ldr	r0, [r7, #20]
 8003818:	f7ff ff8e 	bl	8003738 <NVIC_EncodePriority>
 800381c:	4602      	mov	r2, r0
 800381e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003822:	4611      	mov	r1, r2
 8003824:	4618      	mov	r0, r3
 8003826:	f7ff ff5d 	bl	80036e4 <__NVIC_SetPriority>
}
 800382a:	bf00      	nop
 800382c:	3718      	adds	r7, #24
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}

08003832 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003832:	b580      	push	{r7, lr}
 8003834:	b082      	sub	sp, #8
 8003836:	af00      	add	r7, sp, #0
 8003838:	4603      	mov	r3, r0
 800383a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800383c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003840:	4618      	mov	r0, r3
 8003842:	f7ff ff31 	bl	80036a8 <__NVIC_EnableIRQ>
}
 8003846:	bf00      	nop
 8003848:	3708      	adds	r7, #8
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}

0800384e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800384e:	b580      	push	{r7, lr}
 8003850:	b082      	sub	sp, #8
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f7ff ffa2 	bl	80037a0 <SysTick_Config>
 800385c:	4603      	mov	r3, r0
}
 800385e:	4618      	mov	r0, r3
 8003860:	3708      	adds	r7, #8
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}

08003866 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003866:	b580      	push	{r7, lr}
 8003868:	b084      	sub	sp, #16
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003872:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003874:	f7ff faf8 	bl	8002e68 <HAL_GetTick>
 8003878:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003880:	b2db      	uxtb	r3, r3
 8003882:	2b02      	cmp	r3, #2
 8003884:	d008      	beq.n	8003898 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2280      	movs	r2, #128	; 0x80
 800388a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e052      	b.n	800393e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f022 0216 	bic.w	r2, r2, #22
 80038a6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	695a      	ldr	r2, [r3, #20]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038b6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d103      	bne.n	80038c8 <HAL_DMA_Abort+0x62>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d007      	beq.n	80038d8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f022 0208 	bic.w	r2, r2, #8
 80038d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f022 0201 	bic.w	r2, r2, #1
 80038e6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038e8:	e013      	b.n	8003912 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80038ea:	f7ff fabd 	bl	8002e68 <HAL_GetTick>
 80038ee:	4602      	mov	r2, r0
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	2b05      	cmp	r3, #5
 80038f6:	d90c      	bls.n	8003912 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2220      	movs	r2, #32
 80038fc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2203      	movs	r2, #3
 8003902:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e015      	b.n	800393e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0301 	and.w	r3, r3, #1
 800391c:	2b00      	cmp	r3, #0
 800391e:	d1e4      	bne.n	80038ea <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003924:	223f      	movs	r2, #63	; 0x3f
 8003926:	409a      	lsls	r2, r3
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3710      	adds	r7, #16
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}

08003946 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003946:	b480      	push	{r7}
 8003948:	b083      	sub	sp, #12
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b02      	cmp	r3, #2
 8003958:	d004      	beq.n	8003964 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2280      	movs	r2, #128	; 0x80
 800395e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e00c      	b.n	800397e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2205      	movs	r2, #5
 8003968:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f022 0201 	bic.w	r2, r2, #1
 800397a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	370c      	adds	r7, #12
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
	...

0800398c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800398c:	b480      	push	{r7}
 800398e:	b089      	sub	sp, #36	; 0x24
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003996:	2300      	movs	r3, #0
 8003998:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800399a:	2300      	movs	r3, #0
 800399c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800399e:	2300      	movs	r3, #0
 80039a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039a2:	2300      	movs	r3, #0
 80039a4:	61fb      	str	r3, [r7, #28]
 80039a6:	e159      	b.n	8003c5c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80039a8:	2201      	movs	r2, #1
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	fa02 f303 	lsl.w	r3, r2, r3
 80039b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	4013      	ands	r3, r2
 80039ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80039bc:	693a      	ldr	r2, [r7, #16]
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	f040 8148 	bne.w	8003c56 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f003 0303 	and.w	r3, r3, #3
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d005      	beq.n	80039de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d130      	bne.n	8003a40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	005b      	lsls	r3, r3, #1
 80039e8:	2203      	movs	r2, #3
 80039ea:	fa02 f303 	lsl.w	r3, r2, r3
 80039ee:	43db      	mvns	r3, r3
 80039f0:	69ba      	ldr	r2, [r7, #24]
 80039f2:	4013      	ands	r3, r2
 80039f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	68da      	ldr	r2, [r3, #12]
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	005b      	lsls	r3, r3, #1
 80039fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003a02:	69ba      	ldr	r2, [r7, #24]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	69ba      	ldr	r2, [r7, #24]
 8003a0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a14:	2201      	movs	r2, #1
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1c:	43db      	mvns	r3, r3
 8003a1e:	69ba      	ldr	r2, [r7, #24]
 8003a20:	4013      	ands	r3, r2
 8003a22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	091b      	lsrs	r3, r3, #4
 8003a2a:	f003 0201 	and.w	r2, r3, #1
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	fa02 f303 	lsl.w	r3, r2, r3
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f003 0303 	and.w	r3, r3, #3
 8003a48:	2b03      	cmp	r3, #3
 8003a4a:	d017      	beq.n	8003a7c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	005b      	lsls	r3, r3, #1
 8003a56:	2203      	movs	r2, #3
 8003a58:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5c:	43db      	mvns	r3, r3
 8003a5e:	69ba      	ldr	r2, [r7, #24]
 8003a60:	4013      	ands	r3, r2
 8003a62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	689a      	ldr	r2, [r3, #8]
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	69ba      	ldr	r2, [r7, #24]
 8003a7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f003 0303 	and.w	r3, r3, #3
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d123      	bne.n	8003ad0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	08da      	lsrs	r2, r3, #3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	3208      	adds	r2, #8
 8003a90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	f003 0307 	and.w	r3, r3, #7
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	220f      	movs	r2, #15
 8003aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa4:	43db      	mvns	r3, r3
 8003aa6:	69ba      	ldr	r2, [r7, #24]
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	691a      	ldr	r2, [r3, #16]
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	f003 0307 	and.w	r3, r3, #7
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8003abc:	69ba      	ldr	r2, [r7, #24]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	08da      	lsrs	r2, r3, #3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	3208      	adds	r2, #8
 8003aca:	69b9      	ldr	r1, [r7, #24]
 8003acc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	005b      	lsls	r3, r3, #1
 8003ada:	2203      	movs	r2, #3
 8003adc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae0:	43db      	mvns	r3, r3
 8003ae2:	69ba      	ldr	r2, [r7, #24]
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f003 0203 	and.w	r2, r3, #3
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	005b      	lsls	r3, r3, #1
 8003af4:	fa02 f303 	lsl.w	r3, r2, r3
 8003af8:	69ba      	ldr	r2, [r7, #24]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	69ba      	ldr	r2, [r7, #24]
 8003b02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	f000 80a2 	beq.w	8003c56 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b12:	2300      	movs	r3, #0
 8003b14:	60fb      	str	r3, [r7, #12]
 8003b16:	4b57      	ldr	r3, [pc, #348]	; (8003c74 <HAL_GPIO_Init+0x2e8>)
 8003b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b1a:	4a56      	ldr	r2, [pc, #344]	; (8003c74 <HAL_GPIO_Init+0x2e8>)
 8003b1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b20:	6453      	str	r3, [r2, #68]	; 0x44
 8003b22:	4b54      	ldr	r3, [pc, #336]	; (8003c74 <HAL_GPIO_Init+0x2e8>)
 8003b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b2a:	60fb      	str	r3, [r7, #12]
 8003b2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b2e:	4a52      	ldr	r2, [pc, #328]	; (8003c78 <HAL_GPIO_Init+0x2ec>)
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	089b      	lsrs	r3, r3, #2
 8003b34:	3302      	adds	r3, #2
 8003b36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	f003 0303 	and.w	r3, r3, #3
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	220f      	movs	r2, #15
 8003b46:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4a:	43db      	mvns	r3, r3
 8003b4c:	69ba      	ldr	r2, [r7, #24]
 8003b4e:	4013      	ands	r3, r2
 8003b50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a49      	ldr	r2, [pc, #292]	; (8003c7c <HAL_GPIO_Init+0x2f0>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d019      	beq.n	8003b8e <HAL_GPIO_Init+0x202>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a48      	ldr	r2, [pc, #288]	; (8003c80 <HAL_GPIO_Init+0x2f4>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d013      	beq.n	8003b8a <HAL_GPIO_Init+0x1fe>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a47      	ldr	r2, [pc, #284]	; (8003c84 <HAL_GPIO_Init+0x2f8>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d00d      	beq.n	8003b86 <HAL_GPIO_Init+0x1fa>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a46      	ldr	r2, [pc, #280]	; (8003c88 <HAL_GPIO_Init+0x2fc>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d007      	beq.n	8003b82 <HAL_GPIO_Init+0x1f6>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a45      	ldr	r2, [pc, #276]	; (8003c8c <HAL_GPIO_Init+0x300>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d101      	bne.n	8003b7e <HAL_GPIO_Init+0x1f2>
 8003b7a:	2304      	movs	r3, #4
 8003b7c:	e008      	b.n	8003b90 <HAL_GPIO_Init+0x204>
 8003b7e:	2307      	movs	r3, #7
 8003b80:	e006      	b.n	8003b90 <HAL_GPIO_Init+0x204>
 8003b82:	2303      	movs	r3, #3
 8003b84:	e004      	b.n	8003b90 <HAL_GPIO_Init+0x204>
 8003b86:	2302      	movs	r3, #2
 8003b88:	e002      	b.n	8003b90 <HAL_GPIO_Init+0x204>
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e000      	b.n	8003b90 <HAL_GPIO_Init+0x204>
 8003b8e:	2300      	movs	r3, #0
 8003b90:	69fa      	ldr	r2, [r7, #28]
 8003b92:	f002 0203 	and.w	r2, r2, #3
 8003b96:	0092      	lsls	r2, r2, #2
 8003b98:	4093      	lsls	r3, r2
 8003b9a:	69ba      	ldr	r2, [r7, #24]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ba0:	4935      	ldr	r1, [pc, #212]	; (8003c78 <HAL_GPIO_Init+0x2ec>)
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	089b      	lsrs	r3, r3, #2
 8003ba6:	3302      	adds	r3, #2
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003bae:	4b38      	ldr	r3, [pc, #224]	; (8003c90 <HAL_GPIO_Init+0x304>)
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	43db      	mvns	r3, r3
 8003bb8:	69ba      	ldr	r2, [r7, #24]
 8003bba:	4013      	ands	r3, r2
 8003bbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d003      	beq.n	8003bd2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003bca:	69ba      	ldr	r2, [r7, #24]
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003bd2:	4a2f      	ldr	r2, [pc, #188]	; (8003c90 <HAL_GPIO_Init+0x304>)
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003bd8:	4b2d      	ldr	r3, [pc, #180]	; (8003c90 <HAL_GPIO_Init+0x304>)
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	43db      	mvns	r3, r3
 8003be2:	69ba      	ldr	r2, [r7, #24]
 8003be4:	4013      	ands	r3, r2
 8003be6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d003      	beq.n	8003bfc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003bf4:	69ba      	ldr	r2, [r7, #24]
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003bfc:	4a24      	ldr	r2, [pc, #144]	; (8003c90 <HAL_GPIO_Init+0x304>)
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c02:	4b23      	ldr	r3, [pc, #140]	; (8003c90 <HAL_GPIO_Init+0x304>)
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	43db      	mvns	r3, r3
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	4013      	ands	r3, r2
 8003c10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d003      	beq.n	8003c26 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003c1e:	69ba      	ldr	r2, [r7, #24]
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c26:	4a1a      	ldr	r2, [pc, #104]	; (8003c90 <HAL_GPIO_Init+0x304>)
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c2c:	4b18      	ldr	r3, [pc, #96]	; (8003c90 <HAL_GPIO_Init+0x304>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	43db      	mvns	r3, r3
 8003c36:	69ba      	ldr	r2, [r7, #24]
 8003c38:	4013      	ands	r3, r2
 8003c3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d003      	beq.n	8003c50 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003c48:	69ba      	ldr	r2, [r7, #24]
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c50:	4a0f      	ldr	r2, [pc, #60]	; (8003c90 <HAL_GPIO_Init+0x304>)
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	3301      	adds	r3, #1
 8003c5a:	61fb      	str	r3, [r7, #28]
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	2b0f      	cmp	r3, #15
 8003c60:	f67f aea2 	bls.w	80039a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c64:	bf00      	nop
 8003c66:	bf00      	nop
 8003c68:	3724      	adds	r7, #36	; 0x24
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	40023800 	.word	0x40023800
 8003c78:	40013800 	.word	0x40013800
 8003c7c:	40020000 	.word	0x40020000
 8003c80:	40020400 	.word	0x40020400
 8003c84:	40020800 	.word	0x40020800
 8003c88:	40020c00 	.word	0x40020c00
 8003c8c:	40021000 	.word	0x40021000
 8003c90:	40013c00 	.word	0x40013c00

08003c94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b085      	sub	sp, #20
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	691a      	ldr	r2, [r3, #16]
 8003ca4:	887b      	ldrh	r3, [r7, #2]
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d002      	beq.n	8003cb2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003cac:	2301      	movs	r3, #1
 8003cae:	73fb      	strb	r3, [r7, #15]
 8003cb0:	e001      	b.n	8003cb6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3714      	adds	r7, #20
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	460b      	mov	r3, r1
 8003cce:	807b      	strh	r3, [r7, #2]
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003cd4:	787b      	ldrb	r3, [r7, #1]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d003      	beq.n	8003ce2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003cda:	887a      	ldrh	r2, [r7, #2]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ce0:	e003      	b.n	8003cea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003ce2:	887b      	ldrh	r3, [r7, #2]
 8003ce4:	041a      	lsls	r2, r3, #16
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	619a      	str	r2, [r3, #24]
}
 8003cea:	bf00      	nop
 8003cec:	370c      	adds	r7, #12
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
	...

08003cf8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	4603      	mov	r3, r0
 8003d00:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003d02:	4b08      	ldr	r3, [pc, #32]	; (8003d24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d04:	695a      	ldr	r2, [r3, #20]
 8003d06:	88fb      	ldrh	r3, [r7, #6]
 8003d08:	4013      	ands	r3, r2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d006      	beq.n	8003d1c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d0e:	4a05      	ldr	r2, [pc, #20]	; (8003d24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d10:	88fb      	ldrh	r3, [r7, #6]
 8003d12:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d14:	88fb      	ldrh	r3, [r7, #6]
 8003d16:	4618      	mov	r0, r3
 8003d18:	f000 f806 	bl	8003d28 <HAL_GPIO_EXTI_Callback>
  }
}
 8003d1c:	bf00      	nop
 8003d1e:	3708      	adds	r7, #8
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	40013c00 	.word	0x40013c00

08003d28 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	4603      	mov	r3, r0
 8003d30:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003d32:	bf00      	nop
 8003d34:	370c      	adds	r7, #12
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
	...

08003d40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d101      	bne.n	8003d52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e12b      	b.n	8003faa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d106      	bne.n	8003d6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f7fe fe30 	bl	80029cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2224      	movs	r2, #36	; 0x24
 8003d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f022 0201 	bic.w	r2, r2, #1
 8003d82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003da2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003da4:	f001 f898 	bl	8004ed8 <HAL_RCC_GetPCLK1Freq>
 8003da8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	4a81      	ldr	r2, [pc, #516]	; (8003fb4 <HAL_I2C_Init+0x274>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d807      	bhi.n	8003dc4 <HAL_I2C_Init+0x84>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	4a80      	ldr	r2, [pc, #512]	; (8003fb8 <HAL_I2C_Init+0x278>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	bf94      	ite	ls
 8003dbc:	2301      	movls	r3, #1
 8003dbe:	2300      	movhi	r3, #0
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	e006      	b.n	8003dd2 <HAL_I2C_Init+0x92>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	4a7d      	ldr	r2, [pc, #500]	; (8003fbc <HAL_I2C_Init+0x27c>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	bf94      	ite	ls
 8003dcc:	2301      	movls	r3, #1
 8003dce:	2300      	movhi	r3, #0
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d001      	beq.n	8003dda <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e0e7      	b.n	8003faa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	4a78      	ldr	r2, [pc, #480]	; (8003fc0 <HAL_I2C_Init+0x280>)
 8003dde:	fba2 2303 	umull	r2, r3, r2, r3
 8003de2:	0c9b      	lsrs	r3, r3, #18
 8003de4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68ba      	ldr	r2, [r7, #8]
 8003df6:	430a      	orrs	r2, r1
 8003df8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	6a1b      	ldr	r3, [r3, #32]
 8003e00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	4a6a      	ldr	r2, [pc, #424]	; (8003fb4 <HAL_I2C_Init+0x274>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d802      	bhi.n	8003e14 <HAL_I2C_Init+0xd4>
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	3301      	adds	r3, #1
 8003e12:	e009      	b.n	8003e28 <HAL_I2C_Init+0xe8>
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003e1a:	fb02 f303 	mul.w	r3, r2, r3
 8003e1e:	4a69      	ldr	r2, [pc, #420]	; (8003fc4 <HAL_I2C_Init+0x284>)
 8003e20:	fba2 2303 	umull	r2, r3, r2, r3
 8003e24:	099b      	lsrs	r3, r3, #6
 8003e26:	3301      	adds	r3, #1
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	6812      	ldr	r2, [r2, #0]
 8003e2c:	430b      	orrs	r3, r1
 8003e2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	69db      	ldr	r3, [r3, #28]
 8003e36:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003e3a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	495c      	ldr	r1, [pc, #368]	; (8003fb4 <HAL_I2C_Init+0x274>)
 8003e44:	428b      	cmp	r3, r1
 8003e46:	d819      	bhi.n	8003e7c <HAL_I2C_Init+0x13c>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	1e59      	subs	r1, r3, #1
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	005b      	lsls	r3, r3, #1
 8003e52:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e56:	1c59      	adds	r1, r3, #1
 8003e58:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003e5c:	400b      	ands	r3, r1
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00a      	beq.n	8003e78 <HAL_I2C_Init+0x138>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	1e59      	subs	r1, r3, #1
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	005b      	lsls	r3, r3, #1
 8003e6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e70:	3301      	adds	r3, #1
 8003e72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e76:	e051      	b.n	8003f1c <HAL_I2C_Init+0x1dc>
 8003e78:	2304      	movs	r3, #4
 8003e7a:	e04f      	b.n	8003f1c <HAL_I2C_Init+0x1dc>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d111      	bne.n	8003ea8 <HAL_I2C_Init+0x168>
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	1e58      	subs	r0, r3, #1
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6859      	ldr	r1, [r3, #4]
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	005b      	lsls	r3, r3, #1
 8003e90:	440b      	add	r3, r1
 8003e92:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e96:	3301      	adds	r3, #1
 8003e98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	bf0c      	ite	eq
 8003ea0:	2301      	moveq	r3, #1
 8003ea2:	2300      	movne	r3, #0
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	e012      	b.n	8003ece <HAL_I2C_Init+0x18e>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	1e58      	subs	r0, r3, #1
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6859      	ldr	r1, [r3, #4]
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	440b      	add	r3, r1
 8003eb6:	0099      	lsls	r1, r3, #2
 8003eb8:	440b      	add	r3, r1
 8003eba:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	bf0c      	ite	eq
 8003ec8:	2301      	moveq	r3, #1
 8003eca:	2300      	movne	r3, #0
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d001      	beq.n	8003ed6 <HAL_I2C_Init+0x196>
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e022      	b.n	8003f1c <HAL_I2C_Init+0x1dc>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d10e      	bne.n	8003efc <HAL_I2C_Init+0x1bc>
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	1e58      	subs	r0, r3, #1
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6859      	ldr	r1, [r3, #4]
 8003ee6:	460b      	mov	r3, r1
 8003ee8:	005b      	lsls	r3, r3, #1
 8003eea:	440b      	add	r3, r1
 8003eec:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ef6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003efa:	e00f      	b.n	8003f1c <HAL_I2C_Init+0x1dc>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	1e58      	subs	r0, r3, #1
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6859      	ldr	r1, [r3, #4]
 8003f04:	460b      	mov	r3, r1
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	440b      	add	r3, r1
 8003f0a:	0099      	lsls	r1, r3, #2
 8003f0c:	440b      	add	r3, r1
 8003f0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f12:	3301      	adds	r3, #1
 8003f14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f1c:	6879      	ldr	r1, [r7, #4]
 8003f1e:	6809      	ldr	r1, [r1, #0]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	69da      	ldr	r2, [r3, #28]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a1b      	ldr	r3, [r3, #32]
 8003f36:	431a      	orrs	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003f4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	6911      	ldr	r1, [r2, #16]
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	68d2      	ldr	r2, [r2, #12]
 8003f56:	4311      	orrs	r1, r2
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	6812      	ldr	r2, [r2, #0]
 8003f5c:	430b      	orrs	r3, r1
 8003f5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	695a      	ldr	r2, [r3, #20]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	699b      	ldr	r3, [r3, #24]
 8003f72:	431a      	orrs	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	430a      	orrs	r2, r1
 8003f7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f042 0201 	orr.w	r2, r2, #1
 8003f8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2220      	movs	r2, #32
 8003f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3710      	adds	r7, #16
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	000186a0 	.word	0x000186a0
 8003fb8:	001e847f 	.word	0x001e847f
 8003fbc:	003d08ff 	.word	0x003d08ff
 8003fc0:	431bde83 	.word	0x431bde83
 8003fc4:	10624dd3 	.word	0x10624dd3

08003fc8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b088      	sub	sp, #32
 8003fcc:	af02      	add	r7, sp, #8
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	4608      	mov	r0, r1
 8003fd2:	4611      	mov	r1, r2
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	817b      	strh	r3, [r7, #10]
 8003fda:	460b      	mov	r3, r1
 8003fdc:	813b      	strh	r3, [r7, #8]
 8003fde:	4613      	mov	r3, r2
 8003fe0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003fe2:	f7fe ff41 	bl	8002e68 <HAL_GetTick>
 8003fe6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	2b20      	cmp	r3, #32
 8003ff2:	f040 80d9 	bne.w	80041a8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	9300      	str	r3, [sp, #0]
 8003ffa:	2319      	movs	r3, #25
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	496d      	ldr	r1, [pc, #436]	; (80041b4 <HAL_I2C_Mem_Write+0x1ec>)
 8004000:	68f8      	ldr	r0, [r7, #12]
 8004002:	f000 f971 	bl	80042e8 <I2C_WaitOnFlagUntilTimeout>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d001      	beq.n	8004010 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800400c:	2302      	movs	r3, #2
 800400e:	e0cc      	b.n	80041aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004016:	2b01      	cmp	r3, #1
 8004018:	d101      	bne.n	800401e <HAL_I2C_Mem_Write+0x56>
 800401a:	2302      	movs	r3, #2
 800401c:	e0c5      	b.n	80041aa <HAL_I2C_Mem_Write+0x1e2>
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2201      	movs	r2, #1
 8004022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0301 	and.w	r3, r3, #1
 8004030:	2b01      	cmp	r3, #1
 8004032:	d007      	beq.n	8004044 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f042 0201 	orr.w	r2, r2, #1
 8004042:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004052:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2221      	movs	r2, #33	; 0x21
 8004058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2240      	movs	r2, #64	; 0x40
 8004060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2200      	movs	r2, #0
 8004068:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6a3a      	ldr	r2, [r7, #32]
 800406e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004074:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800407a:	b29a      	uxth	r2, r3
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	4a4d      	ldr	r2, [pc, #308]	; (80041b8 <HAL_I2C_Mem_Write+0x1f0>)
 8004084:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004086:	88f8      	ldrh	r0, [r7, #6]
 8004088:	893a      	ldrh	r2, [r7, #8]
 800408a:	8979      	ldrh	r1, [r7, #10]
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	9301      	str	r3, [sp, #4]
 8004090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004092:	9300      	str	r3, [sp, #0]
 8004094:	4603      	mov	r3, r0
 8004096:	68f8      	ldr	r0, [r7, #12]
 8004098:	f000 f890 	bl	80041bc <I2C_RequestMemoryWrite>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d052      	beq.n	8004148 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e081      	b.n	80041aa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040aa:	68f8      	ldr	r0, [r7, #12]
 80040ac:	f000 f9f2 	bl	8004494 <I2C_WaitOnTXEFlagUntilTimeout>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00d      	beq.n	80040d2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ba:	2b04      	cmp	r3, #4
 80040bc:	d107      	bne.n	80040ce <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e06b      	b.n	80041aa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d6:	781a      	ldrb	r2, [r3, #0]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e2:	1c5a      	adds	r2, r3, #1
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ec:	3b01      	subs	r3, #1
 80040ee:	b29a      	uxth	r2, r3
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	3b01      	subs	r3, #1
 80040fc:	b29a      	uxth	r2, r3
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	695b      	ldr	r3, [r3, #20]
 8004108:	f003 0304 	and.w	r3, r3, #4
 800410c:	2b04      	cmp	r3, #4
 800410e:	d11b      	bne.n	8004148 <HAL_I2C_Mem_Write+0x180>
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004114:	2b00      	cmp	r3, #0
 8004116:	d017      	beq.n	8004148 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411c:	781a      	ldrb	r2, [r3, #0]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004128:	1c5a      	adds	r2, r3, #1
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004132:	3b01      	subs	r3, #1
 8004134:	b29a      	uxth	r2, r3
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800413e:	b29b      	uxth	r3, r3
 8004140:	3b01      	subs	r3, #1
 8004142:	b29a      	uxth	r2, r3
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800414c:	2b00      	cmp	r3, #0
 800414e:	d1aa      	bne.n	80040a6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004150:	697a      	ldr	r2, [r7, #20]
 8004152:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004154:	68f8      	ldr	r0, [r7, #12]
 8004156:	f000 f9de 	bl	8004516 <I2C_WaitOnBTFFlagUntilTimeout>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d00d      	beq.n	800417c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004164:	2b04      	cmp	r3, #4
 8004166:	d107      	bne.n	8004178 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004176:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e016      	b.n	80041aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800418a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2220      	movs	r2, #32
 8004190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2200      	movs	r2, #0
 8004198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2200      	movs	r2, #0
 80041a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80041a4:	2300      	movs	r3, #0
 80041a6:	e000      	b.n	80041aa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80041a8:	2302      	movs	r3, #2
  }
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3718      	adds	r7, #24
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	00100002 	.word	0x00100002
 80041b8:	ffff0000 	.word	0xffff0000

080041bc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b088      	sub	sp, #32
 80041c0:	af02      	add	r7, sp, #8
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	4608      	mov	r0, r1
 80041c6:	4611      	mov	r1, r2
 80041c8:	461a      	mov	r2, r3
 80041ca:	4603      	mov	r3, r0
 80041cc:	817b      	strh	r3, [r7, #10]
 80041ce:	460b      	mov	r3, r1
 80041d0:	813b      	strh	r3, [r7, #8]
 80041d2:	4613      	mov	r3, r2
 80041d4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e8:	9300      	str	r3, [sp, #0]
 80041ea:	6a3b      	ldr	r3, [r7, #32]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80041f2:	68f8      	ldr	r0, [r7, #12]
 80041f4:	f000 f878 	bl	80042e8 <I2C_WaitOnFlagUntilTimeout>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00d      	beq.n	800421a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004208:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800420c:	d103      	bne.n	8004216 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004214:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e05f      	b.n	80042da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800421a:	897b      	ldrh	r3, [r7, #10]
 800421c:	b2db      	uxtb	r3, r3
 800421e:	461a      	mov	r2, r3
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004228:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800422a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422c:	6a3a      	ldr	r2, [r7, #32]
 800422e:	492d      	ldr	r1, [pc, #180]	; (80042e4 <I2C_RequestMemoryWrite+0x128>)
 8004230:	68f8      	ldr	r0, [r7, #12]
 8004232:	f000 f8b0 	bl	8004396 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d001      	beq.n	8004240 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e04c      	b.n	80042da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004240:	2300      	movs	r3, #0
 8004242:	617b      	str	r3, [r7, #20]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	617b      	str	r3, [r7, #20]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	617b      	str	r3, [r7, #20]
 8004254:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004256:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004258:	6a39      	ldr	r1, [r7, #32]
 800425a:	68f8      	ldr	r0, [r7, #12]
 800425c:	f000 f91a 	bl	8004494 <I2C_WaitOnTXEFlagUntilTimeout>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00d      	beq.n	8004282 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426a:	2b04      	cmp	r3, #4
 800426c:	d107      	bne.n	800427e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800427c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e02b      	b.n	80042da <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004282:	88fb      	ldrh	r3, [r7, #6]
 8004284:	2b01      	cmp	r3, #1
 8004286:	d105      	bne.n	8004294 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004288:	893b      	ldrh	r3, [r7, #8]
 800428a:	b2da      	uxtb	r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	611a      	str	r2, [r3, #16]
 8004292:	e021      	b.n	80042d8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004294:	893b      	ldrh	r3, [r7, #8]
 8004296:	0a1b      	lsrs	r3, r3, #8
 8004298:	b29b      	uxth	r3, r3
 800429a:	b2da      	uxtb	r2, r3
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042a4:	6a39      	ldr	r1, [r7, #32]
 80042a6:	68f8      	ldr	r0, [r7, #12]
 80042a8:	f000 f8f4 	bl	8004494 <I2C_WaitOnTXEFlagUntilTimeout>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00d      	beq.n	80042ce <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b6:	2b04      	cmp	r3, #4
 80042b8:	d107      	bne.n	80042ca <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e005      	b.n	80042da <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042ce:	893b      	ldrh	r3, [r7, #8]
 80042d0:	b2da      	uxtb	r2, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3718      	adds	r7, #24
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	00010002 	.word	0x00010002

080042e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	60b9      	str	r1, [r7, #8]
 80042f2:	603b      	str	r3, [r7, #0]
 80042f4:	4613      	mov	r3, r2
 80042f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042f8:	e025      	b.n	8004346 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004300:	d021      	beq.n	8004346 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004302:	f7fe fdb1 	bl	8002e68 <HAL_GetTick>
 8004306:	4602      	mov	r2, r0
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	683a      	ldr	r2, [r7, #0]
 800430e:	429a      	cmp	r2, r3
 8004310:	d302      	bcc.n	8004318 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d116      	bne.n	8004346 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2200      	movs	r2, #0
 800431c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2220      	movs	r2, #32
 8004322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2200      	movs	r2, #0
 800432a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004332:	f043 0220 	orr.w	r2, r3, #32
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e023      	b.n	800438e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	0c1b      	lsrs	r3, r3, #16
 800434a:	b2db      	uxtb	r3, r3
 800434c:	2b01      	cmp	r3, #1
 800434e:	d10d      	bne.n	800436c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	43da      	mvns	r2, r3
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	4013      	ands	r3, r2
 800435c:	b29b      	uxth	r3, r3
 800435e:	2b00      	cmp	r3, #0
 8004360:	bf0c      	ite	eq
 8004362:	2301      	moveq	r3, #1
 8004364:	2300      	movne	r3, #0
 8004366:	b2db      	uxtb	r3, r3
 8004368:	461a      	mov	r2, r3
 800436a:	e00c      	b.n	8004386 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	699b      	ldr	r3, [r3, #24]
 8004372:	43da      	mvns	r2, r3
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	4013      	ands	r3, r2
 8004378:	b29b      	uxth	r3, r3
 800437a:	2b00      	cmp	r3, #0
 800437c:	bf0c      	ite	eq
 800437e:	2301      	moveq	r3, #1
 8004380:	2300      	movne	r3, #0
 8004382:	b2db      	uxtb	r3, r3
 8004384:	461a      	mov	r2, r3
 8004386:	79fb      	ldrb	r3, [r7, #7]
 8004388:	429a      	cmp	r2, r3
 800438a:	d0b6      	beq.n	80042fa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	3710      	adds	r7, #16
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}

08004396 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004396:	b580      	push	{r7, lr}
 8004398:	b084      	sub	sp, #16
 800439a:	af00      	add	r7, sp, #0
 800439c:	60f8      	str	r0, [r7, #12]
 800439e:	60b9      	str	r1, [r7, #8]
 80043a0:	607a      	str	r2, [r7, #4]
 80043a2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043a4:	e051      	b.n	800444a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	695b      	ldr	r3, [r3, #20]
 80043ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043b4:	d123      	bne.n	80043fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043c4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043ce:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2200      	movs	r2, #0
 80043d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2220      	movs	r2, #32
 80043da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ea:	f043 0204 	orr.w	r2, r3, #4
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e046      	b.n	800448c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004404:	d021      	beq.n	800444a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004406:	f7fe fd2f 	bl	8002e68 <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	429a      	cmp	r2, r3
 8004414:	d302      	bcc.n	800441c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d116      	bne.n	800444a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2200      	movs	r2, #0
 8004420:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2220      	movs	r2, #32
 8004426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2200      	movs	r2, #0
 800442e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004436:	f043 0220 	orr.w	r2, r3, #32
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e020      	b.n	800448c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	0c1b      	lsrs	r3, r3, #16
 800444e:	b2db      	uxtb	r3, r3
 8004450:	2b01      	cmp	r3, #1
 8004452:	d10c      	bne.n	800446e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	695b      	ldr	r3, [r3, #20]
 800445a:	43da      	mvns	r2, r3
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	4013      	ands	r3, r2
 8004460:	b29b      	uxth	r3, r3
 8004462:	2b00      	cmp	r3, #0
 8004464:	bf14      	ite	ne
 8004466:	2301      	movne	r3, #1
 8004468:	2300      	moveq	r3, #0
 800446a:	b2db      	uxtb	r3, r3
 800446c:	e00b      	b.n	8004486 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	699b      	ldr	r3, [r3, #24]
 8004474:	43da      	mvns	r2, r3
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	4013      	ands	r3, r2
 800447a:	b29b      	uxth	r3, r3
 800447c:	2b00      	cmp	r3, #0
 800447e:	bf14      	ite	ne
 8004480:	2301      	movne	r3, #1
 8004482:	2300      	moveq	r3, #0
 8004484:	b2db      	uxtb	r3, r3
 8004486:	2b00      	cmp	r3, #0
 8004488:	d18d      	bne.n	80043a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800448a:	2300      	movs	r3, #0
}
 800448c:	4618      	mov	r0, r3
 800448e:	3710      	adds	r7, #16
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044a0:	e02d      	b.n	80044fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044a2:	68f8      	ldr	r0, [r7, #12]
 80044a4:	f000 f878 	bl	8004598 <I2C_IsAcknowledgeFailed>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d001      	beq.n	80044b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e02d      	b.n	800450e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044b8:	d021      	beq.n	80044fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044ba:	f7fe fcd5 	bl	8002e68 <HAL_GetTick>
 80044be:	4602      	mov	r2, r0
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	68ba      	ldr	r2, [r7, #8]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d302      	bcc.n	80044d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d116      	bne.n	80044fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2220      	movs	r2, #32
 80044da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ea:	f043 0220 	orr.w	r2, r3, #32
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e007      	b.n	800450e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	695b      	ldr	r3, [r3, #20]
 8004504:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004508:	2b80      	cmp	r3, #128	; 0x80
 800450a:	d1ca      	bne.n	80044a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3710      	adds	r7, #16
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004516:	b580      	push	{r7, lr}
 8004518:	b084      	sub	sp, #16
 800451a:	af00      	add	r7, sp, #0
 800451c:	60f8      	str	r0, [r7, #12]
 800451e:	60b9      	str	r1, [r7, #8]
 8004520:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004522:	e02d      	b.n	8004580 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004524:	68f8      	ldr	r0, [r7, #12]
 8004526:	f000 f837 	bl	8004598 <I2C_IsAcknowledgeFailed>
 800452a:	4603      	mov	r3, r0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d001      	beq.n	8004534 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e02d      	b.n	8004590 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800453a:	d021      	beq.n	8004580 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800453c:	f7fe fc94 	bl	8002e68 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	68ba      	ldr	r2, [r7, #8]
 8004548:	429a      	cmp	r2, r3
 800454a:	d302      	bcc.n	8004552 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d116      	bne.n	8004580 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2200      	movs	r2, #0
 8004556:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2220      	movs	r2, #32
 800455c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456c:	f043 0220 	orr.w	r2, r3, #32
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2200      	movs	r2, #0
 8004578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e007      	b.n	8004590 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	f003 0304 	and.w	r3, r3, #4
 800458a:	2b04      	cmp	r3, #4
 800458c:	d1ca      	bne.n	8004524 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800458e:	2300      	movs	r3, #0
}
 8004590:	4618      	mov	r0, r3
 8004592:	3710      	adds	r7, #16
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	695b      	ldr	r3, [r3, #20]
 80045a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045ae:	d11b      	bne.n	80045e8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80045b8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2220      	movs	r2, #32
 80045c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d4:	f043 0204 	orr.w	r2, r3, #4
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e000      	b.n	80045ea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	370c      	adds	r7, #12
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr
	...

080045f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b086      	sub	sp, #24
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d101      	bne.n	800460a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e267      	b.n	8004ada <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0301 	and.w	r3, r3, #1
 8004612:	2b00      	cmp	r3, #0
 8004614:	d075      	beq.n	8004702 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004616:	4b88      	ldr	r3, [pc, #544]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f003 030c 	and.w	r3, r3, #12
 800461e:	2b04      	cmp	r3, #4
 8004620:	d00c      	beq.n	800463c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004622:	4b85      	ldr	r3, [pc, #532]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800462a:	2b08      	cmp	r3, #8
 800462c:	d112      	bne.n	8004654 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800462e:	4b82      	ldr	r3, [pc, #520]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004636:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800463a:	d10b      	bne.n	8004654 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800463c:	4b7e      	ldr	r3, [pc, #504]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d05b      	beq.n	8004700 <HAL_RCC_OscConfig+0x108>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d157      	bne.n	8004700 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e242      	b.n	8004ada <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800465c:	d106      	bne.n	800466c <HAL_RCC_OscConfig+0x74>
 800465e:	4b76      	ldr	r3, [pc, #472]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a75      	ldr	r2, [pc, #468]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 8004664:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004668:	6013      	str	r3, [r2, #0]
 800466a:	e01d      	b.n	80046a8 <HAL_RCC_OscConfig+0xb0>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004674:	d10c      	bne.n	8004690 <HAL_RCC_OscConfig+0x98>
 8004676:	4b70      	ldr	r3, [pc, #448]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a6f      	ldr	r2, [pc, #444]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 800467c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004680:	6013      	str	r3, [r2, #0]
 8004682:	4b6d      	ldr	r3, [pc, #436]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a6c      	ldr	r2, [pc, #432]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 8004688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800468c:	6013      	str	r3, [r2, #0]
 800468e:	e00b      	b.n	80046a8 <HAL_RCC_OscConfig+0xb0>
 8004690:	4b69      	ldr	r3, [pc, #420]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a68      	ldr	r2, [pc, #416]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 8004696:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800469a:	6013      	str	r3, [r2, #0]
 800469c:	4b66      	ldr	r3, [pc, #408]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a65      	ldr	r2, [pc, #404]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 80046a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d013      	beq.n	80046d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046b0:	f7fe fbda 	bl	8002e68 <HAL_GetTick>
 80046b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046b6:	e008      	b.n	80046ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046b8:	f7fe fbd6 	bl	8002e68 <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	2b64      	cmp	r3, #100	; 0x64
 80046c4:	d901      	bls.n	80046ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e207      	b.n	8004ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ca:	4b5b      	ldr	r3, [pc, #364]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d0f0      	beq.n	80046b8 <HAL_RCC_OscConfig+0xc0>
 80046d6:	e014      	b.n	8004702 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046d8:	f7fe fbc6 	bl	8002e68 <HAL_GetTick>
 80046dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046de:	e008      	b.n	80046f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046e0:	f7fe fbc2 	bl	8002e68 <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	2b64      	cmp	r3, #100	; 0x64
 80046ec:	d901      	bls.n	80046f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e1f3      	b.n	8004ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046f2:	4b51      	ldr	r3, [pc, #324]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1f0      	bne.n	80046e0 <HAL_RCC_OscConfig+0xe8>
 80046fe:	e000      	b.n	8004702 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004700:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0302 	and.w	r3, r3, #2
 800470a:	2b00      	cmp	r3, #0
 800470c:	d063      	beq.n	80047d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800470e:	4b4a      	ldr	r3, [pc, #296]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	f003 030c 	and.w	r3, r3, #12
 8004716:	2b00      	cmp	r3, #0
 8004718:	d00b      	beq.n	8004732 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800471a:	4b47      	ldr	r3, [pc, #284]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004722:	2b08      	cmp	r3, #8
 8004724:	d11c      	bne.n	8004760 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004726:	4b44      	ldr	r3, [pc, #272]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d116      	bne.n	8004760 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004732:	4b41      	ldr	r3, [pc, #260]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0302 	and.w	r3, r3, #2
 800473a:	2b00      	cmp	r3, #0
 800473c:	d005      	beq.n	800474a <HAL_RCC_OscConfig+0x152>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	2b01      	cmp	r3, #1
 8004744:	d001      	beq.n	800474a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e1c7      	b.n	8004ada <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800474a:	4b3b      	ldr	r3, [pc, #236]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	00db      	lsls	r3, r3, #3
 8004758:	4937      	ldr	r1, [pc, #220]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 800475a:	4313      	orrs	r3, r2
 800475c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800475e:	e03a      	b.n	80047d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d020      	beq.n	80047aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004768:	4b34      	ldr	r3, [pc, #208]	; (800483c <HAL_RCC_OscConfig+0x244>)
 800476a:	2201      	movs	r2, #1
 800476c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800476e:	f7fe fb7b 	bl	8002e68 <HAL_GetTick>
 8004772:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004774:	e008      	b.n	8004788 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004776:	f7fe fb77 	bl	8002e68 <HAL_GetTick>
 800477a:	4602      	mov	r2, r0
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	2b02      	cmp	r3, #2
 8004782:	d901      	bls.n	8004788 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e1a8      	b.n	8004ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004788:	4b2b      	ldr	r3, [pc, #172]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0302 	and.w	r3, r3, #2
 8004790:	2b00      	cmp	r3, #0
 8004792:	d0f0      	beq.n	8004776 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004794:	4b28      	ldr	r3, [pc, #160]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	00db      	lsls	r3, r3, #3
 80047a2:	4925      	ldr	r1, [pc, #148]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	600b      	str	r3, [r1, #0]
 80047a8:	e015      	b.n	80047d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047aa:	4b24      	ldr	r3, [pc, #144]	; (800483c <HAL_RCC_OscConfig+0x244>)
 80047ac:	2200      	movs	r2, #0
 80047ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b0:	f7fe fb5a 	bl	8002e68 <HAL_GetTick>
 80047b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047b6:	e008      	b.n	80047ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047b8:	f7fe fb56 	bl	8002e68 <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d901      	bls.n	80047ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e187      	b.n	8004ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047ca:	4b1b      	ldr	r3, [pc, #108]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d1f0      	bne.n	80047b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0308 	and.w	r3, r3, #8
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d036      	beq.n	8004850 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	695b      	ldr	r3, [r3, #20]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d016      	beq.n	8004818 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047ea:	4b15      	ldr	r3, [pc, #84]	; (8004840 <HAL_RCC_OscConfig+0x248>)
 80047ec:	2201      	movs	r2, #1
 80047ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047f0:	f7fe fb3a 	bl	8002e68 <HAL_GetTick>
 80047f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047f6:	e008      	b.n	800480a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047f8:	f7fe fb36 	bl	8002e68 <HAL_GetTick>
 80047fc:	4602      	mov	r2, r0
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	2b02      	cmp	r3, #2
 8004804:	d901      	bls.n	800480a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e167      	b.n	8004ada <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800480a:	4b0b      	ldr	r3, [pc, #44]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 800480c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800480e:	f003 0302 	and.w	r3, r3, #2
 8004812:	2b00      	cmp	r3, #0
 8004814:	d0f0      	beq.n	80047f8 <HAL_RCC_OscConfig+0x200>
 8004816:	e01b      	b.n	8004850 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004818:	4b09      	ldr	r3, [pc, #36]	; (8004840 <HAL_RCC_OscConfig+0x248>)
 800481a:	2200      	movs	r2, #0
 800481c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800481e:	f7fe fb23 	bl	8002e68 <HAL_GetTick>
 8004822:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004824:	e00e      	b.n	8004844 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004826:	f7fe fb1f 	bl	8002e68 <HAL_GetTick>
 800482a:	4602      	mov	r2, r0
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	2b02      	cmp	r3, #2
 8004832:	d907      	bls.n	8004844 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	e150      	b.n	8004ada <HAL_RCC_OscConfig+0x4e2>
 8004838:	40023800 	.word	0x40023800
 800483c:	42470000 	.word	0x42470000
 8004840:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004844:	4b88      	ldr	r3, [pc, #544]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 8004846:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004848:	f003 0302 	and.w	r3, r3, #2
 800484c:	2b00      	cmp	r3, #0
 800484e:	d1ea      	bne.n	8004826 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0304 	and.w	r3, r3, #4
 8004858:	2b00      	cmp	r3, #0
 800485a:	f000 8097 	beq.w	800498c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800485e:	2300      	movs	r3, #0
 8004860:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004862:	4b81      	ldr	r3, [pc, #516]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 8004864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d10f      	bne.n	800488e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800486e:	2300      	movs	r3, #0
 8004870:	60bb      	str	r3, [r7, #8]
 8004872:	4b7d      	ldr	r3, [pc, #500]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 8004874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004876:	4a7c      	ldr	r2, [pc, #496]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 8004878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800487c:	6413      	str	r3, [r2, #64]	; 0x40
 800487e:	4b7a      	ldr	r3, [pc, #488]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 8004880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004886:	60bb      	str	r3, [r7, #8]
 8004888:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800488a:	2301      	movs	r3, #1
 800488c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800488e:	4b77      	ldr	r3, [pc, #476]	; (8004a6c <HAL_RCC_OscConfig+0x474>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004896:	2b00      	cmp	r3, #0
 8004898:	d118      	bne.n	80048cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800489a:	4b74      	ldr	r3, [pc, #464]	; (8004a6c <HAL_RCC_OscConfig+0x474>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a73      	ldr	r2, [pc, #460]	; (8004a6c <HAL_RCC_OscConfig+0x474>)
 80048a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048a6:	f7fe fadf 	bl	8002e68 <HAL_GetTick>
 80048aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048ac:	e008      	b.n	80048c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048ae:	f7fe fadb 	bl	8002e68 <HAL_GetTick>
 80048b2:	4602      	mov	r2, r0
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d901      	bls.n	80048c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	e10c      	b.n	8004ada <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048c0:	4b6a      	ldr	r3, [pc, #424]	; (8004a6c <HAL_RCC_OscConfig+0x474>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d0f0      	beq.n	80048ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d106      	bne.n	80048e2 <HAL_RCC_OscConfig+0x2ea>
 80048d4:	4b64      	ldr	r3, [pc, #400]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 80048d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d8:	4a63      	ldr	r2, [pc, #396]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 80048da:	f043 0301 	orr.w	r3, r3, #1
 80048de:	6713      	str	r3, [r2, #112]	; 0x70
 80048e0:	e01c      	b.n	800491c <HAL_RCC_OscConfig+0x324>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	2b05      	cmp	r3, #5
 80048e8:	d10c      	bne.n	8004904 <HAL_RCC_OscConfig+0x30c>
 80048ea:	4b5f      	ldr	r3, [pc, #380]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 80048ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ee:	4a5e      	ldr	r2, [pc, #376]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 80048f0:	f043 0304 	orr.w	r3, r3, #4
 80048f4:	6713      	str	r3, [r2, #112]	; 0x70
 80048f6:	4b5c      	ldr	r3, [pc, #368]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 80048f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048fa:	4a5b      	ldr	r2, [pc, #364]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 80048fc:	f043 0301 	orr.w	r3, r3, #1
 8004900:	6713      	str	r3, [r2, #112]	; 0x70
 8004902:	e00b      	b.n	800491c <HAL_RCC_OscConfig+0x324>
 8004904:	4b58      	ldr	r3, [pc, #352]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 8004906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004908:	4a57      	ldr	r2, [pc, #348]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 800490a:	f023 0301 	bic.w	r3, r3, #1
 800490e:	6713      	str	r3, [r2, #112]	; 0x70
 8004910:	4b55      	ldr	r3, [pc, #340]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 8004912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004914:	4a54      	ldr	r2, [pc, #336]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 8004916:	f023 0304 	bic.w	r3, r3, #4
 800491a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d015      	beq.n	8004950 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004924:	f7fe faa0 	bl	8002e68 <HAL_GetTick>
 8004928:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800492a:	e00a      	b.n	8004942 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800492c:	f7fe fa9c 	bl	8002e68 <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	f241 3288 	movw	r2, #5000	; 0x1388
 800493a:	4293      	cmp	r3, r2
 800493c:	d901      	bls.n	8004942 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e0cb      	b.n	8004ada <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004942:	4b49      	ldr	r3, [pc, #292]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 8004944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004946:	f003 0302 	and.w	r3, r3, #2
 800494a:	2b00      	cmp	r3, #0
 800494c:	d0ee      	beq.n	800492c <HAL_RCC_OscConfig+0x334>
 800494e:	e014      	b.n	800497a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004950:	f7fe fa8a 	bl	8002e68 <HAL_GetTick>
 8004954:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004956:	e00a      	b.n	800496e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004958:	f7fe fa86 	bl	8002e68 <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	f241 3288 	movw	r2, #5000	; 0x1388
 8004966:	4293      	cmp	r3, r2
 8004968:	d901      	bls.n	800496e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e0b5      	b.n	8004ada <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800496e:	4b3e      	ldr	r3, [pc, #248]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 8004970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004972:	f003 0302 	and.w	r3, r3, #2
 8004976:	2b00      	cmp	r3, #0
 8004978:	d1ee      	bne.n	8004958 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800497a:	7dfb      	ldrb	r3, [r7, #23]
 800497c:	2b01      	cmp	r3, #1
 800497e:	d105      	bne.n	800498c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004980:	4b39      	ldr	r3, [pc, #228]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 8004982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004984:	4a38      	ldr	r2, [pc, #224]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 8004986:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800498a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	699b      	ldr	r3, [r3, #24]
 8004990:	2b00      	cmp	r3, #0
 8004992:	f000 80a1 	beq.w	8004ad8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004996:	4b34      	ldr	r3, [pc, #208]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	f003 030c 	and.w	r3, r3, #12
 800499e:	2b08      	cmp	r3, #8
 80049a0:	d05c      	beq.n	8004a5c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d141      	bne.n	8004a2e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049aa:	4b31      	ldr	r3, [pc, #196]	; (8004a70 <HAL_RCC_OscConfig+0x478>)
 80049ac:	2200      	movs	r2, #0
 80049ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049b0:	f7fe fa5a 	bl	8002e68 <HAL_GetTick>
 80049b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049b6:	e008      	b.n	80049ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049b8:	f7fe fa56 	bl	8002e68 <HAL_GetTick>
 80049bc:	4602      	mov	r2, r0
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d901      	bls.n	80049ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e087      	b.n	8004ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049ca:	4b27      	ldr	r3, [pc, #156]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d1f0      	bne.n	80049b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	69da      	ldr	r2, [r3, #28]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a1b      	ldr	r3, [r3, #32]
 80049de:	431a      	orrs	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e4:	019b      	lsls	r3, r3, #6
 80049e6:	431a      	orrs	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ec:	085b      	lsrs	r3, r3, #1
 80049ee:	3b01      	subs	r3, #1
 80049f0:	041b      	lsls	r3, r3, #16
 80049f2:	431a      	orrs	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f8:	061b      	lsls	r3, r3, #24
 80049fa:	491b      	ldr	r1, [pc, #108]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 80049fc:	4313      	orrs	r3, r2
 80049fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a00:	4b1b      	ldr	r3, [pc, #108]	; (8004a70 <HAL_RCC_OscConfig+0x478>)
 8004a02:	2201      	movs	r2, #1
 8004a04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a06:	f7fe fa2f 	bl	8002e68 <HAL_GetTick>
 8004a0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a0c:	e008      	b.n	8004a20 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a0e:	f7fe fa2b 	bl	8002e68 <HAL_GetTick>
 8004a12:	4602      	mov	r2, r0
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	1ad3      	subs	r3, r2, r3
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	d901      	bls.n	8004a20 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e05c      	b.n	8004ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a20:	4b11      	ldr	r3, [pc, #68]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d0f0      	beq.n	8004a0e <HAL_RCC_OscConfig+0x416>
 8004a2c:	e054      	b.n	8004ad8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a2e:	4b10      	ldr	r3, [pc, #64]	; (8004a70 <HAL_RCC_OscConfig+0x478>)
 8004a30:	2200      	movs	r2, #0
 8004a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a34:	f7fe fa18 	bl	8002e68 <HAL_GetTick>
 8004a38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a3a:	e008      	b.n	8004a4e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a3c:	f7fe fa14 	bl	8002e68 <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d901      	bls.n	8004a4e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	e045      	b.n	8004ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a4e:	4b06      	ldr	r3, [pc, #24]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d1f0      	bne.n	8004a3c <HAL_RCC_OscConfig+0x444>
 8004a5a:	e03d      	b.n	8004ad8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	699b      	ldr	r3, [r3, #24]
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d107      	bne.n	8004a74 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e038      	b.n	8004ada <HAL_RCC_OscConfig+0x4e2>
 8004a68:	40023800 	.word	0x40023800
 8004a6c:	40007000 	.word	0x40007000
 8004a70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a74:	4b1b      	ldr	r3, [pc, #108]	; (8004ae4 <HAL_RCC_OscConfig+0x4ec>)
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d028      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d121      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d11a      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a9e:	68fa      	ldr	r2, [r7, #12]
 8004aa0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004aaa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d111      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aba:	085b      	lsrs	r3, r3, #1
 8004abc:	3b01      	subs	r3, #1
 8004abe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d107      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ace:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d001      	beq.n	8004ad8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e000      	b.n	8004ada <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3718      	adds	r7, #24
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	40023800 	.word	0x40023800

08004ae8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d101      	bne.n	8004afc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e0cc      	b.n	8004c96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004afc:	4b68      	ldr	r3, [pc, #416]	; (8004ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0307 	and.w	r3, r3, #7
 8004b04:	683a      	ldr	r2, [r7, #0]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d90c      	bls.n	8004b24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b0a:	4b65      	ldr	r3, [pc, #404]	; (8004ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b0c:	683a      	ldr	r2, [r7, #0]
 8004b0e:	b2d2      	uxtb	r2, r2
 8004b10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b12:	4b63      	ldr	r3, [pc, #396]	; (8004ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0307 	and.w	r3, r3, #7
 8004b1a:	683a      	ldr	r2, [r7, #0]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d001      	beq.n	8004b24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e0b8      	b.n	8004c96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0302 	and.w	r3, r3, #2
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d020      	beq.n	8004b72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 0304 	and.w	r3, r3, #4
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d005      	beq.n	8004b48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b3c:	4b59      	ldr	r3, [pc, #356]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	4a58      	ldr	r2, [pc, #352]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0308 	and.w	r3, r3, #8
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d005      	beq.n	8004b60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b54:	4b53      	ldr	r3, [pc, #332]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	4a52      	ldr	r2, [pc, #328]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b60:	4b50      	ldr	r3, [pc, #320]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	494d      	ldr	r1, [pc, #308]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0301 	and.w	r3, r3, #1
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d044      	beq.n	8004c08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d107      	bne.n	8004b96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b86:	4b47      	ldr	r3, [pc, #284]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d119      	bne.n	8004bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e07f      	b.n	8004c96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d003      	beq.n	8004ba6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ba2:	2b03      	cmp	r3, #3
 8004ba4:	d107      	bne.n	8004bb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ba6:	4b3f      	ldr	r3, [pc, #252]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d109      	bne.n	8004bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e06f      	b.n	8004c96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bb6:	4b3b      	ldr	r3, [pc, #236]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0302 	and.w	r3, r3, #2
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d101      	bne.n	8004bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e067      	b.n	8004c96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bc6:	4b37      	ldr	r3, [pc, #220]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	f023 0203 	bic.w	r2, r3, #3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	4934      	ldr	r1, [pc, #208]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004bd8:	f7fe f946 	bl	8002e68 <HAL_GetTick>
 8004bdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bde:	e00a      	b.n	8004bf6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004be0:	f7fe f942 	bl	8002e68 <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d901      	bls.n	8004bf6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e04f      	b.n	8004c96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bf6:	4b2b      	ldr	r3, [pc, #172]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	f003 020c 	and.w	r2, r3, #12
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d1eb      	bne.n	8004be0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c08:	4b25      	ldr	r3, [pc, #148]	; (8004ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0307 	and.w	r3, r3, #7
 8004c10:	683a      	ldr	r2, [r7, #0]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d20c      	bcs.n	8004c30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c16:	4b22      	ldr	r3, [pc, #136]	; (8004ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c18:	683a      	ldr	r2, [r7, #0]
 8004c1a:	b2d2      	uxtb	r2, r2
 8004c1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c1e:	4b20      	ldr	r3, [pc, #128]	; (8004ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0307 	and.w	r3, r3, #7
 8004c26:	683a      	ldr	r2, [r7, #0]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d001      	beq.n	8004c30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e032      	b.n	8004c96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 0304 	and.w	r3, r3, #4
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d008      	beq.n	8004c4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c3c:	4b19      	ldr	r3, [pc, #100]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	4916      	ldr	r1, [pc, #88]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0308 	and.w	r3, r3, #8
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d009      	beq.n	8004c6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c5a:	4b12      	ldr	r3, [pc, #72]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	00db      	lsls	r3, r3, #3
 8004c68:	490e      	ldr	r1, [pc, #56]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c6e:	f000 f821 	bl	8004cb4 <HAL_RCC_GetSysClockFreq>
 8004c72:	4602      	mov	r2, r0
 8004c74:	4b0b      	ldr	r3, [pc, #44]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	091b      	lsrs	r3, r3, #4
 8004c7a:	f003 030f 	and.w	r3, r3, #15
 8004c7e:	490a      	ldr	r1, [pc, #40]	; (8004ca8 <HAL_RCC_ClockConfig+0x1c0>)
 8004c80:	5ccb      	ldrb	r3, [r1, r3]
 8004c82:	fa22 f303 	lsr.w	r3, r2, r3
 8004c86:	4a09      	ldr	r2, [pc, #36]	; (8004cac <HAL_RCC_ClockConfig+0x1c4>)
 8004c88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004c8a:	4b09      	ldr	r3, [pc, #36]	; (8004cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f7fe f8a6 	bl	8002de0 <HAL_InitTick>

  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3710      	adds	r7, #16
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	40023c00 	.word	0x40023c00
 8004ca4:	40023800 	.word	0x40023800
 8004ca8:	0800808c 	.word	0x0800808c
 8004cac:	20000008 	.word	0x20000008
 8004cb0:	2000000c 	.word	0x2000000c

08004cb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cb8:	b094      	sub	sp, #80	; 0x50
 8004cba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	647b      	str	r3, [r7, #68]	; 0x44
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ccc:	4b79      	ldr	r3, [pc, #484]	; (8004eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	f003 030c 	and.w	r3, r3, #12
 8004cd4:	2b08      	cmp	r3, #8
 8004cd6:	d00d      	beq.n	8004cf4 <HAL_RCC_GetSysClockFreq+0x40>
 8004cd8:	2b08      	cmp	r3, #8
 8004cda:	f200 80e1 	bhi.w	8004ea0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d002      	beq.n	8004ce8 <HAL_RCC_GetSysClockFreq+0x34>
 8004ce2:	2b04      	cmp	r3, #4
 8004ce4:	d003      	beq.n	8004cee <HAL_RCC_GetSysClockFreq+0x3a>
 8004ce6:	e0db      	b.n	8004ea0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ce8:	4b73      	ldr	r3, [pc, #460]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004cea:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004cec:	e0db      	b.n	8004ea6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004cee:	4b73      	ldr	r3, [pc, #460]	; (8004ebc <HAL_RCC_GetSysClockFreq+0x208>)
 8004cf0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004cf2:	e0d8      	b.n	8004ea6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004cf4:	4b6f      	ldr	r3, [pc, #444]	; (8004eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cfc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004cfe:	4b6d      	ldr	r3, [pc, #436]	; (8004eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d063      	beq.n	8004dd2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d0a:	4b6a      	ldr	r3, [pc, #424]	; (8004eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	099b      	lsrs	r3, r3, #6
 8004d10:	2200      	movs	r2, #0
 8004d12:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d14:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d1c:	633b      	str	r3, [r7, #48]	; 0x30
 8004d1e:	2300      	movs	r3, #0
 8004d20:	637b      	str	r3, [r7, #52]	; 0x34
 8004d22:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004d26:	4622      	mov	r2, r4
 8004d28:	462b      	mov	r3, r5
 8004d2a:	f04f 0000 	mov.w	r0, #0
 8004d2e:	f04f 0100 	mov.w	r1, #0
 8004d32:	0159      	lsls	r1, r3, #5
 8004d34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d38:	0150      	lsls	r0, r2, #5
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	4621      	mov	r1, r4
 8004d40:	1a51      	subs	r1, r2, r1
 8004d42:	6139      	str	r1, [r7, #16]
 8004d44:	4629      	mov	r1, r5
 8004d46:	eb63 0301 	sbc.w	r3, r3, r1
 8004d4a:	617b      	str	r3, [r7, #20]
 8004d4c:	f04f 0200 	mov.w	r2, #0
 8004d50:	f04f 0300 	mov.w	r3, #0
 8004d54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d58:	4659      	mov	r1, fp
 8004d5a:	018b      	lsls	r3, r1, #6
 8004d5c:	4651      	mov	r1, sl
 8004d5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d62:	4651      	mov	r1, sl
 8004d64:	018a      	lsls	r2, r1, #6
 8004d66:	4651      	mov	r1, sl
 8004d68:	ebb2 0801 	subs.w	r8, r2, r1
 8004d6c:	4659      	mov	r1, fp
 8004d6e:	eb63 0901 	sbc.w	r9, r3, r1
 8004d72:	f04f 0200 	mov.w	r2, #0
 8004d76:	f04f 0300 	mov.w	r3, #0
 8004d7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d86:	4690      	mov	r8, r2
 8004d88:	4699      	mov	r9, r3
 8004d8a:	4623      	mov	r3, r4
 8004d8c:	eb18 0303 	adds.w	r3, r8, r3
 8004d90:	60bb      	str	r3, [r7, #8]
 8004d92:	462b      	mov	r3, r5
 8004d94:	eb49 0303 	adc.w	r3, r9, r3
 8004d98:	60fb      	str	r3, [r7, #12]
 8004d9a:	f04f 0200 	mov.w	r2, #0
 8004d9e:	f04f 0300 	mov.w	r3, #0
 8004da2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004da6:	4629      	mov	r1, r5
 8004da8:	024b      	lsls	r3, r1, #9
 8004daa:	4621      	mov	r1, r4
 8004dac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004db0:	4621      	mov	r1, r4
 8004db2:	024a      	lsls	r2, r1, #9
 8004db4:	4610      	mov	r0, r2
 8004db6:	4619      	mov	r1, r3
 8004db8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dba:	2200      	movs	r2, #0
 8004dbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004dc0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004dc4:	f7fb fea2 	bl	8000b0c <__aeabi_uldivmod>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	460b      	mov	r3, r1
 8004dcc:	4613      	mov	r3, r2
 8004dce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004dd0:	e058      	b.n	8004e84 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dd2:	4b38      	ldr	r3, [pc, #224]	; (8004eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	099b      	lsrs	r3, r3, #6
 8004dd8:	2200      	movs	r2, #0
 8004dda:	4618      	mov	r0, r3
 8004ddc:	4611      	mov	r1, r2
 8004dde:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004de2:	623b      	str	r3, [r7, #32]
 8004de4:	2300      	movs	r3, #0
 8004de6:	627b      	str	r3, [r7, #36]	; 0x24
 8004de8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004dec:	4642      	mov	r2, r8
 8004dee:	464b      	mov	r3, r9
 8004df0:	f04f 0000 	mov.w	r0, #0
 8004df4:	f04f 0100 	mov.w	r1, #0
 8004df8:	0159      	lsls	r1, r3, #5
 8004dfa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004dfe:	0150      	lsls	r0, r2, #5
 8004e00:	4602      	mov	r2, r0
 8004e02:	460b      	mov	r3, r1
 8004e04:	4641      	mov	r1, r8
 8004e06:	ebb2 0a01 	subs.w	sl, r2, r1
 8004e0a:	4649      	mov	r1, r9
 8004e0c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004e10:	f04f 0200 	mov.w	r2, #0
 8004e14:	f04f 0300 	mov.w	r3, #0
 8004e18:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004e1c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004e20:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004e24:	ebb2 040a 	subs.w	r4, r2, sl
 8004e28:	eb63 050b 	sbc.w	r5, r3, fp
 8004e2c:	f04f 0200 	mov.w	r2, #0
 8004e30:	f04f 0300 	mov.w	r3, #0
 8004e34:	00eb      	lsls	r3, r5, #3
 8004e36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e3a:	00e2      	lsls	r2, r4, #3
 8004e3c:	4614      	mov	r4, r2
 8004e3e:	461d      	mov	r5, r3
 8004e40:	4643      	mov	r3, r8
 8004e42:	18e3      	adds	r3, r4, r3
 8004e44:	603b      	str	r3, [r7, #0]
 8004e46:	464b      	mov	r3, r9
 8004e48:	eb45 0303 	adc.w	r3, r5, r3
 8004e4c:	607b      	str	r3, [r7, #4]
 8004e4e:	f04f 0200 	mov.w	r2, #0
 8004e52:	f04f 0300 	mov.w	r3, #0
 8004e56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e5a:	4629      	mov	r1, r5
 8004e5c:	028b      	lsls	r3, r1, #10
 8004e5e:	4621      	mov	r1, r4
 8004e60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e64:	4621      	mov	r1, r4
 8004e66:	028a      	lsls	r2, r1, #10
 8004e68:	4610      	mov	r0, r2
 8004e6a:	4619      	mov	r1, r3
 8004e6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e6e:	2200      	movs	r2, #0
 8004e70:	61bb      	str	r3, [r7, #24]
 8004e72:	61fa      	str	r2, [r7, #28]
 8004e74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e78:	f7fb fe48 	bl	8000b0c <__aeabi_uldivmod>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	460b      	mov	r3, r1
 8004e80:	4613      	mov	r3, r2
 8004e82:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004e84:	4b0b      	ldr	r3, [pc, #44]	; (8004eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	0c1b      	lsrs	r3, r3, #16
 8004e8a:	f003 0303 	and.w	r3, r3, #3
 8004e8e:	3301      	adds	r3, #1
 8004e90:	005b      	lsls	r3, r3, #1
 8004e92:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004e94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e9c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e9e:	e002      	b.n	8004ea6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ea0:	4b05      	ldr	r3, [pc, #20]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004ea2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004ea4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ea6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3750      	adds	r7, #80	; 0x50
 8004eac:	46bd      	mov	sp, r7
 8004eae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004eb2:	bf00      	nop
 8004eb4:	40023800 	.word	0x40023800
 8004eb8:	00f42400 	.word	0x00f42400
 8004ebc:	007a1200 	.word	0x007a1200

08004ec0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ec4:	4b03      	ldr	r3, [pc, #12]	; (8004ed4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr
 8004ed2:	bf00      	nop
 8004ed4:	20000008 	.word	0x20000008

08004ed8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004edc:	f7ff fff0 	bl	8004ec0 <HAL_RCC_GetHCLKFreq>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	4b05      	ldr	r3, [pc, #20]	; (8004ef8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	0a9b      	lsrs	r3, r3, #10
 8004ee8:	f003 0307 	and.w	r3, r3, #7
 8004eec:	4903      	ldr	r1, [pc, #12]	; (8004efc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004eee:	5ccb      	ldrb	r3, [r1, r3]
 8004ef0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	40023800 	.word	0x40023800
 8004efc:	0800809c 	.word	0x0800809c

08004f00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004f04:	f7ff ffdc 	bl	8004ec0 <HAL_RCC_GetHCLKFreq>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	4b05      	ldr	r3, [pc, #20]	; (8004f20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	0b5b      	lsrs	r3, r3, #13
 8004f10:	f003 0307 	and.w	r3, r3, #7
 8004f14:	4903      	ldr	r1, [pc, #12]	; (8004f24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f16:	5ccb      	ldrb	r3, [r1, r3]
 8004f18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	40023800 	.word	0x40023800
 8004f24:	0800809c 	.word	0x0800809c

08004f28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d101      	bne.n	8004f3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e041      	b.n	8004fbe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d106      	bne.n	8004f54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f7fd fd84 	bl	8002a5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2202      	movs	r2, #2
 8004f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	3304      	adds	r3, #4
 8004f64:	4619      	mov	r1, r3
 8004f66:	4610      	mov	r0, r2
 8004f68:	f000 fae2 	bl	8005530 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3708      	adds	r7, #8
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
	...

08004fc8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b085      	sub	sp, #20
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d001      	beq.n	8004fe0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e03c      	b.n	800505a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2202      	movs	r2, #2
 8004fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a1e      	ldr	r2, [pc, #120]	; (8005068 <HAL_TIM_Base_Start+0xa0>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d018      	beq.n	8005024 <HAL_TIM_Base_Start+0x5c>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ffa:	d013      	beq.n	8005024 <HAL_TIM_Base_Start+0x5c>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a1a      	ldr	r2, [pc, #104]	; (800506c <HAL_TIM_Base_Start+0xa4>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d00e      	beq.n	8005024 <HAL_TIM_Base_Start+0x5c>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a19      	ldr	r2, [pc, #100]	; (8005070 <HAL_TIM_Base_Start+0xa8>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d009      	beq.n	8005024 <HAL_TIM_Base_Start+0x5c>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a17      	ldr	r2, [pc, #92]	; (8005074 <HAL_TIM_Base_Start+0xac>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d004      	beq.n	8005024 <HAL_TIM_Base_Start+0x5c>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a16      	ldr	r2, [pc, #88]	; (8005078 <HAL_TIM_Base_Start+0xb0>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d111      	bne.n	8005048 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	f003 0307 	and.w	r3, r3, #7
 800502e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2b06      	cmp	r3, #6
 8005034:	d010      	beq.n	8005058 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f042 0201 	orr.w	r2, r2, #1
 8005044:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005046:	e007      	b.n	8005058 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f042 0201 	orr.w	r2, r2, #1
 8005056:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005058:	2300      	movs	r3, #0
}
 800505a:	4618      	mov	r0, r3
 800505c:	3714      	adds	r7, #20
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr
 8005066:	bf00      	nop
 8005068:	40010000 	.word	0x40010000
 800506c:	40000400 	.word	0x40000400
 8005070:	40000800 	.word	0x40000800
 8005074:	40000c00 	.word	0x40000c00
 8005078:	40014000 	.word	0x40014000

0800507c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800507c:	b480      	push	{r7}
 800507e:	b085      	sub	sp, #20
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800508a:	b2db      	uxtb	r3, r3
 800508c:	2b01      	cmp	r3, #1
 800508e:	d001      	beq.n	8005094 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	e044      	b.n	800511e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2202      	movs	r2, #2
 8005098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68da      	ldr	r2, [r3, #12]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f042 0201 	orr.w	r2, r2, #1
 80050aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a1e      	ldr	r2, [pc, #120]	; (800512c <HAL_TIM_Base_Start_IT+0xb0>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d018      	beq.n	80050e8 <HAL_TIM_Base_Start_IT+0x6c>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050be:	d013      	beq.n	80050e8 <HAL_TIM_Base_Start_IT+0x6c>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a1a      	ldr	r2, [pc, #104]	; (8005130 <HAL_TIM_Base_Start_IT+0xb4>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d00e      	beq.n	80050e8 <HAL_TIM_Base_Start_IT+0x6c>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a19      	ldr	r2, [pc, #100]	; (8005134 <HAL_TIM_Base_Start_IT+0xb8>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d009      	beq.n	80050e8 <HAL_TIM_Base_Start_IT+0x6c>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a17      	ldr	r2, [pc, #92]	; (8005138 <HAL_TIM_Base_Start_IT+0xbc>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d004      	beq.n	80050e8 <HAL_TIM_Base_Start_IT+0x6c>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a16      	ldr	r2, [pc, #88]	; (800513c <HAL_TIM_Base_Start_IT+0xc0>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d111      	bne.n	800510c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	f003 0307 	and.w	r3, r3, #7
 80050f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2b06      	cmp	r3, #6
 80050f8:	d010      	beq.n	800511c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f042 0201 	orr.w	r2, r2, #1
 8005108:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800510a:	e007      	b.n	800511c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f042 0201 	orr.w	r2, r2, #1
 800511a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	3714      	adds	r7, #20
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr
 800512a:	bf00      	nop
 800512c:	40010000 	.word	0x40010000
 8005130:	40000400 	.word	0x40000400
 8005134:	40000800 	.word	0x40000800
 8005138:	40000c00 	.word	0x40000c00
 800513c:	40014000 	.word	0x40014000

08005140 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b082      	sub	sp, #8
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	f003 0302 	and.w	r3, r3, #2
 8005152:	2b02      	cmp	r3, #2
 8005154:	d122      	bne.n	800519c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	f003 0302 	and.w	r3, r3, #2
 8005160:	2b02      	cmp	r3, #2
 8005162:	d11b      	bne.n	800519c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f06f 0202 	mvn.w	r2, #2
 800516c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2201      	movs	r2, #1
 8005172:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	699b      	ldr	r3, [r3, #24]
 800517a:	f003 0303 	and.w	r3, r3, #3
 800517e:	2b00      	cmp	r3, #0
 8005180:	d003      	beq.n	800518a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 f9b5 	bl	80054f2 <HAL_TIM_IC_CaptureCallback>
 8005188:	e005      	b.n	8005196 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 f9a7 	bl	80054de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f000 f9b8 	bl	8005506 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	f003 0304 	and.w	r3, r3, #4
 80051a6:	2b04      	cmp	r3, #4
 80051a8:	d122      	bne.n	80051f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	f003 0304 	and.w	r3, r3, #4
 80051b4:	2b04      	cmp	r3, #4
 80051b6:	d11b      	bne.n	80051f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f06f 0204 	mvn.w	r2, #4
 80051c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2202      	movs	r2, #2
 80051c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	699b      	ldr	r3, [r3, #24]
 80051ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d003      	beq.n	80051de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 f98b 	bl	80054f2 <HAL_TIM_IC_CaptureCallback>
 80051dc:	e005      	b.n	80051ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 f97d 	bl	80054de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f000 f98e 	bl	8005506 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	f003 0308 	and.w	r3, r3, #8
 80051fa:	2b08      	cmp	r3, #8
 80051fc:	d122      	bne.n	8005244 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	f003 0308 	and.w	r3, r3, #8
 8005208:	2b08      	cmp	r3, #8
 800520a:	d11b      	bne.n	8005244 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f06f 0208 	mvn.w	r2, #8
 8005214:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2204      	movs	r2, #4
 800521a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	69db      	ldr	r3, [r3, #28]
 8005222:	f003 0303 	and.w	r3, r3, #3
 8005226:	2b00      	cmp	r3, #0
 8005228:	d003      	beq.n	8005232 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 f961 	bl	80054f2 <HAL_TIM_IC_CaptureCallback>
 8005230:	e005      	b.n	800523e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 f953 	bl	80054de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f000 f964 	bl	8005506 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	f003 0310 	and.w	r3, r3, #16
 800524e:	2b10      	cmp	r3, #16
 8005250:	d122      	bne.n	8005298 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	f003 0310 	and.w	r3, r3, #16
 800525c:	2b10      	cmp	r3, #16
 800525e:	d11b      	bne.n	8005298 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f06f 0210 	mvn.w	r2, #16
 8005268:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2208      	movs	r2, #8
 800526e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	69db      	ldr	r3, [r3, #28]
 8005276:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800527a:	2b00      	cmp	r3, #0
 800527c:	d003      	beq.n	8005286 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 f937 	bl	80054f2 <HAL_TIM_IC_CaptureCallback>
 8005284:	e005      	b.n	8005292 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 f929 	bl	80054de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 f93a 	bl	8005506 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	f003 0301 	and.w	r3, r3, #1
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d10e      	bne.n	80052c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	f003 0301 	and.w	r3, r3, #1
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d107      	bne.n	80052c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f06f 0201 	mvn.w	r2, #1
 80052bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f7fc fd16 	bl	8001cf0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052ce:	2b80      	cmp	r3, #128	; 0x80
 80052d0:	d10e      	bne.n	80052f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052dc:	2b80      	cmp	r3, #128	; 0x80
 80052de:	d107      	bne.n	80052f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80052e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 fab2 	bl	8005854 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052fa:	2b40      	cmp	r3, #64	; 0x40
 80052fc:	d10e      	bne.n	800531c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005308:	2b40      	cmp	r3, #64	; 0x40
 800530a:	d107      	bne.n	800531c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005314:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 f8ff 	bl	800551a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	f003 0320 	and.w	r3, r3, #32
 8005326:	2b20      	cmp	r3, #32
 8005328:	d10e      	bne.n	8005348 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	f003 0320 	and.w	r3, r3, #32
 8005334:	2b20      	cmp	r3, #32
 8005336:	d107      	bne.n	8005348 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f06f 0220 	mvn.w	r2, #32
 8005340:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f000 fa7c 	bl	8005840 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005348:	bf00      	nop
 800534a:	3708      	adds	r7, #8
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800535a:	2300      	movs	r3, #0
 800535c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005364:	2b01      	cmp	r3, #1
 8005366:	d101      	bne.n	800536c <HAL_TIM_ConfigClockSource+0x1c>
 8005368:	2302      	movs	r3, #2
 800536a:	e0b4      	b.n	80054d6 <HAL_TIM_ConfigClockSource+0x186>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2202      	movs	r2, #2
 8005378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800538a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005392:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	68ba      	ldr	r2, [r7, #8]
 800539a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053a4:	d03e      	beq.n	8005424 <HAL_TIM_ConfigClockSource+0xd4>
 80053a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053aa:	f200 8087 	bhi.w	80054bc <HAL_TIM_ConfigClockSource+0x16c>
 80053ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053b2:	f000 8086 	beq.w	80054c2 <HAL_TIM_ConfigClockSource+0x172>
 80053b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053ba:	d87f      	bhi.n	80054bc <HAL_TIM_ConfigClockSource+0x16c>
 80053bc:	2b70      	cmp	r3, #112	; 0x70
 80053be:	d01a      	beq.n	80053f6 <HAL_TIM_ConfigClockSource+0xa6>
 80053c0:	2b70      	cmp	r3, #112	; 0x70
 80053c2:	d87b      	bhi.n	80054bc <HAL_TIM_ConfigClockSource+0x16c>
 80053c4:	2b60      	cmp	r3, #96	; 0x60
 80053c6:	d050      	beq.n	800546a <HAL_TIM_ConfigClockSource+0x11a>
 80053c8:	2b60      	cmp	r3, #96	; 0x60
 80053ca:	d877      	bhi.n	80054bc <HAL_TIM_ConfigClockSource+0x16c>
 80053cc:	2b50      	cmp	r3, #80	; 0x50
 80053ce:	d03c      	beq.n	800544a <HAL_TIM_ConfigClockSource+0xfa>
 80053d0:	2b50      	cmp	r3, #80	; 0x50
 80053d2:	d873      	bhi.n	80054bc <HAL_TIM_ConfigClockSource+0x16c>
 80053d4:	2b40      	cmp	r3, #64	; 0x40
 80053d6:	d058      	beq.n	800548a <HAL_TIM_ConfigClockSource+0x13a>
 80053d8:	2b40      	cmp	r3, #64	; 0x40
 80053da:	d86f      	bhi.n	80054bc <HAL_TIM_ConfigClockSource+0x16c>
 80053dc:	2b30      	cmp	r3, #48	; 0x30
 80053de:	d064      	beq.n	80054aa <HAL_TIM_ConfigClockSource+0x15a>
 80053e0:	2b30      	cmp	r3, #48	; 0x30
 80053e2:	d86b      	bhi.n	80054bc <HAL_TIM_ConfigClockSource+0x16c>
 80053e4:	2b20      	cmp	r3, #32
 80053e6:	d060      	beq.n	80054aa <HAL_TIM_ConfigClockSource+0x15a>
 80053e8:	2b20      	cmp	r3, #32
 80053ea:	d867      	bhi.n	80054bc <HAL_TIM_ConfigClockSource+0x16c>
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d05c      	beq.n	80054aa <HAL_TIM_ConfigClockSource+0x15a>
 80053f0:	2b10      	cmp	r3, #16
 80053f2:	d05a      	beq.n	80054aa <HAL_TIM_ConfigClockSource+0x15a>
 80053f4:	e062      	b.n	80054bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6818      	ldr	r0, [r3, #0]
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	6899      	ldr	r1, [r3, #8]
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	685a      	ldr	r2, [r3, #4]
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	f000 f98d 	bl	8005724 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005418:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68ba      	ldr	r2, [r7, #8]
 8005420:	609a      	str	r2, [r3, #8]
      break;
 8005422:	e04f      	b.n	80054c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6818      	ldr	r0, [r3, #0]
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	6899      	ldr	r1, [r3, #8]
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	685a      	ldr	r2, [r3, #4]
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	f000 f976 	bl	8005724 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	689a      	ldr	r2, [r3, #8]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005446:	609a      	str	r2, [r3, #8]
      break;
 8005448:	e03c      	b.n	80054c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6818      	ldr	r0, [r3, #0]
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	6859      	ldr	r1, [r3, #4]
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	461a      	mov	r2, r3
 8005458:	f000 f8ea 	bl	8005630 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2150      	movs	r1, #80	; 0x50
 8005462:	4618      	mov	r0, r3
 8005464:	f000 f943 	bl	80056ee <TIM_ITRx_SetConfig>
      break;
 8005468:	e02c      	b.n	80054c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6818      	ldr	r0, [r3, #0]
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	6859      	ldr	r1, [r3, #4]
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	461a      	mov	r2, r3
 8005478:	f000 f909 	bl	800568e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2160      	movs	r1, #96	; 0x60
 8005482:	4618      	mov	r0, r3
 8005484:	f000 f933 	bl	80056ee <TIM_ITRx_SetConfig>
      break;
 8005488:	e01c      	b.n	80054c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6818      	ldr	r0, [r3, #0]
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	6859      	ldr	r1, [r3, #4]
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	461a      	mov	r2, r3
 8005498:	f000 f8ca 	bl	8005630 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2140      	movs	r1, #64	; 0x40
 80054a2:	4618      	mov	r0, r3
 80054a4:	f000 f923 	bl	80056ee <TIM_ITRx_SetConfig>
      break;
 80054a8:	e00c      	b.n	80054c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4619      	mov	r1, r3
 80054b4:	4610      	mov	r0, r2
 80054b6:	f000 f91a 	bl	80056ee <TIM_ITRx_SetConfig>
      break;
 80054ba:	e003      	b.n	80054c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	73fb      	strb	r3, [r7, #15]
      break;
 80054c0:	e000      	b.n	80054c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80054c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80054d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3710      	adds	r7, #16
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}

080054de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054de:	b480      	push	{r7}
 80054e0:	b083      	sub	sp, #12
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054e6:	bf00      	nop
 80054e8:	370c      	adds	r7, #12
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr

080054f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054f2:	b480      	push	{r7}
 80054f4:	b083      	sub	sp, #12
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054fa:	bf00      	nop
 80054fc:	370c      	adds	r7, #12
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr

08005506 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005506:	b480      	push	{r7}
 8005508:	b083      	sub	sp, #12
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800550e:	bf00      	nop
 8005510:	370c      	adds	r7, #12
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr

0800551a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800551a:	b480      	push	{r7}
 800551c:	b083      	sub	sp, #12
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005522:	bf00      	nop
 8005524:	370c      	adds	r7, #12
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr
	...

08005530 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005530:	b480      	push	{r7}
 8005532:	b085      	sub	sp, #20
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	4a34      	ldr	r2, [pc, #208]	; (8005614 <TIM_Base_SetConfig+0xe4>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d00f      	beq.n	8005568 <TIM_Base_SetConfig+0x38>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800554e:	d00b      	beq.n	8005568 <TIM_Base_SetConfig+0x38>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4a31      	ldr	r2, [pc, #196]	; (8005618 <TIM_Base_SetConfig+0xe8>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d007      	beq.n	8005568 <TIM_Base_SetConfig+0x38>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a30      	ldr	r2, [pc, #192]	; (800561c <TIM_Base_SetConfig+0xec>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d003      	beq.n	8005568 <TIM_Base_SetConfig+0x38>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4a2f      	ldr	r2, [pc, #188]	; (8005620 <TIM_Base_SetConfig+0xf0>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d108      	bne.n	800557a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800556e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	68fa      	ldr	r2, [r7, #12]
 8005576:	4313      	orrs	r3, r2
 8005578:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a25      	ldr	r2, [pc, #148]	; (8005614 <TIM_Base_SetConfig+0xe4>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d01b      	beq.n	80055ba <TIM_Base_SetConfig+0x8a>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005588:	d017      	beq.n	80055ba <TIM_Base_SetConfig+0x8a>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a22      	ldr	r2, [pc, #136]	; (8005618 <TIM_Base_SetConfig+0xe8>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d013      	beq.n	80055ba <TIM_Base_SetConfig+0x8a>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a21      	ldr	r2, [pc, #132]	; (800561c <TIM_Base_SetConfig+0xec>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d00f      	beq.n	80055ba <TIM_Base_SetConfig+0x8a>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a20      	ldr	r2, [pc, #128]	; (8005620 <TIM_Base_SetConfig+0xf0>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d00b      	beq.n	80055ba <TIM_Base_SetConfig+0x8a>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a1f      	ldr	r2, [pc, #124]	; (8005624 <TIM_Base_SetConfig+0xf4>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d007      	beq.n	80055ba <TIM_Base_SetConfig+0x8a>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a1e      	ldr	r2, [pc, #120]	; (8005628 <TIM_Base_SetConfig+0xf8>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d003      	beq.n	80055ba <TIM_Base_SetConfig+0x8a>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a1d      	ldr	r2, [pc, #116]	; (800562c <TIM_Base_SetConfig+0xfc>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d108      	bne.n	80055cc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	695b      	ldr	r3, [r3, #20]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	68fa      	ldr	r2, [r7, #12]
 80055de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	689a      	ldr	r2, [r3, #8]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a08      	ldr	r2, [pc, #32]	; (8005614 <TIM_Base_SetConfig+0xe4>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d103      	bne.n	8005600 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	691a      	ldr	r2, [r3, #16]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	615a      	str	r2, [r3, #20]
}
 8005606:	bf00      	nop
 8005608:	3714      	adds	r7, #20
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr
 8005612:	bf00      	nop
 8005614:	40010000 	.word	0x40010000
 8005618:	40000400 	.word	0x40000400
 800561c:	40000800 	.word	0x40000800
 8005620:	40000c00 	.word	0x40000c00
 8005624:	40014000 	.word	0x40014000
 8005628:	40014400 	.word	0x40014400
 800562c:	40014800 	.word	0x40014800

08005630 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005630:	b480      	push	{r7}
 8005632:	b087      	sub	sp, #28
 8005634:	af00      	add	r7, sp, #0
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6a1b      	ldr	r3, [r3, #32]
 8005640:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	6a1b      	ldr	r3, [r3, #32]
 8005646:	f023 0201 	bic.w	r2, r3, #1
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	699b      	ldr	r3, [r3, #24]
 8005652:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800565a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	011b      	lsls	r3, r3, #4
 8005660:	693a      	ldr	r2, [r7, #16]
 8005662:	4313      	orrs	r3, r2
 8005664:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	f023 030a 	bic.w	r3, r3, #10
 800566c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800566e:	697a      	ldr	r2, [r7, #20]
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	4313      	orrs	r3, r2
 8005674:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	693a      	ldr	r2, [r7, #16]
 800567a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	697a      	ldr	r2, [r7, #20]
 8005680:	621a      	str	r2, [r3, #32]
}
 8005682:	bf00      	nop
 8005684:	371c      	adds	r7, #28
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr

0800568e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800568e:	b480      	push	{r7}
 8005690:	b087      	sub	sp, #28
 8005692:	af00      	add	r7, sp, #0
 8005694:	60f8      	str	r0, [r7, #12]
 8005696:	60b9      	str	r1, [r7, #8]
 8005698:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	6a1b      	ldr	r3, [r3, #32]
 800569e:	f023 0210 	bic.w	r2, r3, #16
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	699b      	ldr	r3, [r3, #24]
 80056aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6a1b      	ldr	r3, [r3, #32]
 80056b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	031b      	lsls	r3, r3, #12
 80056be:	697a      	ldr	r2, [r7, #20]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80056ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	011b      	lsls	r3, r3, #4
 80056d0:	693a      	ldr	r2, [r7, #16]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	697a      	ldr	r2, [r7, #20]
 80056da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	693a      	ldr	r2, [r7, #16]
 80056e0:	621a      	str	r2, [r3, #32]
}
 80056e2:	bf00      	nop
 80056e4:	371c      	adds	r7, #28
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr

080056ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80056ee:	b480      	push	{r7}
 80056f0:	b085      	sub	sp, #20
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	6078      	str	r0, [r7, #4]
 80056f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005704:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005706:	683a      	ldr	r2, [r7, #0]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	4313      	orrs	r3, r2
 800570c:	f043 0307 	orr.w	r3, r3, #7
 8005710:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	68fa      	ldr	r2, [r7, #12]
 8005716:	609a      	str	r2, [r3, #8]
}
 8005718:	bf00      	nop
 800571a:	3714      	adds	r7, #20
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005724:	b480      	push	{r7}
 8005726:	b087      	sub	sp, #28
 8005728:	af00      	add	r7, sp, #0
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	60b9      	str	r1, [r7, #8]
 800572e:	607a      	str	r2, [r7, #4]
 8005730:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800573e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	021a      	lsls	r2, r3, #8
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	431a      	orrs	r2, r3
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	4313      	orrs	r3, r2
 800574c:	697a      	ldr	r2, [r7, #20]
 800574e:	4313      	orrs	r3, r2
 8005750:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	697a      	ldr	r2, [r7, #20]
 8005756:	609a      	str	r2, [r3, #8]
}
 8005758:	bf00      	nop
 800575a:	371c      	adds	r7, #28
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005764:	b480      	push	{r7}
 8005766:	b085      	sub	sp, #20
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005774:	2b01      	cmp	r3, #1
 8005776:	d101      	bne.n	800577c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005778:	2302      	movs	r3, #2
 800577a:	e050      	b.n	800581e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2202      	movs	r2, #2
 8005788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	68fa      	ldr	r2, [r7, #12]
 80057b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a1c      	ldr	r2, [pc, #112]	; (800582c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d018      	beq.n	80057f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057c8:	d013      	beq.n	80057f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a18      	ldr	r2, [pc, #96]	; (8005830 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d00e      	beq.n	80057f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a16      	ldr	r2, [pc, #88]	; (8005834 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d009      	beq.n	80057f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a15      	ldr	r2, [pc, #84]	; (8005838 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d004      	beq.n	80057f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a13      	ldr	r2, [pc, #76]	; (800583c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d10c      	bne.n	800580c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	68ba      	ldr	r2, [r7, #8]
 8005800:	4313      	orrs	r3, r2
 8005802:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68ba      	ldr	r2, [r7, #8]
 800580a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	3714      	adds	r7, #20
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr
 800582a:	bf00      	nop
 800582c:	40010000 	.word	0x40010000
 8005830:	40000400 	.word	0x40000400
 8005834:	40000800 	.word	0x40000800
 8005838:	40000c00 	.word	0x40000c00
 800583c:	40014000 	.word	0x40014000

08005840 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005848:	bf00      	nop
 800584a:	370c      	adds	r7, #12
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800585c:	bf00      	nop
 800585e:	370c      	adds	r7, #12
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr

08005868 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b082      	sub	sp, #8
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d101      	bne.n	800587a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e03f      	b.n	80058fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005880:	b2db      	uxtb	r3, r3
 8005882:	2b00      	cmp	r3, #0
 8005884:	d106      	bne.n	8005894 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f7fd f93e 	bl	8002b10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2224      	movs	r2, #36	; 0x24
 8005898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	68da      	ldr	r2, [r3, #12]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 fddf 	bl	8006470 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	691a      	ldr	r2, [r3, #16]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	695a      	ldr	r2, [r3, #20]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	68da      	ldr	r2, [r3, #12]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2220      	movs	r2, #32
 80058ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2220      	movs	r2, #32
 80058f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80058f8:	2300      	movs	r3, #0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3708      	adds	r7, #8
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}

08005902 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005902:	b580      	push	{r7, lr}
 8005904:	b08a      	sub	sp, #40	; 0x28
 8005906:	af02      	add	r7, sp, #8
 8005908:	60f8      	str	r0, [r7, #12]
 800590a:	60b9      	str	r1, [r7, #8]
 800590c:	603b      	str	r3, [r7, #0]
 800590e:	4613      	mov	r3, r2
 8005910:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005912:	2300      	movs	r3, #0
 8005914:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800591c:	b2db      	uxtb	r3, r3
 800591e:	2b20      	cmp	r3, #32
 8005920:	d17c      	bne.n	8005a1c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d002      	beq.n	800592e <HAL_UART_Transmit+0x2c>
 8005928:	88fb      	ldrh	r3, [r7, #6]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d101      	bne.n	8005932 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e075      	b.n	8005a1e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005938:	2b01      	cmp	r3, #1
 800593a:	d101      	bne.n	8005940 <HAL_UART_Transmit+0x3e>
 800593c:	2302      	movs	r3, #2
 800593e:	e06e      	b.n	8005a1e <HAL_UART_Transmit+0x11c>
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2200      	movs	r2, #0
 800594c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2221      	movs	r2, #33	; 0x21
 8005952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005956:	f7fd fa87 	bl	8002e68 <HAL_GetTick>
 800595a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	88fa      	ldrh	r2, [r7, #6]
 8005960:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	88fa      	ldrh	r2, [r7, #6]
 8005966:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005970:	d108      	bne.n	8005984 <HAL_UART_Transmit+0x82>
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	691b      	ldr	r3, [r3, #16]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d104      	bne.n	8005984 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800597a:	2300      	movs	r3, #0
 800597c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	61bb      	str	r3, [r7, #24]
 8005982:	e003      	b.n	800598c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005988:	2300      	movs	r3, #0
 800598a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2200      	movs	r2, #0
 8005990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005994:	e02a      	b.n	80059ec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	9300      	str	r3, [sp, #0]
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	2200      	movs	r2, #0
 800599e:	2180      	movs	r1, #128	; 0x80
 80059a0:	68f8      	ldr	r0, [r7, #12]
 80059a2:	f000 fb1f 	bl	8005fe4 <UART_WaitOnFlagUntilTimeout>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d001      	beq.n	80059b0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80059ac:	2303      	movs	r3, #3
 80059ae:	e036      	b.n	8005a1e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d10b      	bne.n	80059ce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80059b6:	69bb      	ldr	r3, [r7, #24]
 80059b8:	881b      	ldrh	r3, [r3, #0]
 80059ba:	461a      	mov	r2, r3
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80059c6:	69bb      	ldr	r3, [r7, #24]
 80059c8:	3302      	adds	r3, #2
 80059ca:	61bb      	str	r3, [r7, #24]
 80059cc:	e007      	b.n	80059de <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	781a      	ldrb	r2, [r3, #0]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80059d8:	69fb      	ldr	r3, [r7, #28]
 80059da:	3301      	adds	r3, #1
 80059dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	3b01      	subs	r3, #1
 80059e6:	b29a      	uxth	r2, r3
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d1cf      	bne.n	8005996 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	9300      	str	r3, [sp, #0]
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	2200      	movs	r2, #0
 80059fe:	2140      	movs	r1, #64	; 0x40
 8005a00:	68f8      	ldr	r0, [r7, #12]
 8005a02:	f000 faef 	bl	8005fe4 <UART_WaitOnFlagUntilTimeout>
 8005a06:	4603      	mov	r3, r0
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d001      	beq.n	8005a10 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005a0c:	2303      	movs	r3, #3
 8005a0e:	e006      	b.n	8005a1e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2220      	movs	r2, #32
 8005a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	e000      	b.n	8005a1e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005a1c:	2302      	movs	r3, #2
  }
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3720      	adds	r7, #32
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}

08005a26 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a26:	b580      	push	{r7, lr}
 8005a28:	b084      	sub	sp, #16
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	60f8      	str	r0, [r7, #12]
 8005a2e:	60b9      	str	r1, [r7, #8]
 8005a30:	4613      	mov	r3, r2
 8005a32:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	2b20      	cmp	r3, #32
 8005a3e:	d11d      	bne.n	8005a7c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d002      	beq.n	8005a4c <HAL_UART_Receive_IT+0x26>
 8005a46:	88fb      	ldrh	r3, [r7, #6]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d101      	bne.n	8005a50 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e016      	b.n	8005a7e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d101      	bne.n	8005a5e <HAL_UART_Receive_IT+0x38>
 8005a5a:	2302      	movs	r3, #2
 8005a5c:	e00f      	b.n	8005a7e <HAL_UART_Receive_IT+0x58>
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2201      	movs	r2, #1
 8005a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005a6c:	88fb      	ldrh	r3, [r7, #6]
 8005a6e:	461a      	mov	r2, r3
 8005a70:	68b9      	ldr	r1, [r7, #8]
 8005a72:	68f8      	ldr	r0, [r7, #12]
 8005a74:	f000 fb24 	bl	80060c0 <UART_Start_Receive_IT>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	e000      	b.n	8005a7e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005a7c:	2302      	movs	r3, #2
  }
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3710      	adds	r7, #16
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
	...

08005a88 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b0ba      	sub	sp, #232	; 0xe8
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	695b      	ldr	r3, [r3, #20]
 8005aaa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005aba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005abe:	f003 030f 	and.w	r3, r3, #15
 8005ac2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005ac6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d10f      	bne.n	8005aee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ad2:	f003 0320 	and.w	r3, r3, #32
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d009      	beq.n	8005aee <HAL_UART_IRQHandler+0x66>
 8005ada:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ade:	f003 0320 	and.w	r3, r3, #32
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d003      	beq.n	8005aee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 fc07 	bl	80062fa <UART_Receive_IT>
      return;
 8005aec:	e256      	b.n	8005f9c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005aee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	f000 80de 	beq.w	8005cb4 <HAL_UART_IRQHandler+0x22c>
 8005af8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005afc:	f003 0301 	and.w	r3, r3, #1
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d106      	bne.n	8005b12 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005b04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b08:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	f000 80d1 	beq.w	8005cb4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005b12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b16:	f003 0301 	and.w	r3, r3, #1
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d00b      	beq.n	8005b36 <HAL_UART_IRQHandler+0xae>
 8005b1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d005      	beq.n	8005b36 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2e:	f043 0201 	orr.w	r2, r3, #1
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b3a:	f003 0304 	and.w	r3, r3, #4
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d00b      	beq.n	8005b5a <HAL_UART_IRQHandler+0xd2>
 8005b42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b46:	f003 0301 	and.w	r3, r3, #1
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d005      	beq.n	8005b5a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b52:	f043 0202 	orr.w	r2, r3, #2
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b5e:	f003 0302 	and.w	r3, r3, #2
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d00b      	beq.n	8005b7e <HAL_UART_IRQHandler+0xf6>
 8005b66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b6a:	f003 0301 	and.w	r3, r3, #1
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d005      	beq.n	8005b7e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b76:	f043 0204 	orr.w	r2, r3, #4
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b82:	f003 0308 	and.w	r3, r3, #8
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d011      	beq.n	8005bae <HAL_UART_IRQHandler+0x126>
 8005b8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b8e:	f003 0320 	and.w	r3, r3, #32
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d105      	bne.n	8005ba2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005b96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b9a:	f003 0301 	and.w	r3, r3, #1
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d005      	beq.n	8005bae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba6:	f043 0208 	orr.w	r2, r3, #8
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	f000 81ed 	beq.w	8005f92 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005bb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bbc:	f003 0320 	and.w	r3, r3, #32
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d008      	beq.n	8005bd6 <HAL_UART_IRQHandler+0x14e>
 8005bc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bc8:	f003 0320 	and.w	r3, r3, #32
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d002      	beq.n	8005bd6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f000 fb92 	bl	80062fa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	695b      	ldr	r3, [r3, #20]
 8005bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005be0:	2b40      	cmp	r3, #64	; 0x40
 8005be2:	bf0c      	ite	eq
 8005be4:	2301      	moveq	r3, #1
 8005be6:	2300      	movne	r3, #0
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf2:	f003 0308 	and.w	r3, r3, #8
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d103      	bne.n	8005c02 <HAL_UART_IRQHandler+0x17a>
 8005bfa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d04f      	beq.n	8005ca2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 fa9a 	bl	800613c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	695b      	ldr	r3, [r3, #20]
 8005c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c12:	2b40      	cmp	r3, #64	; 0x40
 8005c14:	d141      	bne.n	8005c9a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	3314      	adds	r3, #20
 8005c1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c20:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c24:	e853 3f00 	ldrex	r3, [r3]
 8005c28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005c2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	3314      	adds	r3, #20
 8005c3e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005c42:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005c46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c4a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005c4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005c52:	e841 2300 	strex	r3, r2, [r1]
 8005c56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005c5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d1d9      	bne.n	8005c16 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d013      	beq.n	8005c92 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c6e:	4a7d      	ldr	r2, [pc, #500]	; (8005e64 <HAL_UART_IRQHandler+0x3dc>)
 8005c70:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c76:	4618      	mov	r0, r3
 8005c78:	f7fd fe65 	bl	8003946 <HAL_DMA_Abort_IT>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d016      	beq.n	8005cb0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c88:	687a      	ldr	r2, [r7, #4]
 8005c8a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005c8c:	4610      	mov	r0, r2
 8005c8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c90:	e00e      	b.n	8005cb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 f990 	bl	8005fb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c98:	e00a      	b.n	8005cb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 f98c 	bl	8005fb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ca0:	e006      	b.n	8005cb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f000 f988 	bl	8005fb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005cae:	e170      	b.n	8005f92 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cb0:	bf00      	nop
    return;
 8005cb2:	e16e      	b.n	8005f92 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	f040 814a 	bne.w	8005f52 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cc2:	f003 0310 	and.w	r3, r3, #16
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	f000 8143 	beq.w	8005f52 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005ccc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cd0:	f003 0310 	and.w	r3, r3, #16
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	f000 813c 	beq.w	8005f52 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005cda:	2300      	movs	r3, #0
 8005cdc:	60bb      	str	r3, [r7, #8]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	60bb      	str	r3, [r7, #8]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	60bb      	str	r3, [r7, #8]
 8005cee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	695b      	ldr	r3, [r3, #20]
 8005cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cfa:	2b40      	cmp	r3, #64	; 0x40
 8005cfc:	f040 80b4 	bne.w	8005e68 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005d0c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	f000 8140 	beq.w	8005f96 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005d1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	f080 8139 	bcs.w	8005f96 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005d2a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d30:	69db      	ldr	r3, [r3, #28]
 8005d32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d36:	f000 8088 	beq.w	8005e4a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	330c      	adds	r3, #12
 8005d40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005d48:	e853 3f00 	ldrex	r3, [r3]
 8005d4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005d50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	330c      	adds	r3, #12
 8005d62:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005d66:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005d6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d6e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005d72:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005d76:	e841 2300 	strex	r3, r2, [r1]
 8005d7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005d7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d1d9      	bne.n	8005d3a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	3314      	adds	r3, #20
 8005d8c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d90:	e853 3f00 	ldrex	r3, [r3]
 8005d94:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005d96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d98:	f023 0301 	bic.w	r3, r3, #1
 8005d9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	3314      	adds	r3, #20
 8005da6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005daa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005dae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005db2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005db6:	e841 2300 	strex	r3, r2, [r1]
 8005dba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005dbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d1e1      	bne.n	8005d86 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	3314      	adds	r3, #20
 8005dc8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005dcc:	e853 3f00 	ldrex	r3, [r3]
 8005dd0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005dd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005dd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	3314      	adds	r3, #20
 8005de2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005de6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005de8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005dec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005dee:	e841 2300 	strex	r3, r2, [r1]
 8005df2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005df4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d1e3      	bne.n	8005dc2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2220      	movs	r2, #32
 8005dfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	330c      	adds	r3, #12
 8005e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e12:	e853 3f00 	ldrex	r3, [r3]
 8005e16:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005e18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e1a:	f023 0310 	bic.w	r3, r3, #16
 8005e1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	330c      	adds	r3, #12
 8005e28:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005e2c:	65ba      	str	r2, [r7, #88]	; 0x58
 8005e2e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e30:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005e32:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e34:	e841 2300 	strex	r3, r2, [r1]
 8005e38:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005e3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d1e3      	bne.n	8005e08 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e44:	4618      	mov	r0, r3
 8005e46:	f7fd fd0e 	bl	8003866 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	1ad3      	subs	r3, r2, r3
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	4619      	mov	r1, r3
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f000 f8b6 	bl	8005fcc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005e60:	e099      	b.n	8005f96 <HAL_UART_IRQHandler+0x50e>
 8005e62:	bf00      	nop
 8005e64:	08006203 	.word	0x08006203
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	1ad3      	subs	r3, r2, r3
 8005e74:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	f000 808b 	beq.w	8005f9a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005e84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	f000 8086 	beq.w	8005f9a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	330c      	adds	r3, #12
 8005e94:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e98:	e853 3f00 	ldrex	r3, [r3]
 8005e9c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ea0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ea4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	330c      	adds	r3, #12
 8005eae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005eb2:	647a      	str	r2, [r7, #68]	; 0x44
 8005eb4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005eb8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005eba:	e841 2300 	strex	r3, r2, [r1]
 8005ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005ec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d1e3      	bne.n	8005e8e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	3314      	adds	r3, #20
 8005ecc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed0:	e853 3f00 	ldrex	r3, [r3]
 8005ed4:	623b      	str	r3, [r7, #32]
   return(result);
 8005ed6:	6a3b      	ldr	r3, [r7, #32]
 8005ed8:	f023 0301 	bic.w	r3, r3, #1
 8005edc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	3314      	adds	r3, #20
 8005ee6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005eea:	633a      	str	r2, [r7, #48]	; 0x30
 8005eec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ef0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ef2:	e841 2300 	strex	r3, r2, [r1]
 8005ef6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d1e3      	bne.n	8005ec6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2220      	movs	r2, #32
 8005f02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	330c      	adds	r3, #12
 8005f12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	e853 3f00 	ldrex	r3, [r3]
 8005f1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f023 0310 	bic.w	r3, r3, #16
 8005f22:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	330c      	adds	r3, #12
 8005f2c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005f30:	61fa      	str	r2, [r7, #28]
 8005f32:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f34:	69b9      	ldr	r1, [r7, #24]
 8005f36:	69fa      	ldr	r2, [r7, #28]
 8005f38:	e841 2300 	strex	r3, r2, [r1]
 8005f3c:	617b      	str	r3, [r7, #20]
   return(result);
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d1e3      	bne.n	8005f0c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005f44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005f48:	4619      	mov	r1, r3
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 f83e 	bl	8005fcc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005f50:	e023      	b.n	8005f9a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d009      	beq.n	8005f72 <HAL_UART_IRQHandler+0x4ea>
 8005f5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d003      	beq.n	8005f72 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 f95d 	bl	800622a <UART_Transmit_IT>
    return;
 8005f70:	e014      	b.n	8005f9c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005f72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d00e      	beq.n	8005f9c <HAL_UART_IRQHandler+0x514>
 8005f7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d008      	beq.n	8005f9c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 f99d 	bl	80062ca <UART_EndTransmit_IT>
    return;
 8005f90:	e004      	b.n	8005f9c <HAL_UART_IRQHandler+0x514>
    return;
 8005f92:	bf00      	nop
 8005f94:	e002      	b.n	8005f9c <HAL_UART_IRQHandler+0x514>
      return;
 8005f96:	bf00      	nop
 8005f98:	e000      	b.n	8005f9c <HAL_UART_IRQHandler+0x514>
      return;
 8005f9a:	bf00      	nop
  }
}
 8005f9c:	37e8      	adds	r7, #232	; 0xe8
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
 8005fa2:	bf00      	nop

08005fa4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005fac:	bf00      	nop
 8005fae:	370c      	adds	r7, #12
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr

08005fb8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005fc0:	bf00      	nop
 8005fc2:	370c      	adds	r7, #12
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	460b      	mov	r3, r1
 8005fd6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005fd8:	bf00      	nop
 8005fda:	370c      	adds	r7, #12
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr

08005fe4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b090      	sub	sp, #64	; 0x40
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	60b9      	str	r1, [r7, #8]
 8005fee:	603b      	str	r3, [r7, #0]
 8005ff0:	4613      	mov	r3, r2
 8005ff2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ff4:	e050      	b.n	8006098 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ff6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ffc:	d04c      	beq.n	8006098 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005ffe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006000:	2b00      	cmp	r3, #0
 8006002:	d007      	beq.n	8006014 <UART_WaitOnFlagUntilTimeout+0x30>
 8006004:	f7fc ff30 	bl	8002e68 <HAL_GetTick>
 8006008:	4602      	mov	r2, r0
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006010:	429a      	cmp	r2, r3
 8006012:	d241      	bcs.n	8006098 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	330c      	adds	r3, #12
 800601a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800601c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800601e:	e853 3f00 	ldrex	r3, [r3]
 8006022:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006026:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800602a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	330c      	adds	r3, #12
 8006032:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006034:	637a      	str	r2, [r7, #52]	; 0x34
 8006036:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006038:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800603a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800603c:	e841 2300 	strex	r3, r2, [r1]
 8006040:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006044:	2b00      	cmp	r3, #0
 8006046:	d1e5      	bne.n	8006014 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	3314      	adds	r3, #20
 800604e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	e853 3f00 	ldrex	r3, [r3]
 8006056:	613b      	str	r3, [r7, #16]
   return(result);
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	f023 0301 	bic.w	r3, r3, #1
 800605e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	3314      	adds	r3, #20
 8006066:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006068:	623a      	str	r2, [r7, #32]
 800606a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800606c:	69f9      	ldr	r1, [r7, #28]
 800606e:	6a3a      	ldr	r2, [r7, #32]
 8006070:	e841 2300 	strex	r3, r2, [r1]
 8006074:	61bb      	str	r3, [r7, #24]
   return(result);
 8006076:	69bb      	ldr	r3, [r7, #24]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d1e5      	bne.n	8006048 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2220      	movs	r2, #32
 8006080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2220      	movs	r2, #32
 8006088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2200      	movs	r2, #0
 8006090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006094:	2303      	movs	r3, #3
 8006096:	e00f      	b.n	80060b8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	4013      	ands	r3, r2
 80060a2:	68ba      	ldr	r2, [r7, #8]
 80060a4:	429a      	cmp	r2, r3
 80060a6:	bf0c      	ite	eq
 80060a8:	2301      	moveq	r3, #1
 80060aa:	2300      	movne	r3, #0
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	461a      	mov	r2, r3
 80060b0:	79fb      	ldrb	r3, [r7, #7]
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d09f      	beq.n	8005ff6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80060b6:	2300      	movs	r3, #0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3740      	adds	r7, #64	; 0x40
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}

080060c0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b085      	sub	sp, #20
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	4613      	mov	r3, r2
 80060cc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	68ba      	ldr	r2, [r7, #8]
 80060d2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	88fa      	ldrh	r2, [r7, #6]
 80060d8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	88fa      	ldrh	r2, [r7, #6]
 80060de:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2200      	movs	r2, #0
 80060e4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2222      	movs	r2, #34	; 0x22
 80060ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2200      	movs	r2, #0
 80060f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	691b      	ldr	r3, [r3, #16]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d007      	beq.n	800610e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	68da      	ldr	r2, [r3, #12]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800610c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	695a      	ldr	r2, [r3, #20]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f042 0201 	orr.w	r2, r2, #1
 800611c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	68da      	ldr	r2, [r3, #12]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f042 0220 	orr.w	r2, r2, #32
 800612c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800612e:	2300      	movs	r3, #0
}
 8006130:	4618      	mov	r0, r3
 8006132:	3714      	adds	r7, #20
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr

0800613c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800613c:	b480      	push	{r7}
 800613e:	b095      	sub	sp, #84	; 0x54
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	330c      	adds	r3, #12
 800614a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800614c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800614e:	e853 3f00 	ldrex	r3, [r3]
 8006152:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006156:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800615a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	330c      	adds	r3, #12
 8006162:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006164:	643a      	str	r2, [r7, #64]	; 0x40
 8006166:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006168:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800616a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800616c:	e841 2300 	strex	r3, r2, [r1]
 8006170:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006174:	2b00      	cmp	r3, #0
 8006176:	d1e5      	bne.n	8006144 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	3314      	adds	r3, #20
 800617e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006180:	6a3b      	ldr	r3, [r7, #32]
 8006182:	e853 3f00 	ldrex	r3, [r3]
 8006186:	61fb      	str	r3, [r7, #28]
   return(result);
 8006188:	69fb      	ldr	r3, [r7, #28]
 800618a:	f023 0301 	bic.w	r3, r3, #1
 800618e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	3314      	adds	r3, #20
 8006196:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006198:	62fa      	str	r2, [r7, #44]	; 0x2c
 800619a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800619c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800619e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061a0:	e841 2300 	strex	r3, r2, [r1]
 80061a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80061a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d1e5      	bne.n	8006178 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d119      	bne.n	80061e8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	330c      	adds	r3, #12
 80061ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	e853 3f00 	ldrex	r3, [r3]
 80061c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	f023 0310 	bic.w	r3, r3, #16
 80061ca:	647b      	str	r3, [r7, #68]	; 0x44
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	330c      	adds	r3, #12
 80061d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061d4:	61ba      	str	r2, [r7, #24]
 80061d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d8:	6979      	ldr	r1, [r7, #20]
 80061da:	69ba      	ldr	r2, [r7, #24]
 80061dc:	e841 2300 	strex	r3, r2, [r1]
 80061e0:	613b      	str	r3, [r7, #16]
   return(result);
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d1e5      	bne.n	80061b4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2220      	movs	r2, #32
 80061ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80061f6:	bf00      	nop
 80061f8:	3754      	adds	r7, #84	; 0x54
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr

08006202 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006202:	b580      	push	{r7, lr}
 8006204:	b084      	sub	sp, #16
 8006206:	af00      	add	r7, sp, #0
 8006208:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800620e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2200      	movs	r2, #0
 8006214:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2200      	movs	r2, #0
 800621a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800621c:	68f8      	ldr	r0, [r7, #12]
 800621e:	f7ff fecb 	bl	8005fb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006222:	bf00      	nop
 8006224:	3710      	adds	r7, #16
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}

0800622a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800622a:	b480      	push	{r7}
 800622c:	b085      	sub	sp, #20
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006238:	b2db      	uxtb	r3, r3
 800623a:	2b21      	cmp	r3, #33	; 0x21
 800623c:	d13e      	bne.n	80062bc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006246:	d114      	bne.n	8006272 <UART_Transmit_IT+0x48>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	691b      	ldr	r3, [r3, #16]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d110      	bne.n	8006272 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6a1b      	ldr	r3, [r3, #32]
 8006254:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	881b      	ldrh	r3, [r3, #0]
 800625a:	461a      	mov	r2, r3
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006264:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6a1b      	ldr	r3, [r3, #32]
 800626a:	1c9a      	adds	r2, r3, #2
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	621a      	str	r2, [r3, #32]
 8006270:	e008      	b.n	8006284 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6a1b      	ldr	r3, [r3, #32]
 8006276:	1c59      	adds	r1, r3, #1
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	6211      	str	r1, [r2, #32]
 800627c:	781a      	ldrb	r2, [r3, #0]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006288:	b29b      	uxth	r3, r3
 800628a:	3b01      	subs	r3, #1
 800628c:	b29b      	uxth	r3, r3
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	4619      	mov	r1, r3
 8006292:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006294:	2b00      	cmp	r3, #0
 8006296:	d10f      	bne.n	80062b8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	68da      	ldr	r2, [r3, #12]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80062a6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	68da      	ldr	r2, [r3, #12]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062b6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80062b8:	2300      	movs	r3, #0
 80062ba:	e000      	b.n	80062be <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80062bc:	2302      	movs	r3, #2
  }
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3714      	adds	r7, #20
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr

080062ca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80062ca:	b580      	push	{r7, lr}
 80062cc:	b082      	sub	sp, #8
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	68da      	ldr	r2, [r3, #12]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062e0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2220      	movs	r2, #32
 80062e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f7ff fe5a 	bl	8005fa4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80062f0:	2300      	movs	r3, #0
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3708      	adds	r7, #8
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}

080062fa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80062fa:	b580      	push	{r7, lr}
 80062fc:	b08c      	sub	sp, #48	; 0x30
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006308:	b2db      	uxtb	r3, r3
 800630a:	2b22      	cmp	r3, #34	; 0x22
 800630c:	f040 80ab 	bne.w	8006466 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006318:	d117      	bne.n	800634a <UART_Receive_IT+0x50>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d113      	bne.n	800634a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006322:	2300      	movs	r3, #0
 8006324:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800632a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	b29b      	uxth	r3, r3
 8006334:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006338:	b29a      	uxth	r2, r3
 800633a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800633c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006342:	1c9a      	adds	r2, r3, #2
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	629a      	str	r2, [r3, #40]	; 0x28
 8006348:	e026      	b.n	8006398 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800634e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006350:	2300      	movs	r3, #0
 8006352:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800635c:	d007      	beq.n	800636e <UART_Receive_IT+0x74>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d10a      	bne.n	800637c <UART_Receive_IT+0x82>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d106      	bne.n	800637c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	b2da      	uxtb	r2, r3
 8006376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006378:	701a      	strb	r2, [r3, #0]
 800637a:	e008      	b.n	800638e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	b2db      	uxtb	r3, r3
 8006384:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006388:	b2da      	uxtb	r2, r3
 800638a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800638c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006392:	1c5a      	adds	r2, r3, #1
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800639c:	b29b      	uxth	r3, r3
 800639e:	3b01      	subs	r3, #1
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	4619      	mov	r1, r3
 80063a6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d15a      	bne.n	8006462 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	68da      	ldr	r2, [r3, #12]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f022 0220 	bic.w	r2, r2, #32
 80063ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	68da      	ldr	r2, [r3, #12]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80063ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	695a      	ldr	r2, [r3, #20]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f022 0201 	bic.w	r2, r2, #1
 80063da:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2220      	movs	r2, #32
 80063e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d135      	bne.n	8006458 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2200      	movs	r2, #0
 80063f0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	330c      	adds	r3, #12
 80063f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	e853 3f00 	ldrex	r3, [r3]
 8006400:	613b      	str	r3, [r7, #16]
   return(result);
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	f023 0310 	bic.w	r3, r3, #16
 8006408:	627b      	str	r3, [r7, #36]	; 0x24
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	330c      	adds	r3, #12
 8006410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006412:	623a      	str	r2, [r7, #32]
 8006414:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006416:	69f9      	ldr	r1, [r7, #28]
 8006418:	6a3a      	ldr	r2, [r7, #32]
 800641a:	e841 2300 	strex	r3, r2, [r1]
 800641e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006420:	69bb      	ldr	r3, [r7, #24]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d1e5      	bne.n	80063f2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f003 0310 	and.w	r3, r3, #16
 8006430:	2b10      	cmp	r3, #16
 8006432:	d10a      	bne.n	800644a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006434:	2300      	movs	r3, #0
 8006436:	60fb      	str	r3, [r7, #12]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	60fb      	str	r3, [r7, #12]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	60fb      	str	r3, [r7, #12]
 8006448:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800644e:	4619      	mov	r1, r3
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f7ff fdbb 	bl	8005fcc <HAL_UARTEx_RxEventCallback>
 8006456:	e002      	b.n	800645e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f7fb fca7 	bl	8001dac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800645e:	2300      	movs	r3, #0
 8006460:	e002      	b.n	8006468 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006462:	2300      	movs	r3, #0
 8006464:	e000      	b.n	8006468 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006466:	2302      	movs	r3, #2
  }
}
 8006468:	4618      	mov	r0, r3
 800646a:	3730      	adds	r7, #48	; 0x30
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}

08006470 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006470:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006474:	b0c0      	sub	sp, #256	; 0x100
 8006476:	af00      	add	r7, sp, #0
 8006478:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800647c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	691b      	ldr	r3, [r3, #16]
 8006484:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800648c:	68d9      	ldr	r1, [r3, #12]
 800648e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	ea40 0301 	orr.w	r3, r0, r1
 8006498:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800649a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800649e:	689a      	ldr	r2, [r3, #8]
 80064a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064a4:	691b      	ldr	r3, [r3, #16]
 80064a6:	431a      	orrs	r2, r3
 80064a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064ac:	695b      	ldr	r3, [r3, #20]
 80064ae:	431a      	orrs	r2, r3
 80064b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064b4:	69db      	ldr	r3, [r3, #28]
 80064b6:	4313      	orrs	r3, r2
 80064b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80064bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80064c8:	f021 010c 	bic.w	r1, r1, #12
 80064cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80064d6:	430b      	orrs	r3, r1
 80064d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80064da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	695b      	ldr	r3, [r3, #20]
 80064e2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80064e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064ea:	6999      	ldr	r1, [r3, #24]
 80064ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064f0:	681a      	ldr	r2, [r3, #0]
 80064f2:	ea40 0301 	orr.w	r3, r0, r1
 80064f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80064f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	4b8f      	ldr	r3, [pc, #572]	; (800673c <UART_SetConfig+0x2cc>)
 8006500:	429a      	cmp	r2, r3
 8006502:	d005      	beq.n	8006510 <UART_SetConfig+0xa0>
 8006504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	4b8d      	ldr	r3, [pc, #564]	; (8006740 <UART_SetConfig+0x2d0>)
 800650c:	429a      	cmp	r2, r3
 800650e:	d104      	bne.n	800651a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006510:	f7fe fcf6 	bl	8004f00 <HAL_RCC_GetPCLK2Freq>
 8006514:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006518:	e003      	b.n	8006522 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800651a:	f7fe fcdd 	bl	8004ed8 <HAL_RCC_GetPCLK1Freq>
 800651e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006526:	69db      	ldr	r3, [r3, #28]
 8006528:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800652c:	f040 810c 	bne.w	8006748 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006530:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006534:	2200      	movs	r2, #0
 8006536:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800653a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800653e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006542:	4622      	mov	r2, r4
 8006544:	462b      	mov	r3, r5
 8006546:	1891      	adds	r1, r2, r2
 8006548:	65b9      	str	r1, [r7, #88]	; 0x58
 800654a:	415b      	adcs	r3, r3
 800654c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800654e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006552:	4621      	mov	r1, r4
 8006554:	eb12 0801 	adds.w	r8, r2, r1
 8006558:	4629      	mov	r1, r5
 800655a:	eb43 0901 	adc.w	r9, r3, r1
 800655e:	f04f 0200 	mov.w	r2, #0
 8006562:	f04f 0300 	mov.w	r3, #0
 8006566:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800656a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800656e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006572:	4690      	mov	r8, r2
 8006574:	4699      	mov	r9, r3
 8006576:	4623      	mov	r3, r4
 8006578:	eb18 0303 	adds.w	r3, r8, r3
 800657c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006580:	462b      	mov	r3, r5
 8006582:	eb49 0303 	adc.w	r3, r9, r3
 8006586:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800658a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006596:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800659a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800659e:	460b      	mov	r3, r1
 80065a0:	18db      	adds	r3, r3, r3
 80065a2:	653b      	str	r3, [r7, #80]	; 0x50
 80065a4:	4613      	mov	r3, r2
 80065a6:	eb42 0303 	adc.w	r3, r2, r3
 80065aa:	657b      	str	r3, [r7, #84]	; 0x54
 80065ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80065b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80065b4:	f7fa faaa 	bl	8000b0c <__aeabi_uldivmod>
 80065b8:	4602      	mov	r2, r0
 80065ba:	460b      	mov	r3, r1
 80065bc:	4b61      	ldr	r3, [pc, #388]	; (8006744 <UART_SetConfig+0x2d4>)
 80065be:	fba3 2302 	umull	r2, r3, r3, r2
 80065c2:	095b      	lsrs	r3, r3, #5
 80065c4:	011c      	lsls	r4, r3, #4
 80065c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065ca:	2200      	movs	r2, #0
 80065cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80065d0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80065d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80065d8:	4642      	mov	r2, r8
 80065da:	464b      	mov	r3, r9
 80065dc:	1891      	adds	r1, r2, r2
 80065de:	64b9      	str	r1, [r7, #72]	; 0x48
 80065e0:	415b      	adcs	r3, r3
 80065e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80065e8:	4641      	mov	r1, r8
 80065ea:	eb12 0a01 	adds.w	sl, r2, r1
 80065ee:	4649      	mov	r1, r9
 80065f0:	eb43 0b01 	adc.w	fp, r3, r1
 80065f4:	f04f 0200 	mov.w	r2, #0
 80065f8:	f04f 0300 	mov.w	r3, #0
 80065fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006600:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006604:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006608:	4692      	mov	sl, r2
 800660a:	469b      	mov	fp, r3
 800660c:	4643      	mov	r3, r8
 800660e:	eb1a 0303 	adds.w	r3, sl, r3
 8006612:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006616:	464b      	mov	r3, r9
 8006618:	eb4b 0303 	adc.w	r3, fp, r3
 800661c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	2200      	movs	r2, #0
 8006628:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800662c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006630:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006634:	460b      	mov	r3, r1
 8006636:	18db      	adds	r3, r3, r3
 8006638:	643b      	str	r3, [r7, #64]	; 0x40
 800663a:	4613      	mov	r3, r2
 800663c:	eb42 0303 	adc.w	r3, r2, r3
 8006640:	647b      	str	r3, [r7, #68]	; 0x44
 8006642:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006646:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800664a:	f7fa fa5f 	bl	8000b0c <__aeabi_uldivmod>
 800664e:	4602      	mov	r2, r0
 8006650:	460b      	mov	r3, r1
 8006652:	4611      	mov	r1, r2
 8006654:	4b3b      	ldr	r3, [pc, #236]	; (8006744 <UART_SetConfig+0x2d4>)
 8006656:	fba3 2301 	umull	r2, r3, r3, r1
 800665a:	095b      	lsrs	r3, r3, #5
 800665c:	2264      	movs	r2, #100	; 0x64
 800665e:	fb02 f303 	mul.w	r3, r2, r3
 8006662:	1acb      	subs	r3, r1, r3
 8006664:	00db      	lsls	r3, r3, #3
 8006666:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800666a:	4b36      	ldr	r3, [pc, #216]	; (8006744 <UART_SetConfig+0x2d4>)
 800666c:	fba3 2302 	umull	r2, r3, r3, r2
 8006670:	095b      	lsrs	r3, r3, #5
 8006672:	005b      	lsls	r3, r3, #1
 8006674:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006678:	441c      	add	r4, r3
 800667a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800667e:	2200      	movs	r2, #0
 8006680:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006684:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006688:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800668c:	4642      	mov	r2, r8
 800668e:	464b      	mov	r3, r9
 8006690:	1891      	adds	r1, r2, r2
 8006692:	63b9      	str	r1, [r7, #56]	; 0x38
 8006694:	415b      	adcs	r3, r3
 8006696:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006698:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800669c:	4641      	mov	r1, r8
 800669e:	1851      	adds	r1, r2, r1
 80066a0:	6339      	str	r1, [r7, #48]	; 0x30
 80066a2:	4649      	mov	r1, r9
 80066a4:	414b      	adcs	r3, r1
 80066a6:	637b      	str	r3, [r7, #52]	; 0x34
 80066a8:	f04f 0200 	mov.w	r2, #0
 80066ac:	f04f 0300 	mov.w	r3, #0
 80066b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80066b4:	4659      	mov	r1, fp
 80066b6:	00cb      	lsls	r3, r1, #3
 80066b8:	4651      	mov	r1, sl
 80066ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80066be:	4651      	mov	r1, sl
 80066c0:	00ca      	lsls	r2, r1, #3
 80066c2:	4610      	mov	r0, r2
 80066c4:	4619      	mov	r1, r3
 80066c6:	4603      	mov	r3, r0
 80066c8:	4642      	mov	r2, r8
 80066ca:	189b      	adds	r3, r3, r2
 80066cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80066d0:	464b      	mov	r3, r9
 80066d2:	460a      	mov	r2, r1
 80066d4:	eb42 0303 	adc.w	r3, r2, r3
 80066d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80066dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80066e8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80066ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80066f0:	460b      	mov	r3, r1
 80066f2:	18db      	adds	r3, r3, r3
 80066f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80066f6:	4613      	mov	r3, r2
 80066f8:	eb42 0303 	adc.w	r3, r2, r3
 80066fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006702:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006706:	f7fa fa01 	bl	8000b0c <__aeabi_uldivmod>
 800670a:	4602      	mov	r2, r0
 800670c:	460b      	mov	r3, r1
 800670e:	4b0d      	ldr	r3, [pc, #52]	; (8006744 <UART_SetConfig+0x2d4>)
 8006710:	fba3 1302 	umull	r1, r3, r3, r2
 8006714:	095b      	lsrs	r3, r3, #5
 8006716:	2164      	movs	r1, #100	; 0x64
 8006718:	fb01 f303 	mul.w	r3, r1, r3
 800671c:	1ad3      	subs	r3, r2, r3
 800671e:	00db      	lsls	r3, r3, #3
 8006720:	3332      	adds	r3, #50	; 0x32
 8006722:	4a08      	ldr	r2, [pc, #32]	; (8006744 <UART_SetConfig+0x2d4>)
 8006724:	fba2 2303 	umull	r2, r3, r2, r3
 8006728:	095b      	lsrs	r3, r3, #5
 800672a:	f003 0207 	and.w	r2, r3, #7
 800672e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4422      	add	r2, r4
 8006736:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006738:	e105      	b.n	8006946 <UART_SetConfig+0x4d6>
 800673a:	bf00      	nop
 800673c:	40011000 	.word	0x40011000
 8006740:	40011400 	.word	0x40011400
 8006744:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006748:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800674c:	2200      	movs	r2, #0
 800674e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006752:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006756:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800675a:	4642      	mov	r2, r8
 800675c:	464b      	mov	r3, r9
 800675e:	1891      	adds	r1, r2, r2
 8006760:	6239      	str	r1, [r7, #32]
 8006762:	415b      	adcs	r3, r3
 8006764:	627b      	str	r3, [r7, #36]	; 0x24
 8006766:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800676a:	4641      	mov	r1, r8
 800676c:	1854      	adds	r4, r2, r1
 800676e:	4649      	mov	r1, r9
 8006770:	eb43 0501 	adc.w	r5, r3, r1
 8006774:	f04f 0200 	mov.w	r2, #0
 8006778:	f04f 0300 	mov.w	r3, #0
 800677c:	00eb      	lsls	r3, r5, #3
 800677e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006782:	00e2      	lsls	r2, r4, #3
 8006784:	4614      	mov	r4, r2
 8006786:	461d      	mov	r5, r3
 8006788:	4643      	mov	r3, r8
 800678a:	18e3      	adds	r3, r4, r3
 800678c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006790:	464b      	mov	r3, r9
 8006792:	eb45 0303 	adc.w	r3, r5, r3
 8006796:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800679a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80067a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80067aa:	f04f 0200 	mov.w	r2, #0
 80067ae:	f04f 0300 	mov.w	r3, #0
 80067b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80067b6:	4629      	mov	r1, r5
 80067b8:	008b      	lsls	r3, r1, #2
 80067ba:	4621      	mov	r1, r4
 80067bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80067c0:	4621      	mov	r1, r4
 80067c2:	008a      	lsls	r2, r1, #2
 80067c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80067c8:	f7fa f9a0 	bl	8000b0c <__aeabi_uldivmod>
 80067cc:	4602      	mov	r2, r0
 80067ce:	460b      	mov	r3, r1
 80067d0:	4b60      	ldr	r3, [pc, #384]	; (8006954 <UART_SetConfig+0x4e4>)
 80067d2:	fba3 2302 	umull	r2, r3, r3, r2
 80067d6:	095b      	lsrs	r3, r3, #5
 80067d8:	011c      	lsls	r4, r3, #4
 80067da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067de:	2200      	movs	r2, #0
 80067e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80067e4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80067e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80067ec:	4642      	mov	r2, r8
 80067ee:	464b      	mov	r3, r9
 80067f0:	1891      	adds	r1, r2, r2
 80067f2:	61b9      	str	r1, [r7, #24]
 80067f4:	415b      	adcs	r3, r3
 80067f6:	61fb      	str	r3, [r7, #28]
 80067f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80067fc:	4641      	mov	r1, r8
 80067fe:	1851      	adds	r1, r2, r1
 8006800:	6139      	str	r1, [r7, #16]
 8006802:	4649      	mov	r1, r9
 8006804:	414b      	adcs	r3, r1
 8006806:	617b      	str	r3, [r7, #20]
 8006808:	f04f 0200 	mov.w	r2, #0
 800680c:	f04f 0300 	mov.w	r3, #0
 8006810:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006814:	4659      	mov	r1, fp
 8006816:	00cb      	lsls	r3, r1, #3
 8006818:	4651      	mov	r1, sl
 800681a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800681e:	4651      	mov	r1, sl
 8006820:	00ca      	lsls	r2, r1, #3
 8006822:	4610      	mov	r0, r2
 8006824:	4619      	mov	r1, r3
 8006826:	4603      	mov	r3, r0
 8006828:	4642      	mov	r2, r8
 800682a:	189b      	adds	r3, r3, r2
 800682c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006830:	464b      	mov	r3, r9
 8006832:	460a      	mov	r2, r1
 8006834:	eb42 0303 	adc.w	r3, r2, r3
 8006838:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800683c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	2200      	movs	r2, #0
 8006844:	67bb      	str	r3, [r7, #120]	; 0x78
 8006846:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006848:	f04f 0200 	mov.w	r2, #0
 800684c:	f04f 0300 	mov.w	r3, #0
 8006850:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006854:	4649      	mov	r1, r9
 8006856:	008b      	lsls	r3, r1, #2
 8006858:	4641      	mov	r1, r8
 800685a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800685e:	4641      	mov	r1, r8
 8006860:	008a      	lsls	r2, r1, #2
 8006862:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006866:	f7fa f951 	bl	8000b0c <__aeabi_uldivmod>
 800686a:	4602      	mov	r2, r0
 800686c:	460b      	mov	r3, r1
 800686e:	4b39      	ldr	r3, [pc, #228]	; (8006954 <UART_SetConfig+0x4e4>)
 8006870:	fba3 1302 	umull	r1, r3, r3, r2
 8006874:	095b      	lsrs	r3, r3, #5
 8006876:	2164      	movs	r1, #100	; 0x64
 8006878:	fb01 f303 	mul.w	r3, r1, r3
 800687c:	1ad3      	subs	r3, r2, r3
 800687e:	011b      	lsls	r3, r3, #4
 8006880:	3332      	adds	r3, #50	; 0x32
 8006882:	4a34      	ldr	r2, [pc, #208]	; (8006954 <UART_SetConfig+0x4e4>)
 8006884:	fba2 2303 	umull	r2, r3, r2, r3
 8006888:	095b      	lsrs	r3, r3, #5
 800688a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800688e:	441c      	add	r4, r3
 8006890:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006894:	2200      	movs	r2, #0
 8006896:	673b      	str	r3, [r7, #112]	; 0x70
 8006898:	677a      	str	r2, [r7, #116]	; 0x74
 800689a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800689e:	4642      	mov	r2, r8
 80068a0:	464b      	mov	r3, r9
 80068a2:	1891      	adds	r1, r2, r2
 80068a4:	60b9      	str	r1, [r7, #8]
 80068a6:	415b      	adcs	r3, r3
 80068a8:	60fb      	str	r3, [r7, #12]
 80068aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80068ae:	4641      	mov	r1, r8
 80068b0:	1851      	adds	r1, r2, r1
 80068b2:	6039      	str	r1, [r7, #0]
 80068b4:	4649      	mov	r1, r9
 80068b6:	414b      	adcs	r3, r1
 80068b8:	607b      	str	r3, [r7, #4]
 80068ba:	f04f 0200 	mov.w	r2, #0
 80068be:	f04f 0300 	mov.w	r3, #0
 80068c2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80068c6:	4659      	mov	r1, fp
 80068c8:	00cb      	lsls	r3, r1, #3
 80068ca:	4651      	mov	r1, sl
 80068cc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068d0:	4651      	mov	r1, sl
 80068d2:	00ca      	lsls	r2, r1, #3
 80068d4:	4610      	mov	r0, r2
 80068d6:	4619      	mov	r1, r3
 80068d8:	4603      	mov	r3, r0
 80068da:	4642      	mov	r2, r8
 80068dc:	189b      	adds	r3, r3, r2
 80068de:	66bb      	str	r3, [r7, #104]	; 0x68
 80068e0:	464b      	mov	r3, r9
 80068e2:	460a      	mov	r2, r1
 80068e4:	eb42 0303 	adc.w	r3, r2, r3
 80068e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80068ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	2200      	movs	r2, #0
 80068f2:	663b      	str	r3, [r7, #96]	; 0x60
 80068f4:	667a      	str	r2, [r7, #100]	; 0x64
 80068f6:	f04f 0200 	mov.w	r2, #0
 80068fa:	f04f 0300 	mov.w	r3, #0
 80068fe:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006902:	4649      	mov	r1, r9
 8006904:	008b      	lsls	r3, r1, #2
 8006906:	4641      	mov	r1, r8
 8006908:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800690c:	4641      	mov	r1, r8
 800690e:	008a      	lsls	r2, r1, #2
 8006910:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006914:	f7fa f8fa 	bl	8000b0c <__aeabi_uldivmod>
 8006918:	4602      	mov	r2, r0
 800691a:	460b      	mov	r3, r1
 800691c:	4b0d      	ldr	r3, [pc, #52]	; (8006954 <UART_SetConfig+0x4e4>)
 800691e:	fba3 1302 	umull	r1, r3, r3, r2
 8006922:	095b      	lsrs	r3, r3, #5
 8006924:	2164      	movs	r1, #100	; 0x64
 8006926:	fb01 f303 	mul.w	r3, r1, r3
 800692a:	1ad3      	subs	r3, r2, r3
 800692c:	011b      	lsls	r3, r3, #4
 800692e:	3332      	adds	r3, #50	; 0x32
 8006930:	4a08      	ldr	r2, [pc, #32]	; (8006954 <UART_SetConfig+0x4e4>)
 8006932:	fba2 2303 	umull	r2, r3, r2, r3
 8006936:	095b      	lsrs	r3, r3, #5
 8006938:	f003 020f 	and.w	r2, r3, #15
 800693c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4422      	add	r2, r4
 8006944:	609a      	str	r2, [r3, #8]
}
 8006946:	bf00      	nop
 8006948:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800694c:	46bd      	mov	sp, r7
 800694e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006952:	bf00      	nop
 8006954:	51eb851f 	.word	0x51eb851f

08006958 <__errno>:
 8006958:	4b01      	ldr	r3, [pc, #4]	; (8006960 <__errno+0x8>)
 800695a:	6818      	ldr	r0, [r3, #0]
 800695c:	4770      	bx	lr
 800695e:	bf00      	nop
 8006960:	20000014 	.word	0x20000014

08006964 <__libc_init_array>:
 8006964:	b570      	push	{r4, r5, r6, lr}
 8006966:	4d0d      	ldr	r5, [pc, #52]	; (800699c <__libc_init_array+0x38>)
 8006968:	4c0d      	ldr	r4, [pc, #52]	; (80069a0 <__libc_init_array+0x3c>)
 800696a:	1b64      	subs	r4, r4, r5
 800696c:	10a4      	asrs	r4, r4, #2
 800696e:	2600      	movs	r6, #0
 8006970:	42a6      	cmp	r6, r4
 8006972:	d109      	bne.n	8006988 <__libc_init_array+0x24>
 8006974:	4d0b      	ldr	r5, [pc, #44]	; (80069a4 <__libc_init_array+0x40>)
 8006976:	4c0c      	ldr	r4, [pc, #48]	; (80069a8 <__libc_init_array+0x44>)
 8006978:	f000 fc8e 	bl	8007298 <_init>
 800697c:	1b64      	subs	r4, r4, r5
 800697e:	10a4      	asrs	r4, r4, #2
 8006980:	2600      	movs	r6, #0
 8006982:	42a6      	cmp	r6, r4
 8006984:	d105      	bne.n	8006992 <__libc_init_array+0x2e>
 8006986:	bd70      	pop	{r4, r5, r6, pc}
 8006988:	f855 3b04 	ldr.w	r3, [r5], #4
 800698c:	4798      	blx	r3
 800698e:	3601      	adds	r6, #1
 8006990:	e7ee      	b.n	8006970 <__libc_init_array+0xc>
 8006992:	f855 3b04 	ldr.w	r3, [r5], #4
 8006996:	4798      	blx	r3
 8006998:	3601      	adds	r6, #1
 800699a:	e7f2      	b.n	8006982 <__libc_init_array+0x1e>
 800699c:	080080e0 	.word	0x080080e0
 80069a0:	080080e0 	.word	0x080080e0
 80069a4:	080080e0 	.word	0x080080e0
 80069a8:	080080e4 	.word	0x080080e4

080069ac <memset>:
 80069ac:	4402      	add	r2, r0
 80069ae:	4603      	mov	r3, r0
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d100      	bne.n	80069b6 <memset+0xa>
 80069b4:	4770      	bx	lr
 80069b6:	f803 1b01 	strb.w	r1, [r3], #1
 80069ba:	e7f9      	b.n	80069b0 <memset+0x4>

080069bc <siprintf>:
 80069bc:	b40e      	push	{r1, r2, r3}
 80069be:	b500      	push	{lr}
 80069c0:	b09c      	sub	sp, #112	; 0x70
 80069c2:	ab1d      	add	r3, sp, #116	; 0x74
 80069c4:	9002      	str	r0, [sp, #8]
 80069c6:	9006      	str	r0, [sp, #24]
 80069c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80069cc:	4809      	ldr	r0, [pc, #36]	; (80069f4 <siprintf+0x38>)
 80069ce:	9107      	str	r1, [sp, #28]
 80069d0:	9104      	str	r1, [sp, #16]
 80069d2:	4909      	ldr	r1, [pc, #36]	; (80069f8 <siprintf+0x3c>)
 80069d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80069d8:	9105      	str	r1, [sp, #20]
 80069da:	6800      	ldr	r0, [r0, #0]
 80069dc:	9301      	str	r3, [sp, #4]
 80069de:	a902      	add	r1, sp, #8
 80069e0:	f000 f868 	bl	8006ab4 <_svfiprintf_r>
 80069e4:	9b02      	ldr	r3, [sp, #8]
 80069e6:	2200      	movs	r2, #0
 80069e8:	701a      	strb	r2, [r3, #0]
 80069ea:	b01c      	add	sp, #112	; 0x70
 80069ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80069f0:	b003      	add	sp, #12
 80069f2:	4770      	bx	lr
 80069f4:	20000014 	.word	0x20000014
 80069f8:	ffff0208 	.word	0xffff0208

080069fc <__ssputs_r>:
 80069fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a00:	688e      	ldr	r6, [r1, #8]
 8006a02:	429e      	cmp	r6, r3
 8006a04:	4682      	mov	sl, r0
 8006a06:	460c      	mov	r4, r1
 8006a08:	4690      	mov	r8, r2
 8006a0a:	461f      	mov	r7, r3
 8006a0c:	d838      	bhi.n	8006a80 <__ssputs_r+0x84>
 8006a0e:	898a      	ldrh	r2, [r1, #12]
 8006a10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006a14:	d032      	beq.n	8006a7c <__ssputs_r+0x80>
 8006a16:	6825      	ldr	r5, [r4, #0]
 8006a18:	6909      	ldr	r1, [r1, #16]
 8006a1a:	eba5 0901 	sub.w	r9, r5, r1
 8006a1e:	6965      	ldr	r5, [r4, #20]
 8006a20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006a24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006a28:	3301      	adds	r3, #1
 8006a2a:	444b      	add	r3, r9
 8006a2c:	106d      	asrs	r5, r5, #1
 8006a2e:	429d      	cmp	r5, r3
 8006a30:	bf38      	it	cc
 8006a32:	461d      	movcc	r5, r3
 8006a34:	0553      	lsls	r3, r2, #21
 8006a36:	d531      	bpl.n	8006a9c <__ssputs_r+0xa0>
 8006a38:	4629      	mov	r1, r5
 8006a3a:	f000 fb63 	bl	8007104 <_malloc_r>
 8006a3e:	4606      	mov	r6, r0
 8006a40:	b950      	cbnz	r0, 8006a58 <__ssputs_r+0x5c>
 8006a42:	230c      	movs	r3, #12
 8006a44:	f8ca 3000 	str.w	r3, [sl]
 8006a48:	89a3      	ldrh	r3, [r4, #12]
 8006a4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a4e:	81a3      	strh	r3, [r4, #12]
 8006a50:	f04f 30ff 	mov.w	r0, #4294967295
 8006a54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a58:	6921      	ldr	r1, [r4, #16]
 8006a5a:	464a      	mov	r2, r9
 8006a5c:	f000 fabe 	bl	8006fdc <memcpy>
 8006a60:	89a3      	ldrh	r3, [r4, #12]
 8006a62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006a66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a6a:	81a3      	strh	r3, [r4, #12]
 8006a6c:	6126      	str	r6, [r4, #16]
 8006a6e:	6165      	str	r5, [r4, #20]
 8006a70:	444e      	add	r6, r9
 8006a72:	eba5 0509 	sub.w	r5, r5, r9
 8006a76:	6026      	str	r6, [r4, #0]
 8006a78:	60a5      	str	r5, [r4, #8]
 8006a7a:	463e      	mov	r6, r7
 8006a7c:	42be      	cmp	r6, r7
 8006a7e:	d900      	bls.n	8006a82 <__ssputs_r+0x86>
 8006a80:	463e      	mov	r6, r7
 8006a82:	6820      	ldr	r0, [r4, #0]
 8006a84:	4632      	mov	r2, r6
 8006a86:	4641      	mov	r1, r8
 8006a88:	f000 fab6 	bl	8006ff8 <memmove>
 8006a8c:	68a3      	ldr	r3, [r4, #8]
 8006a8e:	1b9b      	subs	r3, r3, r6
 8006a90:	60a3      	str	r3, [r4, #8]
 8006a92:	6823      	ldr	r3, [r4, #0]
 8006a94:	4433      	add	r3, r6
 8006a96:	6023      	str	r3, [r4, #0]
 8006a98:	2000      	movs	r0, #0
 8006a9a:	e7db      	b.n	8006a54 <__ssputs_r+0x58>
 8006a9c:	462a      	mov	r2, r5
 8006a9e:	f000 fba5 	bl	80071ec <_realloc_r>
 8006aa2:	4606      	mov	r6, r0
 8006aa4:	2800      	cmp	r0, #0
 8006aa6:	d1e1      	bne.n	8006a6c <__ssputs_r+0x70>
 8006aa8:	6921      	ldr	r1, [r4, #16]
 8006aaa:	4650      	mov	r0, sl
 8006aac:	f000 fabe 	bl	800702c <_free_r>
 8006ab0:	e7c7      	b.n	8006a42 <__ssputs_r+0x46>
	...

08006ab4 <_svfiprintf_r>:
 8006ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ab8:	4698      	mov	r8, r3
 8006aba:	898b      	ldrh	r3, [r1, #12]
 8006abc:	061b      	lsls	r3, r3, #24
 8006abe:	b09d      	sub	sp, #116	; 0x74
 8006ac0:	4607      	mov	r7, r0
 8006ac2:	460d      	mov	r5, r1
 8006ac4:	4614      	mov	r4, r2
 8006ac6:	d50e      	bpl.n	8006ae6 <_svfiprintf_r+0x32>
 8006ac8:	690b      	ldr	r3, [r1, #16]
 8006aca:	b963      	cbnz	r3, 8006ae6 <_svfiprintf_r+0x32>
 8006acc:	2140      	movs	r1, #64	; 0x40
 8006ace:	f000 fb19 	bl	8007104 <_malloc_r>
 8006ad2:	6028      	str	r0, [r5, #0]
 8006ad4:	6128      	str	r0, [r5, #16]
 8006ad6:	b920      	cbnz	r0, 8006ae2 <_svfiprintf_r+0x2e>
 8006ad8:	230c      	movs	r3, #12
 8006ada:	603b      	str	r3, [r7, #0]
 8006adc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ae0:	e0d1      	b.n	8006c86 <_svfiprintf_r+0x1d2>
 8006ae2:	2340      	movs	r3, #64	; 0x40
 8006ae4:	616b      	str	r3, [r5, #20]
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	9309      	str	r3, [sp, #36]	; 0x24
 8006aea:	2320      	movs	r3, #32
 8006aec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006af0:	f8cd 800c 	str.w	r8, [sp, #12]
 8006af4:	2330      	movs	r3, #48	; 0x30
 8006af6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006ca0 <_svfiprintf_r+0x1ec>
 8006afa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006afe:	f04f 0901 	mov.w	r9, #1
 8006b02:	4623      	mov	r3, r4
 8006b04:	469a      	mov	sl, r3
 8006b06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b0a:	b10a      	cbz	r2, 8006b10 <_svfiprintf_r+0x5c>
 8006b0c:	2a25      	cmp	r2, #37	; 0x25
 8006b0e:	d1f9      	bne.n	8006b04 <_svfiprintf_r+0x50>
 8006b10:	ebba 0b04 	subs.w	fp, sl, r4
 8006b14:	d00b      	beq.n	8006b2e <_svfiprintf_r+0x7a>
 8006b16:	465b      	mov	r3, fp
 8006b18:	4622      	mov	r2, r4
 8006b1a:	4629      	mov	r1, r5
 8006b1c:	4638      	mov	r0, r7
 8006b1e:	f7ff ff6d 	bl	80069fc <__ssputs_r>
 8006b22:	3001      	adds	r0, #1
 8006b24:	f000 80aa 	beq.w	8006c7c <_svfiprintf_r+0x1c8>
 8006b28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b2a:	445a      	add	r2, fp
 8006b2c:	9209      	str	r2, [sp, #36]	; 0x24
 8006b2e:	f89a 3000 	ldrb.w	r3, [sl]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	f000 80a2 	beq.w	8006c7c <_svfiprintf_r+0x1c8>
 8006b38:	2300      	movs	r3, #0
 8006b3a:	f04f 32ff 	mov.w	r2, #4294967295
 8006b3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b42:	f10a 0a01 	add.w	sl, sl, #1
 8006b46:	9304      	str	r3, [sp, #16]
 8006b48:	9307      	str	r3, [sp, #28]
 8006b4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b4e:	931a      	str	r3, [sp, #104]	; 0x68
 8006b50:	4654      	mov	r4, sl
 8006b52:	2205      	movs	r2, #5
 8006b54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b58:	4851      	ldr	r0, [pc, #324]	; (8006ca0 <_svfiprintf_r+0x1ec>)
 8006b5a:	f7f9 fb41 	bl	80001e0 <memchr>
 8006b5e:	9a04      	ldr	r2, [sp, #16]
 8006b60:	b9d8      	cbnz	r0, 8006b9a <_svfiprintf_r+0xe6>
 8006b62:	06d0      	lsls	r0, r2, #27
 8006b64:	bf44      	itt	mi
 8006b66:	2320      	movmi	r3, #32
 8006b68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b6c:	0711      	lsls	r1, r2, #28
 8006b6e:	bf44      	itt	mi
 8006b70:	232b      	movmi	r3, #43	; 0x2b
 8006b72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b76:	f89a 3000 	ldrb.w	r3, [sl]
 8006b7a:	2b2a      	cmp	r3, #42	; 0x2a
 8006b7c:	d015      	beq.n	8006baa <_svfiprintf_r+0xf6>
 8006b7e:	9a07      	ldr	r2, [sp, #28]
 8006b80:	4654      	mov	r4, sl
 8006b82:	2000      	movs	r0, #0
 8006b84:	f04f 0c0a 	mov.w	ip, #10
 8006b88:	4621      	mov	r1, r4
 8006b8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b8e:	3b30      	subs	r3, #48	; 0x30
 8006b90:	2b09      	cmp	r3, #9
 8006b92:	d94e      	bls.n	8006c32 <_svfiprintf_r+0x17e>
 8006b94:	b1b0      	cbz	r0, 8006bc4 <_svfiprintf_r+0x110>
 8006b96:	9207      	str	r2, [sp, #28]
 8006b98:	e014      	b.n	8006bc4 <_svfiprintf_r+0x110>
 8006b9a:	eba0 0308 	sub.w	r3, r0, r8
 8006b9e:	fa09 f303 	lsl.w	r3, r9, r3
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	9304      	str	r3, [sp, #16]
 8006ba6:	46a2      	mov	sl, r4
 8006ba8:	e7d2      	b.n	8006b50 <_svfiprintf_r+0x9c>
 8006baa:	9b03      	ldr	r3, [sp, #12]
 8006bac:	1d19      	adds	r1, r3, #4
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	9103      	str	r1, [sp, #12]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	bfbb      	ittet	lt
 8006bb6:	425b      	neglt	r3, r3
 8006bb8:	f042 0202 	orrlt.w	r2, r2, #2
 8006bbc:	9307      	strge	r3, [sp, #28]
 8006bbe:	9307      	strlt	r3, [sp, #28]
 8006bc0:	bfb8      	it	lt
 8006bc2:	9204      	strlt	r2, [sp, #16]
 8006bc4:	7823      	ldrb	r3, [r4, #0]
 8006bc6:	2b2e      	cmp	r3, #46	; 0x2e
 8006bc8:	d10c      	bne.n	8006be4 <_svfiprintf_r+0x130>
 8006bca:	7863      	ldrb	r3, [r4, #1]
 8006bcc:	2b2a      	cmp	r3, #42	; 0x2a
 8006bce:	d135      	bne.n	8006c3c <_svfiprintf_r+0x188>
 8006bd0:	9b03      	ldr	r3, [sp, #12]
 8006bd2:	1d1a      	adds	r2, r3, #4
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	9203      	str	r2, [sp, #12]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	bfb8      	it	lt
 8006bdc:	f04f 33ff 	movlt.w	r3, #4294967295
 8006be0:	3402      	adds	r4, #2
 8006be2:	9305      	str	r3, [sp, #20]
 8006be4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006cb0 <_svfiprintf_r+0x1fc>
 8006be8:	7821      	ldrb	r1, [r4, #0]
 8006bea:	2203      	movs	r2, #3
 8006bec:	4650      	mov	r0, sl
 8006bee:	f7f9 faf7 	bl	80001e0 <memchr>
 8006bf2:	b140      	cbz	r0, 8006c06 <_svfiprintf_r+0x152>
 8006bf4:	2340      	movs	r3, #64	; 0x40
 8006bf6:	eba0 000a 	sub.w	r0, r0, sl
 8006bfa:	fa03 f000 	lsl.w	r0, r3, r0
 8006bfe:	9b04      	ldr	r3, [sp, #16]
 8006c00:	4303      	orrs	r3, r0
 8006c02:	3401      	adds	r4, #1
 8006c04:	9304      	str	r3, [sp, #16]
 8006c06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c0a:	4826      	ldr	r0, [pc, #152]	; (8006ca4 <_svfiprintf_r+0x1f0>)
 8006c0c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c10:	2206      	movs	r2, #6
 8006c12:	f7f9 fae5 	bl	80001e0 <memchr>
 8006c16:	2800      	cmp	r0, #0
 8006c18:	d038      	beq.n	8006c8c <_svfiprintf_r+0x1d8>
 8006c1a:	4b23      	ldr	r3, [pc, #140]	; (8006ca8 <_svfiprintf_r+0x1f4>)
 8006c1c:	bb1b      	cbnz	r3, 8006c66 <_svfiprintf_r+0x1b2>
 8006c1e:	9b03      	ldr	r3, [sp, #12]
 8006c20:	3307      	adds	r3, #7
 8006c22:	f023 0307 	bic.w	r3, r3, #7
 8006c26:	3308      	adds	r3, #8
 8006c28:	9303      	str	r3, [sp, #12]
 8006c2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c2c:	4433      	add	r3, r6
 8006c2e:	9309      	str	r3, [sp, #36]	; 0x24
 8006c30:	e767      	b.n	8006b02 <_svfiprintf_r+0x4e>
 8006c32:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c36:	460c      	mov	r4, r1
 8006c38:	2001      	movs	r0, #1
 8006c3a:	e7a5      	b.n	8006b88 <_svfiprintf_r+0xd4>
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	3401      	adds	r4, #1
 8006c40:	9305      	str	r3, [sp, #20]
 8006c42:	4619      	mov	r1, r3
 8006c44:	f04f 0c0a 	mov.w	ip, #10
 8006c48:	4620      	mov	r0, r4
 8006c4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c4e:	3a30      	subs	r2, #48	; 0x30
 8006c50:	2a09      	cmp	r2, #9
 8006c52:	d903      	bls.n	8006c5c <_svfiprintf_r+0x1a8>
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d0c5      	beq.n	8006be4 <_svfiprintf_r+0x130>
 8006c58:	9105      	str	r1, [sp, #20]
 8006c5a:	e7c3      	b.n	8006be4 <_svfiprintf_r+0x130>
 8006c5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c60:	4604      	mov	r4, r0
 8006c62:	2301      	movs	r3, #1
 8006c64:	e7f0      	b.n	8006c48 <_svfiprintf_r+0x194>
 8006c66:	ab03      	add	r3, sp, #12
 8006c68:	9300      	str	r3, [sp, #0]
 8006c6a:	462a      	mov	r2, r5
 8006c6c:	4b0f      	ldr	r3, [pc, #60]	; (8006cac <_svfiprintf_r+0x1f8>)
 8006c6e:	a904      	add	r1, sp, #16
 8006c70:	4638      	mov	r0, r7
 8006c72:	f3af 8000 	nop.w
 8006c76:	1c42      	adds	r2, r0, #1
 8006c78:	4606      	mov	r6, r0
 8006c7a:	d1d6      	bne.n	8006c2a <_svfiprintf_r+0x176>
 8006c7c:	89ab      	ldrh	r3, [r5, #12]
 8006c7e:	065b      	lsls	r3, r3, #25
 8006c80:	f53f af2c 	bmi.w	8006adc <_svfiprintf_r+0x28>
 8006c84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c86:	b01d      	add	sp, #116	; 0x74
 8006c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c8c:	ab03      	add	r3, sp, #12
 8006c8e:	9300      	str	r3, [sp, #0]
 8006c90:	462a      	mov	r2, r5
 8006c92:	4b06      	ldr	r3, [pc, #24]	; (8006cac <_svfiprintf_r+0x1f8>)
 8006c94:	a904      	add	r1, sp, #16
 8006c96:	4638      	mov	r0, r7
 8006c98:	f000 f87a 	bl	8006d90 <_printf_i>
 8006c9c:	e7eb      	b.n	8006c76 <_svfiprintf_r+0x1c2>
 8006c9e:	bf00      	nop
 8006ca0:	080080a4 	.word	0x080080a4
 8006ca4:	080080ae 	.word	0x080080ae
 8006ca8:	00000000 	.word	0x00000000
 8006cac:	080069fd 	.word	0x080069fd
 8006cb0:	080080aa 	.word	0x080080aa

08006cb4 <_printf_common>:
 8006cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cb8:	4616      	mov	r6, r2
 8006cba:	4699      	mov	r9, r3
 8006cbc:	688a      	ldr	r2, [r1, #8]
 8006cbe:	690b      	ldr	r3, [r1, #16]
 8006cc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	bfb8      	it	lt
 8006cc8:	4613      	movlt	r3, r2
 8006cca:	6033      	str	r3, [r6, #0]
 8006ccc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006cd0:	4607      	mov	r7, r0
 8006cd2:	460c      	mov	r4, r1
 8006cd4:	b10a      	cbz	r2, 8006cda <_printf_common+0x26>
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	6033      	str	r3, [r6, #0]
 8006cda:	6823      	ldr	r3, [r4, #0]
 8006cdc:	0699      	lsls	r1, r3, #26
 8006cde:	bf42      	ittt	mi
 8006ce0:	6833      	ldrmi	r3, [r6, #0]
 8006ce2:	3302      	addmi	r3, #2
 8006ce4:	6033      	strmi	r3, [r6, #0]
 8006ce6:	6825      	ldr	r5, [r4, #0]
 8006ce8:	f015 0506 	ands.w	r5, r5, #6
 8006cec:	d106      	bne.n	8006cfc <_printf_common+0x48>
 8006cee:	f104 0a19 	add.w	sl, r4, #25
 8006cf2:	68e3      	ldr	r3, [r4, #12]
 8006cf4:	6832      	ldr	r2, [r6, #0]
 8006cf6:	1a9b      	subs	r3, r3, r2
 8006cf8:	42ab      	cmp	r3, r5
 8006cfa:	dc26      	bgt.n	8006d4a <_printf_common+0x96>
 8006cfc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006d00:	1e13      	subs	r3, r2, #0
 8006d02:	6822      	ldr	r2, [r4, #0]
 8006d04:	bf18      	it	ne
 8006d06:	2301      	movne	r3, #1
 8006d08:	0692      	lsls	r2, r2, #26
 8006d0a:	d42b      	bmi.n	8006d64 <_printf_common+0xb0>
 8006d0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d10:	4649      	mov	r1, r9
 8006d12:	4638      	mov	r0, r7
 8006d14:	47c0      	blx	r8
 8006d16:	3001      	adds	r0, #1
 8006d18:	d01e      	beq.n	8006d58 <_printf_common+0xa4>
 8006d1a:	6823      	ldr	r3, [r4, #0]
 8006d1c:	68e5      	ldr	r5, [r4, #12]
 8006d1e:	6832      	ldr	r2, [r6, #0]
 8006d20:	f003 0306 	and.w	r3, r3, #6
 8006d24:	2b04      	cmp	r3, #4
 8006d26:	bf08      	it	eq
 8006d28:	1aad      	subeq	r5, r5, r2
 8006d2a:	68a3      	ldr	r3, [r4, #8]
 8006d2c:	6922      	ldr	r2, [r4, #16]
 8006d2e:	bf0c      	ite	eq
 8006d30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d34:	2500      	movne	r5, #0
 8006d36:	4293      	cmp	r3, r2
 8006d38:	bfc4      	itt	gt
 8006d3a:	1a9b      	subgt	r3, r3, r2
 8006d3c:	18ed      	addgt	r5, r5, r3
 8006d3e:	2600      	movs	r6, #0
 8006d40:	341a      	adds	r4, #26
 8006d42:	42b5      	cmp	r5, r6
 8006d44:	d11a      	bne.n	8006d7c <_printf_common+0xc8>
 8006d46:	2000      	movs	r0, #0
 8006d48:	e008      	b.n	8006d5c <_printf_common+0xa8>
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	4652      	mov	r2, sl
 8006d4e:	4649      	mov	r1, r9
 8006d50:	4638      	mov	r0, r7
 8006d52:	47c0      	blx	r8
 8006d54:	3001      	adds	r0, #1
 8006d56:	d103      	bne.n	8006d60 <_printf_common+0xac>
 8006d58:	f04f 30ff 	mov.w	r0, #4294967295
 8006d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d60:	3501      	adds	r5, #1
 8006d62:	e7c6      	b.n	8006cf2 <_printf_common+0x3e>
 8006d64:	18e1      	adds	r1, r4, r3
 8006d66:	1c5a      	adds	r2, r3, #1
 8006d68:	2030      	movs	r0, #48	; 0x30
 8006d6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006d6e:	4422      	add	r2, r4
 8006d70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006d74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006d78:	3302      	adds	r3, #2
 8006d7a:	e7c7      	b.n	8006d0c <_printf_common+0x58>
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	4622      	mov	r2, r4
 8006d80:	4649      	mov	r1, r9
 8006d82:	4638      	mov	r0, r7
 8006d84:	47c0      	blx	r8
 8006d86:	3001      	adds	r0, #1
 8006d88:	d0e6      	beq.n	8006d58 <_printf_common+0xa4>
 8006d8a:	3601      	adds	r6, #1
 8006d8c:	e7d9      	b.n	8006d42 <_printf_common+0x8e>
	...

08006d90 <_printf_i>:
 8006d90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d94:	7e0f      	ldrb	r7, [r1, #24]
 8006d96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006d98:	2f78      	cmp	r7, #120	; 0x78
 8006d9a:	4691      	mov	r9, r2
 8006d9c:	4680      	mov	r8, r0
 8006d9e:	460c      	mov	r4, r1
 8006da0:	469a      	mov	sl, r3
 8006da2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006da6:	d807      	bhi.n	8006db8 <_printf_i+0x28>
 8006da8:	2f62      	cmp	r7, #98	; 0x62
 8006daa:	d80a      	bhi.n	8006dc2 <_printf_i+0x32>
 8006dac:	2f00      	cmp	r7, #0
 8006dae:	f000 80d8 	beq.w	8006f62 <_printf_i+0x1d2>
 8006db2:	2f58      	cmp	r7, #88	; 0x58
 8006db4:	f000 80a3 	beq.w	8006efe <_printf_i+0x16e>
 8006db8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006dbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006dc0:	e03a      	b.n	8006e38 <_printf_i+0xa8>
 8006dc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006dc6:	2b15      	cmp	r3, #21
 8006dc8:	d8f6      	bhi.n	8006db8 <_printf_i+0x28>
 8006dca:	a101      	add	r1, pc, #4	; (adr r1, 8006dd0 <_printf_i+0x40>)
 8006dcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006dd0:	08006e29 	.word	0x08006e29
 8006dd4:	08006e3d 	.word	0x08006e3d
 8006dd8:	08006db9 	.word	0x08006db9
 8006ddc:	08006db9 	.word	0x08006db9
 8006de0:	08006db9 	.word	0x08006db9
 8006de4:	08006db9 	.word	0x08006db9
 8006de8:	08006e3d 	.word	0x08006e3d
 8006dec:	08006db9 	.word	0x08006db9
 8006df0:	08006db9 	.word	0x08006db9
 8006df4:	08006db9 	.word	0x08006db9
 8006df8:	08006db9 	.word	0x08006db9
 8006dfc:	08006f49 	.word	0x08006f49
 8006e00:	08006e6d 	.word	0x08006e6d
 8006e04:	08006f2b 	.word	0x08006f2b
 8006e08:	08006db9 	.word	0x08006db9
 8006e0c:	08006db9 	.word	0x08006db9
 8006e10:	08006f6b 	.word	0x08006f6b
 8006e14:	08006db9 	.word	0x08006db9
 8006e18:	08006e6d 	.word	0x08006e6d
 8006e1c:	08006db9 	.word	0x08006db9
 8006e20:	08006db9 	.word	0x08006db9
 8006e24:	08006f33 	.word	0x08006f33
 8006e28:	682b      	ldr	r3, [r5, #0]
 8006e2a:	1d1a      	adds	r2, r3, #4
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	602a      	str	r2, [r5, #0]
 8006e30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e38:	2301      	movs	r3, #1
 8006e3a:	e0a3      	b.n	8006f84 <_printf_i+0x1f4>
 8006e3c:	6820      	ldr	r0, [r4, #0]
 8006e3e:	6829      	ldr	r1, [r5, #0]
 8006e40:	0606      	lsls	r6, r0, #24
 8006e42:	f101 0304 	add.w	r3, r1, #4
 8006e46:	d50a      	bpl.n	8006e5e <_printf_i+0xce>
 8006e48:	680e      	ldr	r6, [r1, #0]
 8006e4a:	602b      	str	r3, [r5, #0]
 8006e4c:	2e00      	cmp	r6, #0
 8006e4e:	da03      	bge.n	8006e58 <_printf_i+0xc8>
 8006e50:	232d      	movs	r3, #45	; 0x2d
 8006e52:	4276      	negs	r6, r6
 8006e54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e58:	485e      	ldr	r0, [pc, #376]	; (8006fd4 <_printf_i+0x244>)
 8006e5a:	230a      	movs	r3, #10
 8006e5c:	e019      	b.n	8006e92 <_printf_i+0x102>
 8006e5e:	680e      	ldr	r6, [r1, #0]
 8006e60:	602b      	str	r3, [r5, #0]
 8006e62:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006e66:	bf18      	it	ne
 8006e68:	b236      	sxthne	r6, r6
 8006e6a:	e7ef      	b.n	8006e4c <_printf_i+0xbc>
 8006e6c:	682b      	ldr	r3, [r5, #0]
 8006e6e:	6820      	ldr	r0, [r4, #0]
 8006e70:	1d19      	adds	r1, r3, #4
 8006e72:	6029      	str	r1, [r5, #0]
 8006e74:	0601      	lsls	r1, r0, #24
 8006e76:	d501      	bpl.n	8006e7c <_printf_i+0xec>
 8006e78:	681e      	ldr	r6, [r3, #0]
 8006e7a:	e002      	b.n	8006e82 <_printf_i+0xf2>
 8006e7c:	0646      	lsls	r6, r0, #25
 8006e7e:	d5fb      	bpl.n	8006e78 <_printf_i+0xe8>
 8006e80:	881e      	ldrh	r6, [r3, #0]
 8006e82:	4854      	ldr	r0, [pc, #336]	; (8006fd4 <_printf_i+0x244>)
 8006e84:	2f6f      	cmp	r7, #111	; 0x6f
 8006e86:	bf0c      	ite	eq
 8006e88:	2308      	moveq	r3, #8
 8006e8a:	230a      	movne	r3, #10
 8006e8c:	2100      	movs	r1, #0
 8006e8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006e92:	6865      	ldr	r5, [r4, #4]
 8006e94:	60a5      	str	r5, [r4, #8]
 8006e96:	2d00      	cmp	r5, #0
 8006e98:	bfa2      	ittt	ge
 8006e9a:	6821      	ldrge	r1, [r4, #0]
 8006e9c:	f021 0104 	bicge.w	r1, r1, #4
 8006ea0:	6021      	strge	r1, [r4, #0]
 8006ea2:	b90e      	cbnz	r6, 8006ea8 <_printf_i+0x118>
 8006ea4:	2d00      	cmp	r5, #0
 8006ea6:	d04d      	beq.n	8006f44 <_printf_i+0x1b4>
 8006ea8:	4615      	mov	r5, r2
 8006eaa:	fbb6 f1f3 	udiv	r1, r6, r3
 8006eae:	fb03 6711 	mls	r7, r3, r1, r6
 8006eb2:	5dc7      	ldrb	r7, [r0, r7]
 8006eb4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006eb8:	4637      	mov	r7, r6
 8006eba:	42bb      	cmp	r3, r7
 8006ebc:	460e      	mov	r6, r1
 8006ebe:	d9f4      	bls.n	8006eaa <_printf_i+0x11a>
 8006ec0:	2b08      	cmp	r3, #8
 8006ec2:	d10b      	bne.n	8006edc <_printf_i+0x14c>
 8006ec4:	6823      	ldr	r3, [r4, #0]
 8006ec6:	07de      	lsls	r6, r3, #31
 8006ec8:	d508      	bpl.n	8006edc <_printf_i+0x14c>
 8006eca:	6923      	ldr	r3, [r4, #16]
 8006ecc:	6861      	ldr	r1, [r4, #4]
 8006ece:	4299      	cmp	r1, r3
 8006ed0:	bfde      	ittt	le
 8006ed2:	2330      	movle	r3, #48	; 0x30
 8006ed4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006ed8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006edc:	1b52      	subs	r2, r2, r5
 8006ede:	6122      	str	r2, [r4, #16]
 8006ee0:	f8cd a000 	str.w	sl, [sp]
 8006ee4:	464b      	mov	r3, r9
 8006ee6:	aa03      	add	r2, sp, #12
 8006ee8:	4621      	mov	r1, r4
 8006eea:	4640      	mov	r0, r8
 8006eec:	f7ff fee2 	bl	8006cb4 <_printf_common>
 8006ef0:	3001      	adds	r0, #1
 8006ef2:	d14c      	bne.n	8006f8e <_printf_i+0x1fe>
 8006ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ef8:	b004      	add	sp, #16
 8006efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006efe:	4835      	ldr	r0, [pc, #212]	; (8006fd4 <_printf_i+0x244>)
 8006f00:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006f04:	6829      	ldr	r1, [r5, #0]
 8006f06:	6823      	ldr	r3, [r4, #0]
 8006f08:	f851 6b04 	ldr.w	r6, [r1], #4
 8006f0c:	6029      	str	r1, [r5, #0]
 8006f0e:	061d      	lsls	r5, r3, #24
 8006f10:	d514      	bpl.n	8006f3c <_printf_i+0x1ac>
 8006f12:	07df      	lsls	r7, r3, #31
 8006f14:	bf44      	itt	mi
 8006f16:	f043 0320 	orrmi.w	r3, r3, #32
 8006f1a:	6023      	strmi	r3, [r4, #0]
 8006f1c:	b91e      	cbnz	r6, 8006f26 <_printf_i+0x196>
 8006f1e:	6823      	ldr	r3, [r4, #0]
 8006f20:	f023 0320 	bic.w	r3, r3, #32
 8006f24:	6023      	str	r3, [r4, #0]
 8006f26:	2310      	movs	r3, #16
 8006f28:	e7b0      	b.n	8006e8c <_printf_i+0xfc>
 8006f2a:	6823      	ldr	r3, [r4, #0]
 8006f2c:	f043 0320 	orr.w	r3, r3, #32
 8006f30:	6023      	str	r3, [r4, #0]
 8006f32:	2378      	movs	r3, #120	; 0x78
 8006f34:	4828      	ldr	r0, [pc, #160]	; (8006fd8 <_printf_i+0x248>)
 8006f36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006f3a:	e7e3      	b.n	8006f04 <_printf_i+0x174>
 8006f3c:	0659      	lsls	r1, r3, #25
 8006f3e:	bf48      	it	mi
 8006f40:	b2b6      	uxthmi	r6, r6
 8006f42:	e7e6      	b.n	8006f12 <_printf_i+0x182>
 8006f44:	4615      	mov	r5, r2
 8006f46:	e7bb      	b.n	8006ec0 <_printf_i+0x130>
 8006f48:	682b      	ldr	r3, [r5, #0]
 8006f4a:	6826      	ldr	r6, [r4, #0]
 8006f4c:	6961      	ldr	r1, [r4, #20]
 8006f4e:	1d18      	adds	r0, r3, #4
 8006f50:	6028      	str	r0, [r5, #0]
 8006f52:	0635      	lsls	r5, r6, #24
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	d501      	bpl.n	8006f5c <_printf_i+0x1cc>
 8006f58:	6019      	str	r1, [r3, #0]
 8006f5a:	e002      	b.n	8006f62 <_printf_i+0x1d2>
 8006f5c:	0670      	lsls	r0, r6, #25
 8006f5e:	d5fb      	bpl.n	8006f58 <_printf_i+0x1c8>
 8006f60:	8019      	strh	r1, [r3, #0]
 8006f62:	2300      	movs	r3, #0
 8006f64:	6123      	str	r3, [r4, #16]
 8006f66:	4615      	mov	r5, r2
 8006f68:	e7ba      	b.n	8006ee0 <_printf_i+0x150>
 8006f6a:	682b      	ldr	r3, [r5, #0]
 8006f6c:	1d1a      	adds	r2, r3, #4
 8006f6e:	602a      	str	r2, [r5, #0]
 8006f70:	681d      	ldr	r5, [r3, #0]
 8006f72:	6862      	ldr	r2, [r4, #4]
 8006f74:	2100      	movs	r1, #0
 8006f76:	4628      	mov	r0, r5
 8006f78:	f7f9 f932 	bl	80001e0 <memchr>
 8006f7c:	b108      	cbz	r0, 8006f82 <_printf_i+0x1f2>
 8006f7e:	1b40      	subs	r0, r0, r5
 8006f80:	6060      	str	r0, [r4, #4]
 8006f82:	6863      	ldr	r3, [r4, #4]
 8006f84:	6123      	str	r3, [r4, #16]
 8006f86:	2300      	movs	r3, #0
 8006f88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f8c:	e7a8      	b.n	8006ee0 <_printf_i+0x150>
 8006f8e:	6923      	ldr	r3, [r4, #16]
 8006f90:	462a      	mov	r2, r5
 8006f92:	4649      	mov	r1, r9
 8006f94:	4640      	mov	r0, r8
 8006f96:	47d0      	blx	sl
 8006f98:	3001      	adds	r0, #1
 8006f9a:	d0ab      	beq.n	8006ef4 <_printf_i+0x164>
 8006f9c:	6823      	ldr	r3, [r4, #0]
 8006f9e:	079b      	lsls	r3, r3, #30
 8006fa0:	d413      	bmi.n	8006fca <_printf_i+0x23a>
 8006fa2:	68e0      	ldr	r0, [r4, #12]
 8006fa4:	9b03      	ldr	r3, [sp, #12]
 8006fa6:	4298      	cmp	r0, r3
 8006fa8:	bfb8      	it	lt
 8006faa:	4618      	movlt	r0, r3
 8006fac:	e7a4      	b.n	8006ef8 <_printf_i+0x168>
 8006fae:	2301      	movs	r3, #1
 8006fb0:	4632      	mov	r2, r6
 8006fb2:	4649      	mov	r1, r9
 8006fb4:	4640      	mov	r0, r8
 8006fb6:	47d0      	blx	sl
 8006fb8:	3001      	adds	r0, #1
 8006fba:	d09b      	beq.n	8006ef4 <_printf_i+0x164>
 8006fbc:	3501      	adds	r5, #1
 8006fbe:	68e3      	ldr	r3, [r4, #12]
 8006fc0:	9903      	ldr	r1, [sp, #12]
 8006fc2:	1a5b      	subs	r3, r3, r1
 8006fc4:	42ab      	cmp	r3, r5
 8006fc6:	dcf2      	bgt.n	8006fae <_printf_i+0x21e>
 8006fc8:	e7eb      	b.n	8006fa2 <_printf_i+0x212>
 8006fca:	2500      	movs	r5, #0
 8006fcc:	f104 0619 	add.w	r6, r4, #25
 8006fd0:	e7f5      	b.n	8006fbe <_printf_i+0x22e>
 8006fd2:	bf00      	nop
 8006fd4:	080080b5 	.word	0x080080b5
 8006fd8:	080080c6 	.word	0x080080c6

08006fdc <memcpy>:
 8006fdc:	440a      	add	r2, r1
 8006fde:	4291      	cmp	r1, r2
 8006fe0:	f100 33ff 	add.w	r3, r0, #4294967295
 8006fe4:	d100      	bne.n	8006fe8 <memcpy+0xc>
 8006fe6:	4770      	bx	lr
 8006fe8:	b510      	push	{r4, lr}
 8006fea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ff2:	4291      	cmp	r1, r2
 8006ff4:	d1f9      	bne.n	8006fea <memcpy+0xe>
 8006ff6:	bd10      	pop	{r4, pc}

08006ff8 <memmove>:
 8006ff8:	4288      	cmp	r0, r1
 8006ffa:	b510      	push	{r4, lr}
 8006ffc:	eb01 0402 	add.w	r4, r1, r2
 8007000:	d902      	bls.n	8007008 <memmove+0x10>
 8007002:	4284      	cmp	r4, r0
 8007004:	4623      	mov	r3, r4
 8007006:	d807      	bhi.n	8007018 <memmove+0x20>
 8007008:	1e43      	subs	r3, r0, #1
 800700a:	42a1      	cmp	r1, r4
 800700c:	d008      	beq.n	8007020 <memmove+0x28>
 800700e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007012:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007016:	e7f8      	b.n	800700a <memmove+0x12>
 8007018:	4402      	add	r2, r0
 800701a:	4601      	mov	r1, r0
 800701c:	428a      	cmp	r2, r1
 800701e:	d100      	bne.n	8007022 <memmove+0x2a>
 8007020:	bd10      	pop	{r4, pc}
 8007022:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007026:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800702a:	e7f7      	b.n	800701c <memmove+0x24>

0800702c <_free_r>:
 800702c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800702e:	2900      	cmp	r1, #0
 8007030:	d044      	beq.n	80070bc <_free_r+0x90>
 8007032:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007036:	9001      	str	r0, [sp, #4]
 8007038:	2b00      	cmp	r3, #0
 800703a:	f1a1 0404 	sub.w	r4, r1, #4
 800703e:	bfb8      	it	lt
 8007040:	18e4      	addlt	r4, r4, r3
 8007042:	f000 f913 	bl	800726c <__malloc_lock>
 8007046:	4a1e      	ldr	r2, [pc, #120]	; (80070c0 <_free_r+0x94>)
 8007048:	9801      	ldr	r0, [sp, #4]
 800704a:	6813      	ldr	r3, [r2, #0]
 800704c:	b933      	cbnz	r3, 800705c <_free_r+0x30>
 800704e:	6063      	str	r3, [r4, #4]
 8007050:	6014      	str	r4, [r2, #0]
 8007052:	b003      	add	sp, #12
 8007054:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007058:	f000 b90e 	b.w	8007278 <__malloc_unlock>
 800705c:	42a3      	cmp	r3, r4
 800705e:	d908      	bls.n	8007072 <_free_r+0x46>
 8007060:	6825      	ldr	r5, [r4, #0]
 8007062:	1961      	adds	r1, r4, r5
 8007064:	428b      	cmp	r3, r1
 8007066:	bf01      	itttt	eq
 8007068:	6819      	ldreq	r1, [r3, #0]
 800706a:	685b      	ldreq	r3, [r3, #4]
 800706c:	1949      	addeq	r1, r1, r5
 800706e:	6021      	streq	r1, [r4, #0]
 8007070:	e7ed      	b.n	800704e <_free_r+0x22>
 8007072:	461a      	mov	r2, r3
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	b10b      	cbz	r3, 800707c <_free_r+0x50>
 8007078:	42a3      	cmp	r3, r4
 800707a:	d9fa      	bls.n	8007072 <_free_r+0x46>
 800707c:	6811      	ldr	r1, [r2, #0]
 800707e:	1855      	adds	r5, r2, r1
 8007080:	42a5      	cmp	r5, r4
 8007082:	d10b      	bne.n	800709c <_free_r+0x70>
 8007084:	6824      	ldr	r4, [r4, #0]
 8007086:	4421      	add	r1, r4
 8007088:	1854      	adds	r4, r2, r1
 800708a:	42a3      	cmp	r3, r4
 800708c:	6011      	str	r1, [r2, #0]
 800708e:	d1e0      	bne.n	8007052 <_free_r+0x26>
 8007090:	681c      	ldr	r4, [r3, #0]
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	6053      	str	r3, [r2, #4]
 8007096:	4421      	add	r1, r4
 8007098:	6011      	str	r1, [r2, #0]
 800709a:	e7da      	b.n	8007052 <_free_r+0x26>
 800709c:	d902      	bls.n	80070a4 <_free_r+0x78>
 800709e:	230c      	movs	r3, #12
 80070a0:	6003      	str	r3, [r0, #0]
 80070a2:	e7d6      	b.n	8007052 <_free_r+0x26>
 80070a4:	6825      	ldr	r5, [r4, #0]
 80070a6:	1961      	adds	r1, r4, r5
 80070a8:	428b      	cmp	r3, r1
 80070aa:	bf04      	itt	eq
 80070ac:	6819      	ldreq	r1, [r3, #0]
 80070ae:	685b      	ldreq	r3, [r3, #4]
 80070b0:	6063      	str	r3, [r4, #4]
 80070b2:	bf04      	itt	eq
 80070b4:	1949      	addeq	r1, r1, r5
 80070b6:	6021      	streq	r1, [r4, #0]
 80070b8:	6054      	str	r4, [r2, #4]
 80070ba:	e7ca      	b.n	8007052 <_free_r+0x26>
 80070bc:	b003      	add	sp, #12
 80070be:	bd30      	pop	{r4, r5, pc}
 80070c0:	2000073c 	.word	0x2000073c

080070c4 <sbrk_aligned>:
 80070c4:	b570      	push	{r4, r5, r6, lr}
 80070c6:	4e0e      	ldr	r6, [pc, #56]	; (8007100 <sbrk_aligned+0x3c>)
 80070c8:	460c      	mov	r4, r1
 80070ca:	6831      	ldr	r1, [r6, #0]
 80070cc:	4605      	mov	r5, r0
 80070ce:	b911      	cbnz	r1, 80070d6 <sbrk_aligned+0x12>
 80070d0:	f000 f8bc 	bl	800724c <_sbrk_r>
 80070d4:	6030      	str	r0, [r6, #0]
 80070d6:	4621      	mov	r1, r4
 80070d8:	4628      	mov	r0, r5
 80070da:	f000 f8b7 	bl	800724c <_sbrk_r>
 80070de:	1c43      	adds	r3, r0, #1
 80070e0:	d00a      	beq.n	80070f8 <sbrk_aligned+0x34>
 80070e2:	1cc4      	adds	r4, r0, #3
 80070e4:	f024 0403 	bic.w	r4, r4, #3
 80070e8:	42a0      	cmp	r0, r4
 80070ea:	d007      	beq.n	80070fc <sbrk_aligned+0x38>
 80070ec:	1a21      	subs	r1, r4, r0
 80070ee:	4628      	mov	r0, r5
 80070f0:	f000 f8ac 	bl	800724c <_sbrk_r>
 80070f4:	3001      	adds	r0, #1
 80070f6:	d101      	bne.n	80070fc <sbrk_aligned+0x38>
 80070f8:	f04f 34ff 	mov.w	r4, #4294967295
 80070fc:	4620      	mov	r0, r4
 80070fe:	bd70      	pop	{r4, r5, r6, pc}
 8007100:	20000740 	.word	0x20000740

08007104 <_malloc_r>:
 8007104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007108:	1ccd      	adds	r5, r1, #3
 800710a:	f025 0503 	bic.w	r5, r5, #3
 800710e:	3508      	adds	r5, #8
 8007110:	2d0c      	cmp	r5, #12
 8007112:	bf38      	it	cc
 8007114:	250c      	movcc	r5, #12
 8007116:	2d00      	cmp	r5, #0
 8007118:	4607      	mov	r7, r0
 800711a:	db01      	blt.n	8007120 <_malloc_r+0x1c>
 800711c:	42a9      	cmp	r1, r5
 800711e:	d905      	bls.n	800712c <_malloc_r+0x28>
 8007120:	230c      	movs	r3, #12
 8007122:	603b      	str	r3, [r7, #0]
 8007124:	2600      	movs	r6, #0
 8007126:	4630      	mov	r0, r6
 8007128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800712c:	4e2e      	ldr	r6, [pc, #184]	; (80071e8 <_malloc_r+0xe4>)
 800712e:	f000 f89d 	bl	800726c <__malloc_lock>
 8007132:	6833      	ldr	r3, [r6, #0]
 8007134:	461c      	mov	r4, r3
 8007136:	bb34      	cbnz	r4, 8007186 <_malloc_r+0x82>
 8007138:	4629      	mov	r1, r5
 800713a:	4638      	mov	r0, r7
 800713c:	f7ff ffc2 	bl	80070c4 <sbrk_aligned>
 8007140:	1c43      	adds	r3, r0, #1
 8007142:	4604      	mov	r4, r0
 8007144:	d14d      	bne.n	80071e2 <_malloc_r+0xde>
 8007146:	6834      	ldr	r4, [r6, #0]
 8007148:	4626      	mov	r6, r4
 800714a:	2e00      	cmp	r6, #0
 800714c:	d140      	bne.n	80071d0 <_malloc_r+0xcc>
 800714e:	6823      	ldr	r3, [r4, #0]
 8007150:	4631      	mov	r1, r6
 8007152:	4638      	mov	r0, r7
 8007154:	eb04 0803 	add.w	r8, r4, r3
 8007158:	f000 f878 	bl	800724c <_sbrk_r>
 800715c:	4580      	cmp	r8, r0
 800715e:	d13a      	bne.n	80071d6 <_malloc_r+0xd2>
 8007160:	6821      	ldr	r1, [r4, #0]
 8007162:	3503      	adds	r5, #3
 8007164:	1a6d      	subs	r5, r5, r1
 8007166:	f025 0503 	bic.w	r5, r5, #3
 800716a:	3508      	adds	r5, #8
 800716c:	2d0c      	cmp	r5, #12
 800716e:	bf38      	it	cc
 8007170:	250c      	movcc	r5, #12
 8007172:	4629      	mov	r1, r5
 8007174:	4638      	mov	r0, r7
 8007176:	f7ff ffa5 	bl	80070c4 <sbrk_aligned>
 800717a:	3001      	adds	r0, #1
 800717c:	d02b      	beq.n	80071d6 <_malloc_r+0xd2>
 800717e:	6823      	ldr	r3, [r4, #0]
 8007180:	442b      	add	r3, r5
 8007182:	6023      	str	r3, [r4, #0]
 8007184:	e00e      	b.n	80071a4 <_malloc_r+0xa0>
 8007186:	6822      	ldr	r2, [r4, #0]
 8007188:	1b52      	subs	r2, r2, r5
 800718a:	d41e      	bmi.n	80071ca <_malloc_r+0xc6>
 800718c:	2a0b      	cmp	r2, #11
 800718e:	d916      	bls.n	80071be <_malloc_r+0xba>
 8007190:	1961      	adds	r1, r4, r5
 8007192:	42a3      	cmp	r3, r4
 8007194:	6025      	str	r5, [r4, #0]
 8007196:	bf18      	it	ne
 8007198:	6059      	strne	r1, [r3, #4]
 800719a:	6863      	ldr	r3, [r4, #4]
 800719c:	bf08      	it	eq
 800719e:	6031      	streq	r1, [r6, #0]
 80071a0:	5162      	str	r2, [r4, r5]
 80071a2:	604b      	str	r3, [r1, #4]
 80071a4:	4638      	mov	r0, r7
 80071a6:	f104 060b 	add.w	r6, r4, #11
 80071aa:	f000 f865 	bl	8007278 <__malloc_unlock>
 80071ae:	f026 0607 	bic.w	r6, r6, #7
 80071b2:	1d23      	adds	r3, r4, #4
 80071b4:	1af2      	subs	r2, r6, r3
 80071b6:	d0b6      	beq.n	8007126 <_malloc_r+0x22>
 80071b8:	1b9b      	subs	r3, r3, r6
 80071ba:	50a3      	str	r3, [r4, r2]
 80071bc:	e7b3      	b.n	8007126 <_malloc_r+0x22>
 80071be:	6862      	ldr	r2, [r4, #4]
 80071c0:	42a3      	cmp	r3, r4
 80071c2:	bf0c      	ite	eq
 80071c4:	6032      	streq	r2, [r6, #0]
 80071c6:	605a      	strne	r2, [r3, #4]
 80071c8:	e7ec      	b.n	80071a4 <_malloc_r+0xa0>
 80071ca:	4623      	mov	r3, r4
 80071cc:	6864      	ldr	r4, [r4, #4]
 80071ce:	e7b2      	b.n	8007136 <_malloc_r+0x32>
 80071d0:	4634      	mov	r4, r6
 80071d2:	6876      	ldr	r6, [r6, #4]
 80071d4:	e7b9      	b.n	800714a <_malloc_r+0x46>
 80071d6:	230c      	movs	r3, #12
 80071d8:	603b      	str	r3, [r7, #0]
 80071da:	4638      	mov	r0, r7
 80071dc:	f000 f84c 	bl	8007278 <__malloc_unlock>
 80071e0:	e7a1      	b.n	8007126 <_malloc_r+0x22>
 80071e2:	6025      	str	r5, [r4, #0]
 80071e4:	e7de      	b.n	80071a4 <_malloc_r+0xa0>
 80071e6:	bf00      	nop
 80071e8:	2000073c 	.word	0x2000073c

080071ec <_realloc_r>:
 80071ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071f0:	4680      	mov	r8, r0
 80071f2:	4614      	mov	r4, r2
 80071f4:	460e      	mov	r6, r1
 80071f6:	b921      	cbnz	r1, 8007202 <_realloc_r+0x16>
 80071f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071fc:	4611      	mov	r1, r2
 80071fe:	f7ff bf81 	b.w	8007104 <_malloc_r>
 8007202:	b92a      	cbnz	r2, 8007210 <_realloc_r+0x24>
 8007204:	f7ff ff12 	bl	800702c <_free_r>
 8007208:	4625      	mov	r5, r4
 800720a:	4628      	mov	r0, r5
 800720c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007210:	f000 f838 	bl	8007284 <_malloc_usable_size_r>
 8007214:	4284      	cmp	r4, r0
 8007216:	4607      	mov	r7, r0
 8007218:	d802      	bhi.n	8007220 <_realloc_r+0x34>
 800721a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800721e:	d812      	bhi.n	8007246 <_realloc_r+0x5a>
 8007220:	4621      	mov	r1, r4
 8007222:	4640      	mov	r0, r8
 8007224:	f7ff ff6e 	bl	8007104 <_malloc_r>
 8007228:	4605      	mov	r5, r0
 800722a:	2800      	cmp	r0, #0
 800722c:	d0ed      	beq.n	800720a <_realloc_r+0x1e>
 800722e:	42bc      	cmp	r4, r7
 8007230:	4622      	mov	r2, r4
 8007232:	4631      	mov	r1, r6
 8007234:	bf28      	it	cs
 8007236:	463a      	movcs	r2, r7
 8007238:	f7ff fed0 	bl	8006fdc <memcpy>
 800723c:	4631      	mov	r1, r6
 800723e:	4640      	mov	r0, r8
 8007240:	f7ff fef4 	bl	800702c <_free_r>
 8007244:	e7e1      	b.n	800720a <_realloc_r+0x1e>
 8007246:	4635      	mov	r5, r6
 8007248:	e7df      	b.n	800720a <_realloc_r+0x1e>
	...

0800724c <_sbrk_r>:
 800724c:	b538      	push	{r3, r4, r5, lr}
 800724e:	4d06      	ldr	r5, [pc, #24]	; (8007268 <_sbrk_r+0x1c>)
 8007250:	2300      	movs	r3, #0
 8007252:	4604      	mov	r4, r0
 8007254:	4608      	mov	r0, r1
 8007256:	602b      	str	r3, [r5, #0]
 8007258:	f7fb fd2e 	bl	8002cb8 <_sbrk>
 800725c:	1c43      	adds	r3, r0, #1
 800725e:	d102      	bne.n	8007266 <_sbrk_r+0x1a>
 8007260:	682b      	ldr	r3, [r5, #0]
 8007262:	b103      	cbz	r3, 8007266 <_sbrk_r+0x1a>
 8007264:	6023      	str	r3, [r4, #0]
 8007266:	bd38      	pop	{r3, r4, r5, pc}
 8007268:	20000744 	.word	0x20000744

0800726c <__malloc_lock>:
 800726c:	4801      	ldr	r0, [pc, #4]	; (8007274 <__malloc_lock+0x8>)
 800726e:	f000 b811 	b.w	8007294 <__retarget_lock_acquire_recursive>
 8007272:	bf00      	nop
 8007274:	20000748 	.word	0x20000748

08007278 <__malloc_unlock>:
 8007278:	4801      	ldr	r0, [pc, #4]	; (8007280 <__malloc_unlock+0x8>)
 800727a:	f000 b80c 	b.w	8007296 <__retarget_lock_release_recursive>
 800727e:	bf00      	nop
 8007280:	20000748 	.word	0x20000748

08007284 <_malloc_usable_size_r>:
 8007284:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007288:	1f18      	subs	r0, r3, #4
 800728a:	2b00      	cmp	r3, #0
 800728c:	bfbc      	itt	lt
 800728e:	580b      	ldrlt	r3, [r1, r0]
 8007290:	18c0      	addlt	r0, r0, r3
 8007292:	4770      	bx	lr

08007294 <__retarget_lock_acquire_recursive>:
 8007294:	4770      	bx	lr

08007296 <__retarget_lock_release_recursive>:
 8007296:	4770      	bx	lr

08007298 <_init>:
 8007298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800729a:	bf00      	nop
 800729c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800729e:	bc08      	pop	{r3}
 80072a0:	469e      	mov	lr, r3
 80072a2:	4770      	bx	lr

080072a4 <_fini>:
 80072a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072a6:	bf00      	nop
 80072a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072aa:	bc08      	pop	{r3}
 80072ac:	469e      	mov	lr, r3
 80072ae:	4770      	bx	lr
