
FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e20  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08005fc0  08005fc0  00015fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006030  08006030  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006030  08006030  00016030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006038  08006038  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006038  08006038  00016038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800603c  0800603c  0001603c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006040  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000228  20000070  080060b0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000298  080060b0  00020298  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010322  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000242b  00000000  00000000  000303c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e80  00000000  00000000  000327f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000da8  00000000  00000000  00033670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001743a  00000000  00000000  00034418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010a25  00000000  00000000  0004b852  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000983ba  00000000  00000000  0005c277  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f4631  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000421c  00000000  00000000  000f4684  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005fa8 	.word	0x08005fa8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08005fa8 	.word	0x08005fa8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2iz>:
 800084c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000854:	d215      	bcs.n	8000882 <__aeabi_d2iz+0x36>
 8000856:	d511      	bpl.n	800087c <__aeabi_d2iz+0x30>
 8000858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d912      	bls.n	8000888 <__aeabi_d2iz+0x3c>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000872:	fa23 f002 	lsr.w	r0, r3, r2
 8000876:	bf18      	it	ne
 8000878:	4240      	negne	r0, r0
 800087a:	4770      	bx	lr
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	4770      	bx	lr
 8000882:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000886:	d105      	bne.n	8000894 <__aeabi_d2iz+0x48>
 8000888:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800088c:	bf08      	it	eq
 800088e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000892:	4770      	bx	lr
 8000894:	f04f 0000 	mov.w	r0, #0
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop

0800089c <__aeabi_d2f>:
 800089c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008a0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008a4:	bf24      	itt	cs
 80008a6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008aa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008ae:	d90d      	bls.n	80008cc <__aeabi_d2f+0x30>
 80008b0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80008b4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80008b8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80008bc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80008c0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008c4:	bf08      	it	eq
 80008c6:	f020 0001 	biceq.w	r0, r0, #1
 80008ca:	4770      	bx	lr
 80008cc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80008d0:	d121      	bne.n	8000916 <__aeabi_d2f+0x7a>
 80008d2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80008d6:	bfbc      	itt	lt
 80008d8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80008dc:	4770      	bxlt	lr
 80008de:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008e2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008e6:	f1c2 0218 	rsb	r2, r2, #24
 80008ea:	f1c2 0c20 	rsb	ip, r2, #32
 80008ee:	fa10 f30c 	lsls.w	r3, r0, ip
 80008f2:	fa20 f002 	lsr.w	r0, r0, r2
 80008f6:	bf18      	it	ne
 80008f8:	f040 0001 	orrne.w	r0, r0, #1
 80008fc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000900:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000904:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000908:	ea40 000c 	orr.w	r0, r0, ip
 800090c:	fa23 f302 	lsr.w	r3, r3, r2
 8000910:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000914:	e7cc      	b.n	80008b0 <__aeabi_d2f+0x14>
 8000916:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800091a:	d107      	bne.n	800092c <__aeabi_d2f+0x90>
 800091c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000920:	bf1e      	ittt	ne
 8000922:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000926:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800092a:	4770      	bxne	lr
 800092c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000930:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000934:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <__aeabi_uldivmod>:
 800093c:	b953      	cbnz	r3, 8000954 <__aeabi_uldivmod+0x18>
 800093e:	b94a      	cbnz	r2, 8000954 <__aeabi_uldivmod+0x18>
 8000940:	2900      	cmp	r1, #0
 8000942:	bf08      	it	eq
 8000944:	2800      	cmpeq	r0, #0
 8000946:	bf1c      	itt	ne
 8000948:	f04f 31ff 	movne.w	r1, #4294967295
 800094c:	f04f 30ff 	movne.w	r0, #4294967295
 8000950:	f000 b974 	b.w	8000c3c <__aeabi_idiv0>
 8000954:	f1ad 0c08 	sub.w	ip, sp, #8
 8000958:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800095c:	f000 f806 	bl	800096c <__udivmoddi4>
 8000960:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000964:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000968:	b004      	add	sp, #16
 800096a:	4770      	bx	lr

0800096c <__udivmoddi4>:
 800096c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000970:	9d08      	ldr	r5, [sp, #32]
 8000972:	4604      	mov	r4, r0
 8000974:	468e      	mov	lr, r1
 8000976:	2b00      	cmp	r3, #0
 8000978:	d14d      	bne.n	8000a16 <__udivmoddi4+0xaa>
 800097a:	428a      	cmp	r2, r1
 800097c:	4694      	mov	ip, r2
 800097e:	d969      	bls.n	8000a54 <__udivmoddi4+0xe8>
 8000980:	fab2 f282 	clz	r2, r2
 8000984:	b152      	cbz	r2, 800099c <__udivmoddi4+0x30>
 8000986:	fa01 f302 	lsl.w	r3, r1, r2
 800098a:	f1c2 0120 	rsb	r1, r2, #32
 800098e:	fa20 f101 	lsr.w	r1, r0, r1
 8000992:	fa0c fc02 	lsl.w	ip, ip, r2
 8000996:	ea41 0e03 	orr.w	lr, r1, r3
 800099a:	4094      	lsls	r4, r2
 800099c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009a0:	0c21      	lsrs	r1, r4, #16
 80009a2:	fbbe f6f8 	udiv	r6, lr, r8
 80009a6:	fa1f f78c 	uxth.w	r7, ip
 80009aa:	fb08 e316 	mls	r3, r8, r6, lr
 80009ae:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80009b2:	fb06 f107 	mul.w	r1, r6, r7
 80009b6:	4299      	cmp	r1, r3
 80009b8:	d90a      	bls.n	80009d0 <__udivmoddi4+0x64>
 80009ba:	eb1c 0303 	adds.w	r3, ip, r3
 80009be:	f106 30ff 	add.w	r0, r6, #4294967295
 80009c2:	f080 811f 	bcs.w	8000c04 <__udivmoddi4+0x298>
 80009c6:	4299      	cmp	r1, r3
 80009c8:	f240 811c 	bls.w	8000c04 <__udivmoddi4+0x298>
 80009cc:	3e02      	subs	r6, #2
 80009ce:	4463      	add	r3, ip
 80009d0:	1a5b      	subs	r3, r3, r1
 80009d2:	b2a4      	uxth	r4, r4
 80009d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80009d8:	fb08 3310 	mls	r3, r8, r0, r3
 80009dc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80009e0:	fb00 f707 	mul.w	r7, r0, r7
 80009e4:	42a7      	cmp	r7, r4
 80009e6:	d90a      	bls.n	80009fe <__udivmoddi4+0x92>
 80009e8:	eb1c 0404 	adds.w	r4, ip, r4
 80009ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80009f0:	f080 810a 	bcs.w	8000c08 <__udivmoddi4+0x29c>
 80009f4:	42a7      	cmp	r7, r4
 80009f6:	f240 8107 	bls.w	8000c08 <__udivmoddi4+0x29c>
 80009fa:	4464      	add	r4, ip
 80009fc:	3802      	subs	r0, #2
 80009fe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a02:	1be4      	subs	r4, r4, r7
 8000a04:	2600      	movs	r6, #0
 8000a06:	b11d      	cbz	r5, 8000a10 <__udivmoddi4+0xa4>
 8000a08:	40d4      	lsrs	r4, r2
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	e9c5 4300 	strd	r4, r3, [r5]
 8000a10:	4631      	mov	r1, r6
 8000a12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a16:	428b      	cmp	r3, r1
 8000a18:	d909      	bls.n	8000a2e <__udivmoddi4+0xc2>
 8000a1a:	2d00      	cmp	r5, #0
 8000a1c:	f000 80ef 	beq.w	8000bfe <__udivmoddi4+0x292>
 8000a20:	2600      	movs	r6, #0
 8000a22:	e9c5 0100 	strd	r0, r1, [r5]
 8000a26:	4630      	mov	r0, r6
 8000a28:	4631      	mov	r1, r6
 8000a2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a2e:	fab3 f683 	clz	r6, r3
 8000a32:	2e00      	cmp	r6, #0
 8000a34:	d14a      	bne.n	8000acc <__udivmoddi4+0x160>
 8000a36:	428b      	cmp	r3, r1
 8000a38:	d302      	bcc.n	8000a40 <__udivmoddi4+0xd4>
 8000a3a:	4282      	cmp	r2, r0
 8000a3c:	f200 80f9 	bhi.w	8000c32 <__udivmoddi4+0x2c6>
 8000a40:	1a84      	subs	r4, r0, r2
 8000a42:	eb61 0303 	sbc.w	r3, r1, r3
 8000a46:	2001      	movs	r0, #1
 8000a48:	469e      	mov	lr, r3
 8000a4a:	2d00      	cmp	r5, #0
 8000a4c:	d0e0      	beq.n	8000a10 <__udivmoddi4+0xa4>
 8000a4e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000a52:	e7dd      	b.n	8000a10 <__udivmoddi4+0xa4>
 8000a54:	b902      	cbnz	r2, 8000a58 <__udivmoddi4+0xec>
 8000a56:	deff      	udf	#255	; 0xff
 8000a58:	fab2 f282 	clz	r2, r2
 8000a5c:	2a00      	cmp	r2, #0
 8000a5e:	f040 8092 	bne.w	8000b86 <__udivmoddi4+0x21a>
 8000a62:	eba1 010c 	sub.w	r1, r1, ip
 8000a66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a6a:	fa1f fe8c 	uxth.w	lr, ip
 8000a6e:	2601      	movs	r6, #1
 8000a70:	0c20      	lsrs	r0, r4, #16
 8000a72:	fbb1 f3f7 	udiv	r3, r1, r7
 8000a76:	fb07 1113 	mls	r1, r7, r3, r1
 8000a7a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a7e:	fb0e f003 	mul.w	r0, lr, r3
 8000a82:	4288      	cmp	r0, r1
 8000a84:	d908      	bls.n	8000a98 <__udivmoddi4+0x12c>
 8000a86:	eb1c 0101 	adds.w	r1, ip, r1
 8000a8a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000a8e:	d202      	bcs.n	8000a96 <__udivmoddi4+0x12a>
 8000a90:	4288      	cmp	r0, r1
 8000a92:	f200 80cb 	bhi.w	8000c2c <__udivmoddi4+0x2c0>
 8000a96:	4643      	mov	r3, r8
 8000a98:	1a09      	subs	r1, r1, r0
 8000a9a:	b2a4      	uxth	r4, r4
 8000a9c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000aa0:	fb07 1110 	mls	r1, r7, r0, r1
 8000aa4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000aa8:	fb0e fe00 	mul.w	lr, lr, r0
 8000aac:	45a6      	cmp	lr, r4
 8000aae:	d908      	bls.n	8000ac2 <__udivmoddi4+0x156>
 8000ab0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ab4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ab8:	d202      	bcs.n	8000ac0 <__udivmoddi4+0x154>
 8000aba:	45a6      	cmp	lr, r4
 8000abc:	f200 80bb 	bhi.w	8000c36 <__udivmoddi4+0x2ca>
 8000ac0:	4608      	mov	r0, r1
 8000ac2:	eba4 040e 	sub.w	r4, r4, lr
 8000ac6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000aca:	e79c      	b.n	8000a06 <__udivmoddi4+0x9a>
 8000acc:	f1c6 0720 	rsb	r7, r6, #32
 8000ad0:	40b3      	lsls	r3, r6
 8000ad2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ad6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ada:	fa20 f407 	lsr.w	r4, r0, r7
 8000ade:	fa01 f306 	lsl.w	r3, r1, r6
 8000ae2:	431c      	orrs	r4, r3
 8000ae4:	40f9      	lsrs	r1, r7
 8000ae6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000aea:	fa00 f306 	lsl.w	r3, r0, r6
 8000aee:	fbb1 f8f9 	udiv	r8, r1, r9
 8000af2:	0c20      	lsrs	r0, r4, #16
 8000af4:	fa1f fe8c 	uxth.w	lr, ip
 8000af8:	fb09 1118 	mls	r1, r9, r8, r1
 8000afc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b00:	fb08 f00e 	mul.w	r0, r8, lr
 8000b04:	4288      	cmp	r0, r1
 8000b06:	fa02 f206 	lsl.w	r2, r2, r6
 8000b0a:	d90b      	bls.n	8000b24 <__udivmoddi4+0x1b8>
 8000b0c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b10:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b14:	f080 8088 	bcs.w	8000c28 <__udivmoddi4+0x2bc>
 8000b18:	4288      	cmp	r0, r1
 8000b1a:	f240 8085 	bls.w	8000c28 <__udivmoddi4+0x2bc>
 8000b1e:	f1a8 0802 	sub.w	r8, r8, #2
 8000b22:	4461      	add	r1, ip
 8000b24:	1a09      	subs	r1, r1, r0
 8000b26:	b2a4      	uxth	r4, r4
 8000b28:	fbb1 f0f9 	udiv	r0, r1, r9
 8000b2c:	fb09 1110 	mls	r1, r9, r0, r1
 8000b30:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000b34:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b38:	458e      	cmp	lr, r1
 8000b3a:	d908      	bls.n	8000b4e <__udivmoddi4+0x1e2>
 8000b3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b40:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b44:	d26c      	bcs.n	8000c20 <__udivmoddi4+0x2b4>
 8000b46:	458e      	cmp	lr, r1
 8000b48:	d96a      	bls.n	8000c20 <__udivmoddi4+0x2b4>
 8000b4a:	3802      	subs	r0, #2
 8000b4c:	4461      	add	r1, ip
 8000b4e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b52:	fba0 9402 	umull	r9, r4, r0, r2
 8000b56:	eba1 010e 	sub.w	r1, r1, lr
 8000b5a:	42a1      	cmp	r1, r4
 8000b5c:	46c8      	mov	r8, r9
 8000b5e:	46a6      	mov	lr, r4
 8000b60:	d356      	bcc.n	8000c10 <__udivmoddi4+0x2a4>
 8000b62:	d053      	beq.n	8000c0c <__udivmoddi4+0x2a0>
 8000b64:	b15d      	cbz	r5, 8000b7e <__udivmoddi4+0x212>
 8000b66:	ebb3 0208 	subs.w	r2, r3, r8
 8000b6a:	eb61 010e 	sbc.w	r1, r1, lr
 8000b6e:	fa01 f707 	lsl.w	r7, r1, r7
 8000b72:	fa22 f306 	lsr.w	r3, r2, r6
 8000b76:	40f1      	lsrs	r1, r6
 8000b78:	431f      	orrs	r7, r3
 8000b7a:	e9c5 7100 	strd	r7, r1, [r5]
 8000b7e:	2600      	movs	r6, #0
 8000b80:	4631      	mov	r1, r6
 8000b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b86:	f1c2 0320 	rsb	r3, r2, #32
 8000b8a:	40d8      	lsrs	r0, r3
 8000b8c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b90:	fa21 f303 	lsr.w	r3, r1, r3
 8000b94:	4091      	lsls	r1, r2
 8000b96:	4301      	orrs	r1, r0
 8000b98:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b9c:	fa1f fe8c 	uxth.w	lr, ip
 8000ba0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ba4:	fb07 3610 	mls	r6, r7, r0, r3
 8000ba8:	0c0b      	lsrs	r3, r1, #16
 8000baa:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000bae:	fb00 f60e 	mul.w	r6, r0, lr
 8000bb2:	429e      	cmp	r6, r3
 8000bb4:	fa04 f402 	lsl.w	r4, r4, r2
 8000bb8:	d908      	bls.n	8000bcc <__udivmoddi4+0x260>
 8000bba:	eb1c 0303 	adds.w	r3, ip, r3
 8000bbe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000bc2:	d22f      	bcs.n	8000c24 <__udivmoddi4+0x2b8>
 8000bc4:	429e      	cmp	r6, r3
 8000bc6:	d92d      	bls.n	8000c24 <__udivmoddi4+0x2b8>
 8000bc8:	3802      	subs	r0, #2
 8000bca:	4463      	add	r3, ip
 8000bcc:	1b9b      	subs	r3, r3, r6
 8000bce:	b289      	uxth	r1, r1
 8000bd0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000bd4:	fb07 3316 	mls	r3, r7, r6, r3
 8000bd8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bdc:	fb06 f30e 	mul.w	r3, r6, lr
 8000be0:	428b      	cmp	r3, r1
 8000be2:	d908      	bls.n	8000bf6 <__udivmoddi4+0x28a>
 8000be4:	eb1c 0101 	adds.w	r1, ip, r1
 8000be8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000bec:	d216      	bcs.n	8000c1c <__udivmoddi4+0x2b0>
 8000bee:	428b      	cmp	r3, r1
 8000bf0:	d914      	bls.n	8000c1c <__udivmoddi4+0x2b0>
 8000bf2:	3e02      	subs	r6, #2
 8000bf4:	4461      	add	r1, ip
 8000bf6:	1ac9      	subs	r1, r1, r3
 8000bf8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000bfc:	e738      	b.n	8000a70 <__udivmoddi4+0x104>
 8000bfe:	462e      	mov	r6, r5
 8000c00:	4628      	mov	r0, r5
 8000c02:	e705      	b.n	8000a10 <__udivmoddi4+0xa4>
 8000c04:	4606      	mov	r6, r0
 8000c06:	e6e3      	b.n	80009d0 <__udivmoddi4+0x64>
 8000c08:	4618      	mov	r0, r3
 8000c0a:	e6f8      	b.n	80009fe <__udivmoddi4+0x92>
 8000c0c:	454b      	cmp	r3, r9
 8000c0e:	d2a9      	bcs.n	8000b64 <__udivmoddi4+0x1f8>
 8000c10:	ebb9 0802 	subs.w	r8, r9, r2
 8000c14:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c18:	3801      	subs	r0, #1
 8000c1a:	e7a3      	b.n	8000b64 <__udivmoddi4+0x1f8>
 8000c1c:	4646      	mov	r6, r8
 8000c1e:	e7ea      	b.n	8000bf6 <__udivmoddi4+0x28a>
 8000c20:	4620      	mov	r0, r4
 8000c22:	e794      	b.n	8000b4e <__udivmoddi4+0x1e2>
 8000c24:	4640      	mov	r0, r8
 8000c26:	e7d1      	b.n	8000bcc <__udivmoddi4+0x260>
 8000c28:	46d0      	mov	r8, sl
 8000c2a:	e77b      	b.n	8000b24 <__udivmoddi4+0x1b8>
 8000c2c:	3b02      	subs	r3, #2
 8000c2e:	4461      	add	r1, ip
 8000c30:	e732      	b.n	8000a98 <__udivmoddi4+0x12c>
 8000c32:	4630      	mov	r0, r6
 8000c34:	e709      	b.n	8000a4a <__udivmoddi4+0xde>
 8000c36:	4464      	add	r4, ip
 8000c38:	3802      	subs	r0, #2
 8000c3a:	e742      	b.n	8000ac2 <__udivmoddi4+0x156>

08000c3c <__aeabi_idiv0>:
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <DS18B20_StartAll>:

//
//	Start conversion on all sensors
//
void DS18B20_StartAll()
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
	OneWire_Reset(&OneWire); // Reset the bus
 8000c44:	4806      	ldr	r0, [pc, #24]	; (8000c60 <DS18B20_StartAll+0x20>)
 8000c46:	f000 faa6 	bl	8001196 <OneWire_Reset>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_SKIPROM); // Skip ROM command
 8000c4a:	21cc      	movs	r1, #204	; 0xcc
 8000c4c:	4804      	ldr	r0, [pc, #16]	; (8000c60 <DS18B20_StartAll+0x20>)
 8000c4e:	f000 fb1f 	bl	8001290 <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, DS18B20_CMD_CONVERTTEMP); // Start conversion on all sensors
 8000c52:	2144      	movs	r1, #68	; 0x44
 8000c54:	4802      	ldr	r0, [pc, #8]	; (8000c60 <DS18B20_StartAll+0x20>)
 8000c56:	f000 fb1b 	bl	8001290 <OneWire_WriteByte>
}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	200000cc 	.word	0x200000cc

08000c64 <DS18B20_Read>:

//
//	Read one sensor
//
uint8_t DS18B20_Read(uint8_t number, float *destination)
{
 8000c64:	b590      	push	{r4, r7, lr}
 8000c66:	b087      	sub	sp, #28
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	6039      	str	r1, [r7, #0]
 8000c6e:	71fb      	strb	r3, [r7, #7]
	if( number >= TempSensorCount) // If read sensor is not availible
 8000c70:	4b4d      	ldr	r3, [pc, #308]	; (8000da8 <DS18B20_Read+0x144>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	79fa      	ldrb	r2, [r7, #7]
 8000c76:	429a      	cmp	r2, r3
 8000c78:	d301      	bcc.n	8000c7e <DS18B20_Read+0x1a>
		return 0;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	e090      	b.n	8000da0 <DS18B20_Read+0x13c>

	uint16_t temperature;
	uint8_t resolution;
	float result;
	uint8_t i = 0;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	74fb      	strb	r3, [r7, #19]
	uint8_t crc;

#endif


	if (!DS18B20_Is((uint8_t*)&ds18b20[number].Address)) // Check if sensor is DS18B20 family
 8000c82:	79fb      	ldrb	r3, [r7, #7]
 8000c84:	011b      	lsls	r3, r3, #4
 8000c86:	4a49      	ldr	r2, [pc, #292]	; (8000dac <DS18B20_Read+0x148>)
 8000c88:	4413      	add	r3, r2
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f000 f93c 	bl	8000f08 <DS18B20_Is>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d101      	bne.n	8000c9a <DS18B20_Read+0x36>
		return 0;
 8000c96:	2300      	movs	r3, #0
 8000c98:	e082      	b.n	8000da0 <DS18B20_Read+0x13c>

	if (!OneWire_ReadBit(&OneWire)) // Check if the bus is released
 8000c9a:	4845      	ldr	r0, [pc, #276]	; (8000db0 <DS18B20_Read+0x14c>)
 8000c9c:	f000 face 	bl	800123c <OneWire_ReadBit>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d101      	bne.n	8000caa <DS18B20_Read+0x46>
		return 0; // Busy bus - conversion is not finished
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e07a      	b.n	8000da0 <DS18B20_Read+0x13c>

	OneWire_Reset(&OneWire); // Reset the bus
 8000caa:	4841      	ldr	r0, [pc, #260]	; (8000db0 <DS18B20_Read+0x14c>)
 8000cac:	f000 fa73 	bl	8001196 <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 8000cb0:	79fb      	ldrb	r3, [r7, #7]
 8000cb2:	011b      	lsls	r3, r3, #4
 8000cb4:	4a3d      	ldr	r2, [pc, #244]	; (8000dac <DS18B20_Read+0x148>)
 8000cb6:	4413      	add	r3, r2
 8000cb8:	4619      	mov	r1, r3
 8000cba:	483d      	ldr	r0, [pc, #244]	; (8000db0 <DS18B20_Read+0x14c>)
 8000cbc:	f000 fc1d 	bl	80014fa <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_RSCRATCHPAD); // Read scratchpad command
 8000cc0:	21be      	movs	r1, #190	; 0xbe
 8000cc2:	483b      	ldr	r0, [pc, #236]	; (8000db0 <DS18B20_Read+0x14c>)
 8000cc4:	f000 fae4 	bl	8001290 <OneWire_WriteByte>

	for (i = 0; i < DS18B20_DATA_LEN; i++) // Read scratchpad
 8000cc8:	2300      	movs	r3, #0
 8000cca:	74fb      	strb	r3, [r7, #19]
 8000ccc:	e00d      	b.n	8000cea <DS18B20_Read+0x86>
		data[i] = OneWire_ReadByte(&OneWire);
 8000cce:	7cfc      	ldrb	r4, [r7, #19]
 8000cd0:	4837      	ldr	r0, [pc, #220]	; (8000db0 <DS18B20_Read+0x14c>)
 8000cd2:	f000 fafb 	bl	80012cc <OneWire_ReadByte>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	461a      	mov	r2, r3
 8000cda:	f104 0318 	add.w	r3, r4, #24
 8000cde:	443b      	add	r3, r7
 8000ce0:	f803 2c10 	strb.w	r2, [r3, #-16]
	for (i = 0; i < DS18B20_DATA_LEN; i++) // Read scratchpad
 8000ce4:	7cfb      	ldrb	r3, [r7, #19]
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	74fb      	strb	r3, [r7, #19]
 8000cea:	7cfb      	ldrb	r3, [r7, #19]
 8000cec:	2b04      	cmp	r3, #4
 8000cee:	d9ee      	bls.n	8000cce <DS18B20_Read+0x6a>
	crc = OneWire_CRC8(data, 8); // CRC calculation

	if (crc != data[8])
		return 0; // CRC invalid
#endif
	temperature = data[0] | (data[1] << 8); // Temperature is 16-bit length
 8000cf0:	7a3b      	ldrb	r3, [r7, #8]
 8000cf2:	b21a      	sxth	r2, r3
 8000cf4:	7a7b      	ldrb	r3, [r7, #9]
 8000cf6:	021b      	lsls	r3, r3, #8
 8000cf8:	b21b      	sxth	r3, r3
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	b21b      	sxth	r3, r3
 8000cfe:	823b      	strh	r3, [r7, #16]

	OneWire_Reset(&OneWire); // Reset the bus
 8000d00:	482b      	ldr	r0, [pc, #172]	; (8000db0 <DS18B20_Read+0x14c>)
 8000d02:	f000 fa48 	bl	8001196 <OneWire_Reset>

	resolution = ((data[4] & 0x60) >> 5) + 9; // Sensor's resolution from scratchpad's byte 4
 8000d06:	7b3b      	ldrb	r3, [r7, #12]
 8000d08:	115b      	asrs	r3, r3, #5
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	f003 0303 	and.w	r3, r3, #3
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	3309      	adds	r3, #9
 8000d14:	73fb      	strb	r3, [r7, #15]

	switch (resolution) // Chceck the correct value dur to resolution
 8000d16:	7bfb      	ldrb	r3, [r7, #15]
 8000d18:	3b09      	subs	r3, #9
 8000d1a:	2b03      	cmp	r3, #3
 8000d1c:	d83a      	bhi.n	8000d94 <DS18B20_Read+0x130>
 8000d1e:	a201      	add	r2, pc, #4	; (adr r2, 8000d24 <DS18B20_Read+0xc0>)
 8000d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d24:	08000d35 	.word	0x08000d35
 8000d28:	08000d4d 	.word	0x08000d4d
 8000d2c:	08000d65 	.word	0x08000d65
 8000d30:	08000d7d 	.word	0x08000d7d
	{
		case DS18B20_Resolution_9bits:
			result = temperature*(float)DS18B20_STEP_9BIT;
 8000d34:	8a3b      	ldrh	r3, [r7, #16]
 8000d36:	ee07 3a90 	vmov	s15, r3
 8000d3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d3e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000d42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d46:	edc7 7a05 	vstr	s15, [r7, #20]
		break;
 8000d4a:	e025      	b.n	8000d98 <DS18B20_Read+0x134>
		case DS18B20_Resolution_10bits:
			result = temperature*(float)DS18B20_STEP_10BIT;
 8000d4c:	8a3b      	ldrh	r3, [r7, #16]
 8000d4e:	ee07 3a90 	vmov	s15, r3
 8000d52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d56:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8000d5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d5e:	edc7 7a05 	vstr	s15, [r7, #20]
		 break;
 8000d62:	e019      	b.n	8000d98 <DS18B20_Read+0x134>
		case DS18B20_Resolution_11bits:
			result = temperature*(float)DS18B20_STEP_11BIT;
 8000d64:	8a3b      	ldrh	r3, [r7, #16]
 8000d66:	ee07 3a90 	vmov	s15, r3
 8000d6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d6e:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8000d72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d76:	edc7 7a05 	vstr	s15, [r7, #20]
		break;
 8000d7a:	e00d      	b.n	8000d98 <DS18B20_Read+0x134>
		case DS18B20_Resolution_12bits:
			result = temperature*(float)DS18B20_STEP_12BIT;
 8000d7c:	8a3b      	ldrh	r3, [r7, #16]
 8000d7e:	ee07 3a90 	vmov	s15, r3
 8000d82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d86:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8000db4 <DS18B20_Read+0x150>
 8000d8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d8e:	edc7 7a05 	vstr	s15, [r7, #20]
		 break;
 8000d92:	e001      	b.n	8000d98 <DS18B20_Read+0x134>
		default:
			result = 0xFF;
 8000d94:	4b08      	ldr	r3, [pc, #32]	; (8000db8 <DS18B20_Read+0x154>)
 8000d96:	617b      	str	r3, [r7, #20]
	}

	*destination = result;
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	697a      	ldr	r2, [r7, #20]
 8000d9c:	601a      	str	r2, [r3, #0]

	return 1; //temperature valid
 8000d9e:	2301      	movs	r3, #1
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	371c      	adds	r7, #28
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd90      	pop	{r4, r7, pc}
 8000da8:	200000e0 	.word	0x200000e0
 8000dac:	2000008c 	.word	0x2000008c
 8000db0:	200000cc 	.word	0x200000cc
 8000db4:	3d800000 	.word	0x3d800000
 8000db8:	437f0000 	.word	0x437f0000

08000dbc <DS18B20_SetResolution>:

	return conf;
}

uint8_t DS18B20_SetResolution(uint8_t number, DS18B20_Resolution_t resolution)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	460a      	mov	r2, r1
 8000dc6:	71fb      	strb	r3, [r7, #7]
 8000dc8:	4613      	mov	r3, r2
 8000dca:	71bb      	strb	r3, [r7, #6]
	if( number >= TempSensorCount)
 8000dcc:	4b4b      	ldr	r3, [pc, #300]	; (8000efc <DS18B20_SetResolution+0x140>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	79fa      	ldrb	r2, [r7, #7]
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	d301      	bcc.n	8000dda <DS18B20_SetResolution+0x1e>
		return 0;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	e08c      	b.n	8000ef4 <DS18B20_SetResolution+0x138>

	uint8_t th, tl, conf;
	if (!DS18B20_Is((uint8_t*)&ds18b20[number].Address))
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	011b      	lsls	r3, r3, #4
 8000dde:	4a48      	ldr	r2, [pc, #288]	; (8000f00 <DS18B20_SetResolution+0x144>)
 8000de0:	4413      	add	r3, r2
 8000de2:	4618      	mov	r0, r3
 8000de4:	f000 f890 	bl	8000f08 <DS18B20_Is>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d101      	bne.n	8000df2 <DS18B20_SetResolution+0x36>
		return 0;
 8000dee:	2300      	movs	r3, #0
 8000df0:	e080      	b.n	8000ef4 <DS18B20_SetResolution+0x138>

	OneWire_Reset(&OneWire); // Reset the bus
 8000df2:	4844      	ldr	r0, [pc, #272]	; (8000f04 <DS18B20_SetResolution+0x148>)
 8000df4:	f000 f9cf 	bl	8001196 <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 8000df8:	79fb      	ldrb	r3, [r7, #7]
 8000dfa:	011b      	lsls	r3, r3, #4
 8000dfc:	4a40      	ldr	r2, [pc, #256]	; (8000f00 <DS18B20_SetResolution+0x144>)
 8000dfe:	4413      	add	r3, r2
 8000e00:	4619      	mov	r1, r3
 8000e02:	4840      	ldr	r0, [pc, #256]	; (8000f04 <DS18B20_SetResolution+0x148>)
 8000e04:	f000 fb79 	bl	80014fa <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_RSCRATCHPAD); // Read scratchpad command
 8000e08:	21be      	movs	r1, #190	; 0xbe
 8000e0a:	483e      	ldr	r0, [pc, #248]	; (8000f04 <DS18B20_SetResolution+0x148>)
 8000e0c:	f000 fa40 	bl	8001290 <OneWire_WriteByte>

	OneWire_ReadByte(&OneWire);
 8000e10:	483c      	ldr	r0, [pc, #240]	; (8000f04 <DS18B20_SetResolution+0x148>)
 8000e12:	f000 fa5b 	bl	80012cc <OneWire_ReadByte>
	OneWire_ReadByte(&OneWire);
 8000e16:	483b      	ldr	r0, [pc, #236]	; (8000f04 <DS18B20_SetResolution+0x148>)
 8000e18:	f000 fa58 	bl	80012cc <OneWire_ReadByte>

	th = OneWire_ReadByte(&OneWire); 	// Writing to scratchpad begins from the temperature alarms bytes
 8000e1c:	4839      	ldr	r0, [pc, #228]	; (8000f04 <DS18B20_SetResolution+0x148>)
 8000e1e:	f000 fa55 	bl	80012cc <OneWire_ReadByte>
 8000e22:	4603      	mov	r3, r0
 8000e24:	73bb      	strb	r3, [r7, #14]
	tl = OneWire_ReadByte(&OneWire); 	// 	so i have to store them.
 8000e26:	4837      	ldr	r0, [pc, #220]	; (8000f04 <DS18B20_SetResolution+0x148>)
 8000e28:	f000 fa50 	bl	80012cc <OneWire_ReadByte>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	737b      	strb	r3, [r7, #13]
	conf = OneWire_ReadByte(&OneWire);	// Config byte
 8000e30:	4834      	ldr	r0, [pc, #208]	; (8000f04 <DS18B20_SetResolution+0x148>)
 8000e32:	f000 fa4b 	bl	80012cc <OneWire_ReadByte>
 8000e36:	4603      	mov	r3, r0
 8000e38:	73fb      	strb	r3, [r7, #15]

	if (resolution == DS18B20_Resolution_9bits) // Bits setting
 8000e3a:	79bb      	ldrb	r3, [r7, #6]
 8000e3c:	2b09      	cmp	r3, #9
 8000e3e:	d108      	bne.n	8000e52 <DS18B20_SetResolution+0x96>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8000e40:	7bfb      	ldrb	r3, [r7, #15]
 8000e42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000e46:	73fb      	strb	r3, [r7, #15]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8000e48:	7bfb      	ldrb	r3, [r7, #15]
 8000e4a:	f023 0320 	bic.w	r3, r3, #32
 8000e4e:	73fb      	strb	r3, [r7, #15]
 8000e50:	e022      	b.n	8000e98 <DS18B20_SetResolution+0xdc>
	}
	else if (resolution == DS18B20_Resolution_10bits)
 8000e52:	79bb      	ldrb	r3, [r7, #6]
 8000e54:	2b0a      	cmp	r3, #10
 8000e56:	d108      	bne.n	8000e6a <DS18B20_SetResolution+0xae>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8000e58:	7bfb      	ldrb	r3, [r7, #15]
 8000e5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000e5e:	73fb      	strb	r3, [r7, #15]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8000e60:	7bfb      	ldrb	r3, [r7, #15]
 8000e62:	f043 0320 	orr.w	r3, r3, #32
 8000e66:	73fb      	strb	r3, [r7, #15]
 8000e68:	e016      	b.n	8000e98 <DS18B20_SetResolution+0xdc>
	}
	else if (resolution == DS18B20_Resolution_11bits)
 8000e6a:	79bb      	ldrb	r3, [r7, #6]
 8000e6c:	2b0b      	cmp	r3, #11
 8000e6e:	d108      	bne.n	8000e82 <DS18B20_SetResolution+0xc6>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8000e70:	7bfb      	ldrb	r3, [r7, #15]
 8000e72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e76:	73fb      	strb	r3, [r7, #15]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8000e78:	7bfb      	ldrb	r3, [r7, #15]
 8000e7a:	f023 0320 	bic.w	r3, r3, #32
 8000e7e:	73fb      	strb	r3, [r7, #15]
 8000e80:	e00a      	b.n	8000e98 <DS18B20_SetResolution+0xdc>
	}
	else if (resolution == DS18B20_Resolution_12bits)
 8000e82:	79bb      	ldrb	r3, [r7, #6]
 8000e84:	2b0c      	cmp	r3, #12
 8000e86:	d107      	bne.n	8000e98 <DS18B20_SetResolution+0xdc>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8000e88:	7bfb      	ldrb	r3, [r7, #15]
 8000e8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e8e:	73fb      	strb	r3, [r7, #15]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8000e90:	7bfb      	ldrb	r3, [r7, #15]
 8000e92:	f043 0320 	orr.w	r3, r3, #32
 8000e96:	73fb      	strb	r3, [r7, #15]
	}

	OneWire_Reset(&OneWire); // Reset the bus
 8000e98:	481a      	ldr	r0, [pc, #104]	; (8000f04 <DS18B20_SetResolution+0x148>)
 8000e9a:	f000 f97c 	bl	8001196 <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	011b      	lsls	r3, r3, #4
 8000ea2:	4a17      	ldr	r2, [pc, #92]	; (8000f00 <DS18B20_SetResolution+0x144>)
 8000ea4:	4413      	add	r3, r2
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4816      	ldr	r0, [pc, #88]	; (8000f04 <DS18B20_SetResolution+0x148>)
 8000eaa:	f000 fb26 	bl	80014fa <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_WSCRATCHPAD); // Write scratchpad command
 8000eae:	214e      	movs	r1, #78	; 0x4e
 8000eb0:	4814      	ldr	r0, [pc, #80]	; (8000f04 <DS18B20_SetResolution+0x148>)
 8000eb2:	f000 f9ed 	bl	8001290 <OneWire_WriteByte>

	OneWire_WriteByte(&OneWire, th); // Write 3 bytes to scratchpad
 8000eb6:	7bbb      	ldrb	r3, [r7, #14]
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4812      	ldr	r0, [pc, #72]	; (8000f04 <DS18B20_SetResolution+0x148>)
 8000ebc:	f000 f9e8 	bl	8001290 <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, tl);
 8000ec0:	7b7b      	ldrb	r3, [r7, #13]
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	480f      	ldr	r0, [pc, #60]	; (8000f04 <DS18B20_SetResolution+0x148>)
 8000ec6:	f000 f9e3 	bl	8001290 <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, conf);
 8000eca:	7bfb      	ldrb	r3, [r7, #15]
 8000ecc:	4619      	mov	r1, r3
 8000ece:	480d      	ldr	r0, [pc, #52]	; (8000f04 <DS18B20_SetResolution+0x148>)
 8000ed0:	f000 f9de 	bl	8001290 <OneWire_WriteByte>

	OneWire_Reset(&OneWire); // Reset the bus
 8000ed4:	480b      	ldr	r0, [pc, #44]	; (8000f04 <DS18B20_SetResolution+0x148>)
 8000ed6:	f000 f95e 	bl	8001196 <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	011b      	lsls	r3, r3, #4
 8000ede:	4a08      	ldr	r2, [pc, #32]	; (8000f00 <DS18B20_SetResolution+0x144>)
 8000ee0:	4413      	add	r3, r2
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4807      	ldr	r0, [pc, #28]	; (8000f04 <DS18B20_SetResolution+0x148>)
 8000ee6:	f000 fb08 	bl	80014fa <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_CPYSCRATCHPAD); // Copy scratchpad to EEPROM
 8000eea:	2148      	movs	r1, #72	; 0x48
 8000eec:	4805      	ldr	r0, [pc, #20]	; (8000f04 <DS18B20_SetResolution+0x148>)
 8000eee:	f000 f9cf 	bl	8001290 <OneWire_WriteByte>

	return 1;
 8000ef2:	2301      	movs	r3, #1
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3710      	adds	r7, #16
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	200000e0 	.word	0x200000e0
 8000f00:	2000008c 	.word	0x2000008c
 8000f04:	200000cc 	.word	0x200000cc

08000f08 <DS18B20_Is>:

uint8_t DS18B20_Is(uint8_t* ROM)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
	if (*ROM == DS18B20_FAMILY_CODE) // Check family code
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	2b28      	cmp	r3, #40	; 0x28
 8000f16:	d101      	bne.n	8000f1c <DS18B20_Is+0x14>
		return 1;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	e000      	b.n	8000f1e <DS18B20_Is+0x16>
	return 0;
 8000f1c:	2300      	movs	r3, #0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
	...

08000f2c <DS18B20_AllDone>:

uint8_t DS18B20_AllDone(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
	return OneWire_ReadBit(&OneWire); // Bus is down - busy
 8000f30:	4802      	ldr	r0, [pc, #8]	; (8000f3c <DS18B20_AllDone+0x10>)
 8000f32:	f000 f983 	bl	800123c <OneWire_ReadBit>
 8000f36:	4603      	mov	r3, r0
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	200000cc 	.word	0x200000cc

08000f40 <DS18B20_ReadAll>:

void DS18B20_ReadAll(void)
{
 8000f40:	b590      	push	{r4, r7, lr}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
	uint8_t i;

	if (DS18B20_AllDone())
 8000f46:	f7ff fff1 	bl	8000f2c <DS18B20_AllDone>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d02e      	beq.n	8000fae <DS18B20_ReadAll+0x6e>
	{
		for(i = 0; i < TempSensorCount; i++) // All detected sensors loop
 8000f50:	2300      	movs	r3, #0
 8000f52:	71fb      	strb	r3, [r7, #7]
 8000f54:	e026      	b.n	8000fa4 <DS18B20_ReadAll+0x64>
		{
			ds18b20[i].ValidDataFlag = 0;
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	4a17      	ldr	r2, [pc, #92]	; (8000fb8 <DS18B20_ReadAll+0x78>)
 8000f5a:	011b      	lsls	r3, r3, #4
 8000f5c:	4413      	add	r3, r2
 8000f5e:	330c      	adds	r3, #12
 8000f60:	2200      	movs	r2, #0
 8000f62:	701a      	strb	r2, [r3, #0]

			if (DS18B20_Is((uint8_t*)&ds18b20[i].Address))
 8000f64:	79fb      	ldrb	r3, [r7, #7]
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	4a13      	ldr	r2, [pc, #76]	; (8000fb8 <DS18B20_ReadAll+0x78>)
 8000f6a:	4413      	add	r3, r2
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff ffcb 	bl	8000f08 <DS18B20_Is>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d012      	beq.n	8000f9e <DS18B20_ReadAll+0x5e>
			{
				ds18b20[i].ValidDataFlag = DS18B20_Read(i, &ds18b20[i].Temperature); // Read single sensor
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	011b      	lsls	r3, r3, #4
 8000f7c:	3308      	adds	r3, #8
 8000f7e:	4a0e      	ldr	r2, [pc, #56]	; (8000fb8 <DS18B20_ReadAll+0x78>)
 8000f80:	441a      	add	r2, r3
 8000f82:	79fc      	ldrb	r4, [r7, #7]
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	4611      	mov	r1, r2
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff fe6b 	bl	8000c64 <DS18B20_Read>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	4619      	mov	r1, r3
 8000f92:	4a09      	ldr	r2, [pc, #36]	; (8000fb8 <DS18B20_ReadAll+0x78>)
 8000f94:	0123      	lsls	r3, r4, #4
 8000f96:	4413      	add	r3, r2
 8000f98:	330c      	adds	r3, #12
 8000f9a:	460a      	mov	r2, r1
 8000f9c:	701a      	strb	r2, [r3, #0]
		for(i = 0; i < TempSensorCount; i++) // All detected sensors loop
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	71fb      	strb	r3, [r7, #7]
 8000fa4:	4b05      	ldr	r3, [pc, #20]	; (8000fbc <DS18B20_ReadAll+0x7c>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	79fa      	ldrb	r2, [r7, #7]
 8000faa:	429a      	cmp	r2, r3
 8000fac:	d3d3      	bcc.n	8000f56 <DS18B20_ReadAll+0x16>
			}
		}
	}
}
 8000fae:	bf00      	nop
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd90      	pop	{r4, r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	2000008c 	.word	0x2000008c
 8000fbc:	200000e0 	.word	0x200000e0

08000fc0 <DS18B20_Quantity>:
	for(i = 0; i < 8; i++)
		ds18b20[number].Address[i] = ROM[i]; // Write ROM into sensor's structure
}

uint8_t DS18B20_Quantity(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
	return TempSensorCount;
 8000fc4:	4b03      	ldr	r3, [pc, #12]	; (8000fd4 <DS18B20_Quantity+0x14>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	200000e0 	.word	0x200000e0

08000fd8 <DS18B20_GetTemperature>:

uint8_t DS18B20_GetTemperature(uint8_t number, float* destination)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	6039      	str	r1, [r7, #0]
 8000fe2:	71fb      	strb	r3, [r7, #7]
	if(!ds18b20[number].ValidDataFlag)
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	4a0c      	ldr	r2, [pc, #48]	; (8001018 <DS18B20_GetTemperature+0x40>)
 8000fe8:	011b      	lsls	r3, r3, #4
 8000fea:	4413      	add	r3, r2
 8000fec:	330c      	adds	r3, #12
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d101      	bne.n	8000ff8 <DS18B20_GetTemperature+0x20>
		return 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	e008      	b.n	800100a <DS18B20_GetTemperature+0x32>

	*destination = ds18b20[number].Temperature;
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	4a07      	ldr	r2, [pc, #28]	; (8001018 <DS18B20_GetTemperature+0x40>)
 8000ffc:	011b      	lsls	r3, r3, #4
 8000ffe:	4413      	add	r3, r2
 8001000:	3308      	adds	r3, #8
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	601a      	str	r2, [r3, #0]
	return 1;
 8001008:	2301      	movs	r3, #1

}
 800100a:	4618      	mov	r0, r3
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	2000008c 	.word	0x2000008c

0800101c <DS18B20_Init>:

void DS18B20_Init(DS18B20_Resolution_t resolution)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	71fb      	strb	r3, [r7, #7]
	uint8_t next = 0, i = 0, j;
 8001026:	2300      	movs	r3, #0
 8001028:	73fb      	strb	r3, [r7, #15]
 800102a:	2300      	movs	r3, #0
 800102c:	73bb      	strb	r3, [r7, #14]
	OneWire_Init(&OneWire, GPIOC, GPIO_PIN_11); // Init OneWire bus
 800102e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001032:	491f      	ldr	r1, [pc, #124]	; (80010b0 <DS18B20_Init+0x94>)
 8001034:	481f      	ldr	r0, [pc, #124]	; (80010b4 <DS18B20_Init+0x98>)
 8001036:	f000 fa9d 	bl	8001574 <OneWire_Init>

	next = OneWire_First(&OneWire); // Search first OneWire device
 800103a:	481e      	ldr	r0, [pc, #120]	; (80010b4 <DS18B20_Init+0x98>)
 800103c:	f000 fa40 	bl	80014c0 <OneWire_First>
 8001040:	4603      	mov	r3, r0
 8001042:	73fb      	strb	r3, [r7, #15]
	while(next)
 8001044:	e018      	b.n	8001078 <DS18B20_Init+0x5c>
	{
		TempSensorCount++;
 8001046:	4b1c      	ldr	r3, [pc, #112]	; (80010b8 <DS18B20_Init+0x9c>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	3301      	adds	r3, #1
 800104c:	b2da      	uxtb	r2, r3
 800104e:	4b1a      	ldr	r3, [pc, #104]	; (80010b8 <DS18B20_Init+0x9c>)
 8001050:	701a      	strb	r2, [r3, #0]
		OneWire_GetFullROM(&OneWire, (uint8_t*)&ds18b20[i++].Address); // Get the ROM of next sensor
 8001052:	7bbb      	ldrb	r3, [r7, #14]
 8001054:	1c5a      	adds	r2, r3, #1
 8001056:	73ba      	strb	r2, [r7, #14]
 8001058:	011b      	lsls	r3, r3, #4
 800105a:	4a18      	ldr	r2, [pc, #96]	; (80010bc <DS18B20_Init+0xa0>)
 800105c:	4413      	add	r3, r2
 800105e:	4619      	mov	r1, r3
 8001060:	4814      	ldr	r0, [pc, #80]	; (80010b4 <DS18B20_Init+0x98>)
 8001062:	f000 fa69 	bl	8001538 <OneWire_GetFullROM>
		next = OneWire_Next(&OneWire);
 8001066:	4813      	ldr	r0, [pc, #76]	; (80010b4 <DS18B20_Init+0x98>)
 8001068:	f000 fa3a 	bl	80014e0 <OneWire_Next>
 800106c:	4603      	mov	r3, r0
 800106e:	73fb      	strb	r3, [r7, #15]
		if(TempSensorCount >= _DS18B20_MAX_SENSORS) // More sensors than set maximum is not allowed
 8001070:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <DS18B20_Init+0x9c>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2b03      	cmp	r3, #3
 8001076:	d803      	bhi.n	8001080 <DS18B20_Init+0x64>
	while(next)
 8001078:	7bfb      	ldrb	r3, [r7, #15]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d1e3      	bne.n	8001046 <DS18B20_Init+0x2a>
 800107e:	e000      	b.n	8001082 <DS18B20_Init+0x66>
			break;
 8001080:	bf00      	nop
	}

	for(j = 0; j < i; j++)
 8001082:	2300      	movs	r3, #0
 8001084:	737b      	strb	r3, [r7, #13]
 8001086:	e00a      	b.n	800109e <DS18B20_Init+0x82>
	{
		DS18B20_SetResolution(j, resolution); // Set the initial resolution to sensor
 8001088:	79fa      	ldrb	r2, [r7, #7]
 800108a:	7b7b      	ldrb	r3, [r7, #13]
 800108c:	4611      	mov	r1, r2
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff fe94 	bl	8000dbc <DS18B20_SetResolution>

		DS18B20_StartAll(); // Start conversion on all sensors
 8001094:	f7ff fdd4 	bl	8000c40 <DS18B20_StartAll>
	for(j = 0; j < i; j++)
 8001098:	7b7b      	ldrb	r3, [r7, #13]
 800109a:	3301      	adds	r3, #1
 800109c:	737b      	strb	r3, [r7, #13]
 800109e:	7b7a      	ldrb	r2, [r7, #13]
 80010a0:	7bbb      	ldrb	r3, [r7, #14]
 80010a2:	429a      	cmp	r2, r3
 80010a4:	d3f0      	bcc.n	8001088 <DS18B20_Init+0x6c>
	}
}
 80010a6:	bf00      	nop
 80010a8:	bf00      	nop
 80010aa:	3710      	adds	r7, #16
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40020800 	.word	0x40020800
 80010b4:	200000cc 	.word	0x200000cc
 80010b8:	200000e0 	.word	0x200000e0
 80010bc:	2000008c 	.word	0x2000008c

080010c0 <OneWire_Delay>:

//
//	Delay function for constant 1-Wire timings
//
void OneWire_Delay(uint16_t us)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	80fb      	strh	r3, [r7, #6]
	_DS18B20_TIMER.Instance->CNT = 0;
 80010ca:	4b09      	ldr	r3, [pc, #36]	; (80010f0 <OneWire_Delay+0x30>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2200      	movs	r2, #0
 80010d0:	625a      	str	r2, [r3, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= us);
 80010d2:	bf00      	nop
 80010d4:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <OneWire_Delay+0x30>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010da:	88fb      	ldrh	r3, [r7, #6]
 80010dc:	429a      	cmp	r2, r3
 80010de:	d9f9      	bls.n	80010d4 <OneWire_Delay+0x14>
}
 80010e0:	bf00      	nop
 80010e2:	bf00      	nop
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	2000012c 	.word	0x2000012c

080010f4 <OneWire_BusInputDirection>:

//
//	Bus direction control
//
void OneWire_BusInputDirection(OneWire_t *onewire)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b088      	sub	sp, #32
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	GPIO_InitStruct;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT; // Set as input
 80010fc:	2300      	movs	r3, #0
 80010fe:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL; // No pullup - the pullup resistor is external
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM; // Medium GPIO frequency
 8001104:	2301      	movs	r3, #1
 8001106:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pin = onewire->GPIO_Pin; // Pin for 1-Wire bus
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	889b      	ldrh	r3, [r3, #4]
 800110c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(onewire->GPIOx, &GPIO_InitStruct); // Reinitialize
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f107 020c 	add.w	r2, r7, #12
 8001116:	4611      	mov	r1, r2
 8001118:	4618      	mov	r0, r3
 800111a:	f001 ff27 	bl	8002f6c <HAL_GPIO_Init>
}
 800111e:	bf00      	nop
 8001120:	3720      	adds	r7, #32
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <OneWire_BusOutputDirection>:

void OneWire_BusOutputDirection(OneWire_t *onewire)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b088      	sub	sp, #32
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	GPIO_InitStruct;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD; // Set as open-drain output
 800112e:	2311      	movs	r3, #17
 8001130:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL; // No pullup - the pullup resistor is external
 8001132:	2300      	movs	r3, #0
 8001134:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM; // Medium GPIO frequency
 8001136:	2301      	movs	r3, #1
 8001138:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pin = onewire->GPIO_Pin; // Pin for 1-Wire bus
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	889b      	ldrh	r3, [r3, #4]
 800113e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(onewire->GPIOx, &GPIO_InitStruct); // Reinitialize
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f107 020c 	add.w	r2, r7, #12
 8001148:	4611      	mov	r1, r2
 800114a:	4618      	mov	r0, r3
 800114c:	f001 ff0e 	bl	8002f6c <HAL_GPIO_Init>
}
 8001150:	bf00      	nop
 8001152:	3720      	adds	r7, #32
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <OneWire_OutputLow>:

//
//	Bus pin output state control
//
void OneWire_OutputLow(OneWire_t *onewire)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
	onewire->GPIOx->BSRR = onewire->GPIO_Pin<<16; // Reset the 1-Wire pin
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	889b      	ldrh	r3, [r3, #4]
 8001164:	041a      	lsls	r2, r3, #16
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	619a      	str	r2, [r3, #24]
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <OneWire_OutputHigh>:

void OneWire_OutputHigh(OneWire_t *onewire)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
	onewire->GPIOx->BSRR = onewire->GPIO_Pin; // Set the 1-Wire pin
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	889a      	ldrh	r2, [r3, #4]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	619a      	str	r2, [r3, #24]
}
 800118a:	bf00      	nop
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr

08001196 <OneWire_Reset>:
//	Returns:
//	0 - Reset ok
//	1 - Error
//
uint8_t OneWire_Reset(OneWire_t* onewire)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b084      	sub	sp, #16
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
	uint8_t i;

	OneWire_OutputLow(onewire);  // Write bus output low
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f7ff ffda 	bl	8001158 <OneWire_OutputLow>
	OneWire_BusOutputDirection(onewire);
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f7ff ffbe 	bl	8001126 <OneWire_BusOutputDirection>
	OneWire_Delay(480); // Wait 480 us for reset
 80011aa:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80011ae:	f7ff ff87 	bl	80010c0 <OneWire_Delay>

	OneWire_BusInputDirection(onewire); // Release the bus by switching to input
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f7ff ff9e 	bl	80010f4 <OneWire_BusInputDirection>
	OneWire_Delay(70);
 80011b8:	2046      	movs	r0, #70	; 0x46
 80011ba:	f7ff ff81 	bl	80010c0 <OneWire_Delay>

	i = HAL_GPIO_ReadPin(onewire->GPIOx, onewire->GPIO_Pin); // Check if bus is low
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	889b      	ldrh	r3, [r3, #4]
 80011c6:	4619      	mov	r1, r3
 80011c8:	4610      	mov	r0, r2
 80011ca:	f002 f853 	bl	8003274 <HAL_GPIO_ReadPin>
 80011ce:	4603      	mov	r3, r0
 80011d0:	73fb      	strb	r3, [r7, #15]
															 // if it's high - no device is presence on the bus
	OneWire_Delay(410);
 80011d2:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 80011d6:	f7ff ff73 	bl	80010c0 <OneWire_Delay>

	return i;
 80011da:	7bfb      	ldrb	r3, [r7, #15]
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3710      	adds	r7, #16
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <OneWire_WriteBit>:

//
//	Writing/Reading operations
//
void OneWire_WriteBit(OneWire_t* onewire, uint8_t bit)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	460b      	mov	r3, r1
 80011ee:	70fb      	strb	r3, [r7, #3]
	if (bit) // Send '1',
 80011f0:	78fb      	ldrb	r3, [r7, #3]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d00f      	beq.n	8001216 <OneWire_WriteBit+0x32>
	{
		OneWire_OutputLow(onewire);	// Set the bus low
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f7ff ffae 	bl	8001158 <OneWire_OutputLow>
		OneWire_BusOutputDirection(onewire);
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f7ff ff92 	bl	8001126 <OneWire_BusOutputDirection>
		OneWire_Delay(6);
 8001202:	2006      	movs	r0, #6
 8001204:	f7ff ff5c 	bl	80010c0 <OneWire_Delay>

		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f7ff ff73 	bl	80010f4 <OneWire_BusInputDirection>
		OneWire_Delay(64);
 800120e:	2040      	movs	r0, #64	; 0x40
 8001210:	f7ff ff56 	bl	80010c0 <OneWire_Delay>
		OneWire_Delay(60);

		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
		OneWire_Delay(10);
	}
}
 8001214:	e00e      	b.n	8001234 <OneWire_WriteBit+0x50>
		OneWire_OutputLow(onewire); // Set the bus low
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f7ff ff9e 	bl	8001158 <OneWire_OutputLow>
		OneWire_BusOutputDirection(onewire);
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f7ff ff82 	bl	8001126 <OneWire_BusOutputDirection>
		OneWire_Delay(60);
 8001222:	203c      	movs	r0, #60	; 0x3c
 8001224:	f7ff ff4c 	bl	80010c0 <OneWire_Delay>
		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f7ff ff63 	bl	80010f4 <OneWire_BusInputDirection>
		OneWire_Delay(10);
 800122e:	200a      	movs	r0, #10
 8001230:	f7ff ff46 	bl	80010c0 <OneWire_Delay>
}
 8001234:	bf00      	nop
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <OneWire_ReadBit>:

uint8_t OneWire_ReadBit(OneWire_t* onewire)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
	uint8_t bit = 0; // Default read bit state is low
 8001244:	2300      	movs	r3, #0
 8001246:	73fb      	strb	r3, [r7, #15]

	OneWire_OutputLow(onewire); // Set low to initiate reading
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f7ff ff85 	bl	8001158 <OneWire_OutputLow>
	OneWire_BusOutputDirection(onewire);
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f7ff ff69 	bl	8001126 <OneWire_BusOutputDirection>
	OneWire_Delay(2);
 8001254:	2002      	movs	r0, #2
 8001256:	f7ff ff33 	bl	80010c0 <OneWire_Delay>

	OneWire_BusInputDirection(onewire); // Release bus for Slave response
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f7ff ff4a 	bl	80010f4 <OneWire_BusInputDirection>
	OneWire_Delay(10);
 8001260:	200a      	movs	r0, #10
 8001262:	f7ff ff2d 	bl	80010c0 <OneWire_Delay>

	if (HAL_GPIO_ReadPin(onewire->GPIOx, onewire->GPIO_Pin)) // Read the bus state
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	889b      	ldrh	r3, [r3, #4]
 800126e:	4619      	mov	r1, r3
 8001270:	4610      	mov	r0, r2
 8001272:	f001 ffff 	bl	8003274 <HAL_GPIO_ReadPin>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <OneWire_ReadBit+0x44>
		bit = 1;
 800127c:	2301      	movs	r3, #1
 800127e:	73fb      	strb	r3, [r7, #15]

	OneWire_Delay(50); // Wait for end of read cycle
 8001280:	2032      	movs	r0, #50	; 0x32
 8001282:	f7ff ff1d 	bl	80010c0 <OneWire_Delay>

	return bit;
 8001286:	7bfb      	ldrb	r3, [r7, #15]
}
 8001288:	4618      	mov	r0, r3
 800128a:	3710      	adds	r7, #16
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <OneWire_WriteByte>:

void OneWire_WriteByte(OneWire_t* onewire, uint8_t byte)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	460b      	mov	r3, r1
 800129a:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 8;
 800129c:	2308      	movs	r3, #8
 800129e:	73fb      	strb	r3, [r7, #15]

	do
	{
		OneWire_WriteBit(onewire, byte & 1); // LSB first
 80012a0:	78fb      	ldrb	r3, [r7, #3]
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	4619      	mov	r1, r3
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f7ff ff9a 	bl	80011e4 <OneWire_WriteBit>
		byte >>= 1;
 80012b0:	78fb      	ldrb	r3, [r7, #3]
 80012b2:	085b      	lsrs	r3, r3, #1
 80012b4:	70fb      	strb	r3, [r7, #3]
	} while(--i);
 80012b6:	7bfb      	ldrb	r3, [r7, #15]
 80012b8:	3b01      	subs	r3, #1
 80012ba:	73fb      	strb	r3, [r7, #15]
 80012bc:	7bfb      	ldrb	r3, [r7, #15]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d1ee      	bne.n	80012a0 <OneWire_WriteByte+0x10>
}
 80012c2:	bf00      	nop
 80012c4:	bf00      	nop
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <OneWire_ReadByte>:

uint8_t OneWire_ReadByte(OneWire_t* onewire)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
	uint8_t i = 8, byte = 0;
 80012d4:	2308      	movs	r3, #8
 80012d6:	73fb      	strb	r3, [r7, #15]
 80012d8:	2300      	movs	r3, #0
 80012da:	73bb      	strb	r3, [r7, #14]

	do{
		byte >>= 1;
 80012dc:	7bbb      	ldrb	r3, [r7, #14]
 80012de:	085b      	lsrs	r3, r3, #1
 80012e0:	73bb      	strb	r3, [r7, #14]
		byte |= (OneWire_ReadBit(onewire) << 7); // LSB first
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f7ff ffaa 	bl	800123c <OneWire_ReadBit>
 80012e8:	4603      	mov	r3, r0
 80012ea:	01db      	lsls	r3, r3, #7
 80012ec:	b25a      	sxtb	r2, r3
 80012ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	b25b      	sxtb	r3, r3
 80012f6:	73bb      	strb	r3, [r7, #14]
	} while(--i);
 80012f8:	7bfb      	ldrb	r3, [r7, #15]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	73fb      	strb	r3, [r7, #15]
 80012fe:	7bfb      	ldrb	r3, [r7, #15]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d1eb      	bne.n	80012dc <OneWire_ReadByte+0x10>

	return byte;
 8001304:	7bbb      	ldrb	r3, [r7, #14]
}
 8001306:	4618      	mov	r0, r3
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <OneWire_ResetSearch>:

//
// 1-Wire search operations
//
void OneWire_ResetSearch(OneWire_t* onewire)
{
 800130e:	b480      	push	{r7}
 8001310:	b083      	sub	sp, #12
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
	// Clear the search results
	onewire->LastDiscrepancy = 0;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2200      	movs	r2, #0
 800131a:	719a      	strb	r2, [r3, #6]
	onewire->LastDeviceFlag = 0;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2200      	movs	r2, #0
 8001320:	721a      	strb	r2, [r3, #8]
	onewire->LastFamilyDiscrepancy = 0;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2200      	movs	r2, #0
 8001326:	71da      	strb	r2, [r3, #7]
}
 8001328:	bf00      	nop
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <OneWire_Search>:

uint8_t OneWire_Search(OneWire_t* onewire, uint8_t command)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	460b      	mov	r3, r1
 800133e:	70fb      	strb	r3, [r7, #3]
	uint8_t id_bit_number;
	uint8_t last_zero, rom_byte_number, search_result;
	uint8_t id_bit, cmp_id_bit;
	uint8_t rom_byte_mask, search_direction;

	id_bit_number = 1;
 8001340:	2301      	movs	r3, #1
 8001342:	73fb      	strb	r3, [r7, #15]
	last_zero = 0;
 8001344:	2300      	movs	r3, #0
 8001346:	73bb      	strb	r3, [r7, #14]
	rom_byte_number = 0;
 8001348:	2300      	movs	r3, #0
 800134a:	737b      	strb	r3, [r7, #13]
	rom_byte_mask = 1;
 800134c:	2301      	movs	r3, #1
 800134e:	72fb      	strb	r3, [r7, #11]
	search_result = 0;
 8001350:	2300      	movs	r3, #0
 8001352:	733b      	strb	r3, [r7, #12]

	if (!onewire->LastDeviceFlag) // If last device flag is not set
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	7a1b      	ldrb	r3, [r3, #8]
 8001358:	2b00      	cmp	r3, #0
 800135a:	f040 809a 	bne.w	8001492 <OneWire_Search+0x15e>
	{
		if (OneWire_Reset(onewire)) // Reset bus
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f7ff ff19 	bl	8001196 <OneWire_Reset>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d00a      	beq.n	8001380 <OneWire_Search+0x4c>
		{
			// If error while reset - reset search results
			onewire->LastDiscrepancy = 0;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2200      	movs	r2, #0
 800136e:	719a      	strb	r2, [r3, #6]
			onewire->LastDeviceFlag = 0;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2200      	movs	r2, #0
 8001374:	721a      	strb	r2, [r3, #8]
			onewire->LastFamilyDiscrepancy = 0;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2200      	movs	r2, #0
 800137a:	71da      	strb	r2, [r3, #7]
			return 0;
 800137c:	2300      	movs	r3, #0
 800137e:	e09b      	b.n	80014b8 <OneWire_Search+0x184>
		}

		OneWire_WriteByte(onewire, command); // Send searching command
 8001380:	78fb      	ldrb	r3, [r7, #3]
 8001382:	4619      	mov	r1, r3
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f7ff ff83 	bl	8001290 <OneWire_WriteByte>

		// Searching loop, Maxim APPLICATION NOTE 187
		do
		{
			id_bit = OneWire_ReadBit(onewire); // Read a bit 1
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f7ff ff56 	bl	800123c <OneWire_ReadBit>
 8001390:	4603      	mov	r3, r0
 8001392:	727b      	strb	r3, [r7, #9]
			cmp_id_bit = OneWire_ReadBit(onewire); // Read the complement of bit 1
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f7ff ff51 	bl	800123c <OneWire_ReadBit>
 800139a:	4603      	mov	r3, r0
 800139c:	723b      	strb	r3, [r7, #8]

			if ((id_bit == 1) && (cmp_id_bit == 1)) // 11 - data error
 800139e:	7a7b      	ldrb	r3, [r7, #9]
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d102      	bne.n	80013aa <OneWire_Search+0x76>
 80013a4:	7a3b      	ldrb	r3, [r7, #8]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d064      	beq.n	8001474 <OneWire_Search+0x140>
			{
				break;
			}
			else
			{
				if (id_bit != cmp_id_bit)
 80013aa:	7a7a      	ldrb	r2, [r7, #9]
 80013ac:	7a3b      	ldrb	r3, [r7, #8]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d002      	beq.n	80013b8 <OneWire_Search+0x84>
				{
					search_direction = id_bit;  // Bit write value for search
 80013b2:	7a7b      	ldrb	r3, [r7, #9]
 80013b4:	72bb      	strb	r3, [r7, #10]
 80013b6:	e026      	b.n	8001406 <OneWire_Search+0xd2>
				}
				else // 00 - 2 devices
				{
					// Table 3. Search Path Direction
					if (id_bit_number < onewire->LastDiscrepancy)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	799b      	ldrb	r3, [r3, #6]
 80013bc:	7bfa      	ldrb	r2, [r7, #15]
 80013be:	429a      	cmp	r2, r3
 80013c0:	d20d      	bcs.n	80013de <OneWire_Search+0xaa>
					{
						search_direction = ((onewire->ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 80013c2:	7b7b      	ldrb	r3, [r7, #13]
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	4413      	add	r3, r2
 80013c8:	7a5a      	ldrb	r2, [r3, #9]
 80013ca:	7afb      	ldrb	r3, [r7, #11]
 80013cc:	4013      	ands	r3, r2
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	bf14      	ite	ne
 80013d4:	2301      	movne	r3, #1
 80013d6:	2300      	moveq	r3, #0
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	72bb      	strb	r3, [r7, #10]
 80013dc:	e008      	b.n	80013f0 <OneWire_Search+0xbc>
					}
					else
					{
						// If bit is equal to last - pick 1
						// If not - then pick 0
						search_direction = (id_bit_number == onewire->LastDiscrepancy);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	799b      	ldrb	r3, [r3, #6]
 80013e2:	7bfa      	ldrb	r2, [r7, #15]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	bf0c      	ite	eq
 80013e8:	2301      	moveq	r3, #1
 80013ea:	2300      	movne	r3, #0
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	72bb      	strb	r3, [r7, #10]
					}

					if (search_direction == 0) // If 0 was picked, write it to LastZero
 80013f0:	7abb      	ldrb	r3, [r7, #10]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d107      	bne.n	8001406 <OneWire_Search+0xd2>
					{
						last_zero = id_bit_number;
 80013f6:	7bfb      	ldrb	r3, [r7, #15]
 80013f8:	73bb      	strb	r3, [r7, #14]

						if (last_zero < 9) // Check for last discrepancy in family
 80013fa:	7bbb      	ldrb	r3, [r7, #14]
 80013fc:	2b08      	cmp	r3, #8
 80013fe:	d802      	bhi.n	8001406 <OneWire_Search+0xd2>
						{
							onewire->LastFamilyDiscrepancy = last_zero;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	7bba      	ldrb	r2, [r7, #14]
 8001404:	71da      	strb	r2, [r3, #7]
						}
					}
				}

				if (search_direction == 1)
 8001406:	7abb      	ldrb	r3, [r7, #10]
 8001408:	2b01      	cmp	r3, #1
 800140a:	d10c      	bne.n	8001426 <OneWire_Search+0xf2>
				{
					onewire->ROM_NO[rom_byte_number] |= rom_byte_mask; // Set the bit in the ROM byte rom_byte_number
 800140c:	7b7b      	ldrb	r3, [r7, #13]
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	4413      	add	r3, r2
 8001412:	7a59      	ldrb	r1, [r3, #9]
 8001414:	7b7b      	ldrb	r3, [r7, #13]
 8001416:	7afa      	ldrb	r2, [r7, #11]
 8001418:	430a      	orrs	r2, r1
 800141a:	b2d1      	uxtb	r1, r2
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	4413      	add	r3, r2
 8001420:	460a      	mov	r2, r1
 8001422:	725a      	strb	r2, [r3, #9]
 8001424:	e010      	b.n	8001448 <OneWire_Search+0x114>
				}
				else
				{
					onewire->ROM_NO[rom_byte_number] &= ~rom_byte_mask; // Clear the bit in the ROM byte rom_byte_number
 8001426:	7b7b      	ldrb	r3, [r7, #13]
 8001428:	687a      	ldr	r2, [r7, #4]
 800142a:	4413      	add	r3, r2
 800142c:	7a5b      	ldrb	r3, [r3, #9]
 800142e:	b25a      	sxtb	r2, r3
 8001430:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001434:	43db      	mvns	r3, r3
 8001436:	b25b      	sxtb	r3, r3
 8001438:	4013      	ands	r3, r2
 800143a:	b25a      	sxtb	r2, r3
 800143c:	7b7b      	ldrb	r3, [r7, #13]
 800143e:	b2d1      	uxtb	r1, r2
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	4413      	add	r3, r2
 8001444:	460a      	mov	r2, r1
 8001446:	725a      	strb	r2, [r3, #9]
				}

				OneWire_WriteBit(onewire, search_direction); // Search direction write bit
 8001448:	7abb      	ldrb	r3, [r7, #10]
 800144a:	4619      	mov	r1, r3
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f7ff fec9 	bl	80011e4 <OneWire_WriteBit>

				id_bit_number++; // Next bit search - increase the id
 8001452:	7bfb      	ldrb	r3, [r7, #15]
 8001454:	3301      	adds	r3, #1
 8001456:	73fb      	strb	r3, [r7, #15]
				rom_byte_mask <<= 1; // Shoft the mask for next bit
 8001458:	7afb      	ldrb	r3, [r7, #11]
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	72fb      	strb	r3, [r7, #11]

				if (rom_byte_mask == 0) // If the mask is 0, it says the whole byte is read
 800145e:	7afb      	ldrb	r3, [r7, #11]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d104      	bne.n	800146e <OneWire_Search+0x13a>
				{
					rom_byte_number++; // Next byte number
 8001464:	7b7b      	ldrb	r3, [r7, #13]
 8001466:	3301      	adds	r3, #1
 8001468:	737b      	strb	r3, [r7, #13]
					rom_byte_mask = 1; // Reset the mask - first bit
 800146a:	2301      	movs	r3, #1
 800146c:	72fb      	strb	r3, [r7, #11]
				}
			}
		} while(rom_byte_number < 8);  // Read 8 bytes
 800146e:	7b7b      	ldrb	r3, [r7, #13]
 8001470:	2b07      	cmp	r3, #7
 8001472:	d98a      	bls.n	800138a <OneWire_Search+0x56>

		if (!(id_bit_number < 65)) // If all read bits number is below 65 (8 bytes)
 8001474:	7bfb      	ldrb	r3, [r7, #15]
 8001476:	2b40      	cmp	r3, #64	; 0x40
 8001478:	d90b      	bls.n	8001492 <OneWire_Search+0x15e>
		{
			onewire->LastDiscrepancy = last_zero;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	7bba      	ldrb	r2, [r7, #14]
 800147e:	719a      	strb	r2, [r3, #6]

			if (onewire->LastDiscrepancy == 0) // If last discrepancy is 0 - last device found
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	799b      	ldrb	r3, [r3, #6]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d102      	bne.n	800148e <OneWire_Search+0x15a>
			{
				onewire->LastDeviceFlag = 1; // Set the flag
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2201      	movs	r2, #1
 800148c:	721a      	strb	r2, [r3, #8]
			}

			search_result = 1; // Searching successful
 800148e:	2301      	movs	r3, #1
 8001490:	733b      	strb	r3, [r7, #12]
		}
	}

	// If no device is found - reset search data and return 0
	if (!search_result || !onewire->ROM_NO[0])
 8001492:	7b3b      	ldrb	r3, [r7, #12]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d003      	beq.n	80014a0 <OneWire_Search+0x16c>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	7a5b      	ldrb	r3, [r3, #9]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d10a      	bne.n	80014b6 <OneWire_Search+0x182>
	{
		onewire->LastDiscrepancy = 0;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2200      	movs	r2, #0
 80014a4:	719a      	strb	r2, [r3, #6]
		onewire->LastDeviceFlag = 0;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2200      	movs	r2, #0
 80014aa:	721a      	strb	r2, [r3, #8]
		onewire->LastFamilyDiscrepancy = 0;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2200      	movs	r2, #0
 80014b0:	71da      	strb	r2, [r3, #7]
		search_result = 0;
 80014b2:	2300      	movs	r3, #0
 80014b4:	733b      	strb	r3, [r7, #12]
	}

	return search_result;
 80014b6:	7b3b      	ldrb	r3, [r7, #12]
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3710      	adds	r7, #16
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <OneWire_First>:

//
//	Return first device on 1-Wire bus
//
uint8_t OneWire_First(OneWire_t* onewire)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
	OneWire_ResetSearch(onewire);
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f7ff ff20 	bl	800130e <OneWire_ResetSearch>

	return OneWire_Search(onewire, ONEWIRE_CMD_SEARCHROM);
 80014ce:	21f0      	movs	r1, #240	; 0xf0
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f7ff ff2f 	bl	8001334 <OneWire_Search>
 80014d6:	4603      	mov	r3, r0
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3708      	adds	r7, #8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <OneWire_Next>:

//
//	Return next device on 1-Wire bus
//
uint8_t OneWire_Next(OneWire_t* onewire)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
   /* Leave the search state alone */
   return OneWire_Search(onewire, ONEWIRE_CMD_SEARCHROM);
 80014e8:	21f0      	movs	r1, #240	; 0xf0
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f7ff ff22 	bl	8001334 <OneWire_Search>
 80014f0:	4603      	mov	r3, r0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <OneWire_SelectWithPointer>:

//
//	Select a device on bus by pointer to ROM address
//
void OneWire_SelectWithPointer(OneWire_t* onewire, uint8_t *ROM)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b084      	sub	sp, #16
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
 8001502:	6039      	str	r1, [r7, #0]
	uint8_t i;
	OneWire_WriteByte(onewire, ONEWIRE_CMD_MATCHROM); // Match ROM command
 8001504:	2155      	movs	r1, #85	; 0x55
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f7ff fec2 	bl	8001290 <OneWire_WriteByte>

	for (i = 0; i < 8; i++)
 800150c:	2300      	movs	r3, #0
 800150e:	73fb      	strb	r3, [r7, #15]
 8001510:	e00a      	b.n	8001528 <OneWire_SelectWithPointer+0x2e>
	{
		OneWire_WriteByte(onewire, *(ROM + i));
 8001512:	7bfb      	ldrb	r3, [r7, #15]
 8001514:	683a      	ldr	r2, [r7, #0]
 8001516:	4413      	add	r3, r2
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	4619      	mov	r1, r3
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f7ff feb7 	bl	8001290 <OneWire_WriteByte>
	for (i = 0; i < 8; i++)
 8001522:	7bfb      	ldrb	r3, [r7, #15]
 8001524:	3301      	adds	r3, #1
 8001526:	73fb      	strb	r3, [r7, #15]
 8001528:	7bfb      	ldrb	r3, [r7, #15]
 800152a:	2b07      	cmp	r3, #7
 800152c:	d9f1      	bls.n	8001512 <OneWire_SelectWithPointer+0x18>
	}
}
 800152e:	bf00      	nop
 8001530:	bf00      	nop
 8001532:	3710      	adds	r7, #16
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <OneWire_GetFullROM>:

//
//	Get the ROM of found device
//
void OneWire_GetFullROM(OneWire_t* onewire, uint8_t *firstIndex)
{
 8001538:	b480      	push	{r7}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 8; i++) {
 8001542:	2300      	movs	r3, #0
 8001544:	73fb      	strb	r3, [r7, #15]
 8001546:	e00a      	b.n	800155e <OneWire_GetFullROM+0x26>
		*(firstIndex + i) = onewire->ROM_NO[i];
 8001548:	7bfa      	ldrb	r2, [r7, #15]
 800154a:	7bfb      	ldrb	r3, [r7, #15]
 800154c:	6839      	ldr	r1, [r7, #0]
 800154e:	440b      	add	r3, r1
 8001550:	6879      	ldr	r1, [r7, #4]
 8001552:	440a      	add	r2, r1
 8001554:	7a52      	ldrb	r2, [r2, #9]
 8001556:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) {
 8001558:	7bfb      	ldrb	r3, [r7, #15]
 800155a:	3301      	adds	r3, #1
 800155c:	73fb      	strb	r3, [r7, #15]
 800155e:	7bfb      	ldrb	r3, [r7, #15]
 8001560:	2b07      	cmp	r3, #7
 8001562:	d9f1      	bls.n	8001548 <OneWire_GetFullROM+0x10>
	}
}
 8001564:	bf00      	nop
 8001566:	bf00      	nop
 8001568:	3714      	adds	r7, #20
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
	...

08001574 <OneWire_Init>:

//
//	1-Wire initialization
//
void OneWire_Init(OneWire_t* onewire, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	4613      	mov	r3, r2
 8001580:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_Base_Start(&_DS18B20_TIMER); // Start the delay timer
 8001582:	4811      	ldr	r0, [pc, #68]	; (80015c8 <OneWire_Init+0x54>)
 8001584:	f002 fba8 	bl	8003cd8 <HAL_TIM_Base_Start>

	onewire->GPIOx = GPIOx; // Save 1-wire bus pin
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	68ba      	ldr	r2, [r7, #8]
 800158c:	601a      	str	r2, [r3, #0]
	onewire->GPIO_Pin = GPIO_Pin;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	88fa      	ldrh	r2, [r7, #6]
 8001592:	809a      	strh	r2, [r3, #4]

	// 1-Wire bit bang initialization
	OneWire_BusOutputDirection(onewire);
 8001594:	68f8      	ldr	r0, [r7, #12]
 8001596:	f7ff fdc6 	bl	8001126 <OneWire_BusOutputDirection>
	OneWire_OutputHigh(onewire);
 800159a:	68f8      	ldr	r0, [r7, #12]
 800159c:	f7ff fdec 	bl	8001178 <OneWire_OutputHigh>
	HAL_Delay(100);
 80015a0:	2064      	movs	r0, #100	; 0x64
 80015a2:	f000 ff5d 	bl	8002460 <HAL_Delay>
	OneWire_OutputLow(onewire);
 80015a6:	68f8      	ldr	r0, [r7, #12]
 80015a8:	f7ff fdd6 	bl	8001158 <OneWire_OutputLow>
	HAL_Delay(100);
 80015ac:	2064      	movs	r0, #100	; 0x64
 80015ae:	f000 ff57 	bl	8002460 <HAL_Delay>
	OneWire_OutputHigh(onewire);
 80015b2:	68f8      	ldr	r0, [r7, #12]
 80015b4:	f7ff fde0 	bl	8001178 <OneWire_OutputHigh>
	HAL_Delay(200);
 80015b8:	20c8      	movs	r0, #200	; 0xc8
 80015ba:	f000 ff51 	bl	8002460 <HAL_Delay>
}
 80015be:	bf00      	nop
 80015c0:	3710      	adds	r7, #16
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	2000012c 	.word	0x2000012c

080015cc <HAL_GPIO_EXTI_Callback>:
#define VREF = 5.0;
#define SCOUNT = 100;
int workingInProgress = 0,dataPrepared = 0,currentPositionOfBuffer = 0;
uint8_t buffer[20],receivedData[10];
ADC_ChannelConfTypeDef sConfig = {0};
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	80fb      	strh	r3, [r7, #6]
	 if(GPIO_Pin != GPIO_PIN_13)
 80015d6:	88fb      	ldrh	r3, [r7, #6]
 80015d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015dc:	d103      	bne.n	80015e6 <HAL_GPIO_EXTI_Callback+0x1a>
		 return ;
	 if(workingInProgress)
 80015de:	4b05      	ldr	r3, [pc, #20]	; (80015f4 <HAL_GPIO_EXTI_Callback+0x28>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	e000      	b.n	80015e8 <HAL_GPIO_EXTI_Callback+0x1c>
		 return ;
 80015e6:	bf00      	nop
//	 buffer[8] = 'C';
//	 buffer[12] = '\0';
//
//	 currentPositionOfBuffer = 0;
//	 dataPrepared = 1;
}
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	20000244 	.word	0x20000244

080015f8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
	if(!dataPrepared)
 8001600:	4b1a      	ldr	r3, [pc, #104]	; (800166c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d02d      	beq.n	8001664 <HAL_TIM_PeriodElapsedCallback+0x6c>
		return ;

	// TIM1 is used for display through UART
	if(htim->Instance == TIM2){
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001610:	d129      	bne.n	8001666 <HAL_TIM_PeriodElapsedCallback+0x6e>
		// Display the counter values via UART
		if(currentPositionOfBuffer == 12){
 8001612:	4b17      	ldr	r3, [pc, #92]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2b0c      	cmp	r3, #12
 8001618:	d10c      	bne.n	8001634 <HAL_TIM_PeriodElapsedCallback+0x3c>
			HAL_UART_Transmit(&huart2, "\n\r", 2, 100);
 800161a:	2364      	movs	r3, #100	; 0x64
 800161c:	2202      	movs	r2, #2
 800161e:	4915      	ldr	r1, [pc, #84]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001620:	4815      	ldr	r0, [pc, #84]	; (8001678 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001622:	f002 fff6 	bl	8004612 <HAL_UART_Transmit>
			dataPrepared = 0;
 8001626:	4b11      	ldr	r3, [pc, #68]	; (800166c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
			workingInProgress = 0;
 800162c:	4b13      	ldr	r3, [pc, #76]	; (800167c <HAL_TIM_PeriodElapsedCallback+0x84>)
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
			return ;
 8001632:	e018      	b.n	8001666 <HAL_TIM_PeriodElapsedCallback+0x6e>
		}
		HAL_UART_Transmit(&huart1, &buffer[currentPositionOfBuffer], 1, 100);
 8001634:	4b0e      	ldr	r3, [pc, #56]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a11      	ldr	r2, [pc, #68]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800163a:	1899      	adds	r1, r3, r2
 800163c:	2364      	movs	r3, #100	; 0x64
 800163e:	2201      	movs	r2, #1
 8001640:	4810      	ldr	r0, [pc, #64]	; (8001684 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001642:	f002 ffe6 	bl	8004612 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, &buffer[currentPositionOfBuffer], 1, 100);
 8001646:	4b0a      	ldr	r3, [pc, #40]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a0d      	ldr	r2, [pc, #52]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800164c:	1899      	adds	r1, r3, r2
 800164e:	2364      	movs	r3, #100	; 0x64
 8001650:	2201      	movs	r2, #1
 8001652:	4809      	ldr	r0, [pc, #36]	; (8001678 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001654:	f002 ffdd 	bl	8004612 <HAL_UART_Transmit>
		currentPositionOfBuffer++;
 8001658:	4b05      	ldr	r3, [pc, #20]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	3301      	adds	r3, #1
 800165e:	4a04      	ldr	r2, [pc, #16]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001660:	6013      	str	r3, [r2, #0]
 8001662:	e000      	b.n	8001666 <HAL_TIM_PeriodElapsedCallback+0x6e>
		return ;
 8001664:	bf00      	nop
	}
}
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	20000248 	.word	0x20000248
 8001670:	2000024c 	.word	0x2000024c
 8001674:	08005fc0 	.word	0x08005fc0
 8001678:	20000200 	.word	0x20000200
 800167c:	20000244 	.word	0x20000244
 8001680:	20000250 	.word	0x20000250
 8001684:	200001bc 	.word	0x200001bc

08001688 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
	workingInProgress = 0;
 8001690:	4b05      	ldr	r3, [pc, #20]	; (80016a8 <HAL_UART_RxCpltCallback+0x20>)
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart1, receivedData, 1);
 8001696:	2201      	movs	r2, #1
 8001698:	4904      	ldr	r1, [pc, #16]	; (80016ac <HAL_UART_RxCpltCallback+0x24>)
 800169a:	4805      	ldr	r0, [pc, #20]	; (80016b0 <HAL_UART_RxCpltCallback+0x28>)
 800169c:	f003 f84b 	bl	8004736 <HAL_UART_Receive_IT>
}
 80016a0:	bf00      	nop
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	20000244 	.word	0x20000244
 80016ac:	20000264 	.word	0x20000264
 80016b0:	200001bc 	.word	0x200001bc

080016b4 <tempRead>:
//		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, 1);
//	}
//	return data;
//}
//
float tempRead(){
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
//	sensorWrite(0xBE);
//	uint8_t temp = sensorRead();
//	temp |= sensorRead() << 8;
//	return temp;

	DS18B20_ReadAll();
 80016ba:	f7ff fc41 	bl	8000f40 <DS18B20_ReadAll>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, 1);
 80016be:	2201      	movs	r2, #1
 80016c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016c4:	4814      	ldr	r0, [pc, #80]	; (8001718 <tempRead+0x64>)
 80016c6:	f001 fded 	bl	80032a4 <HAL_GPIO_WritePin>
	DS18B20_StartAll();
 80016ca:	f7ff fab9 	bl	8000c40 <DS18B20_StartAll>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, 0);
 80016ce:	2200      	movs	r2, #0
 80016d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016d4:	4810      	ldr	r0, [pc, #64]	; (8001718 <tempRead+0x64>)
 80016d6:	f001 fde5 	bl	80032a4 <HAL_GPIO_WritePin>
	uint8_t ROM_tmp[8];
	uint8_t i;
	float temperature;
	for(i=0;i<DS18B20_Quantity();i++){
 80016da:	2300      	movs	r3, #0
 80016dc:	73fb      	strb	r3, [r7, #15]
 80016de:	e00f      	b.n	8001700 <tempRead+0x4c>
		if(DS18B20_GetTemperature(i, &temperature)){
 80016e0:	463a      	mov	r2, r7
 80016e2:	7bfb      	ldrb	r3, [r7, #15]
 80016e4:	4611      	mov	r1, r2
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff fc76 	bl	8000fd8 <DS18B20_GetTemperature>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d003      	beq.n	80016fa <tempRead+0x46>
			return temperature;
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	ee07 3a90 	vmov	s15, r3
 80016f8:	e009      	b.n	800170e <tempRead+0x5a>
	for(i=0;i<DS18B20_Quantity();i++){
 80016fa:	7bfb      	ldrb	r3, [r7, #15]
 80016fc:	3301      	adds	r3, #1
 80016fe:	73fb      	strb	r3, [r7, #15]
 8001700:	f7ff fc5e 	bl	8000fc0 <DS18B20_Quantity>
 8001704:	4603      	mov	r3, r0
 8001706:	461a      	mov	r2, r3
 8001708:	7bfb      	ldrb	r3, [r7, #15]
 800170a:	4293      	cmp	r3, r2
 800170c:	d3e8      	bcc.n	80016e0 <tempRead+0x2c>
		}
	}
}
 800170e:	eeb0 0a67 	vmov.f32	s0, s15
 8001712:	3710      	adds	r7, #16
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40020800 	.word	0x40020800
 800171c:	00000000 	.word	0x00000000

08001720 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001720:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001724:	b08c      	sub	sp, #48	; 0x30
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001728:	f000 fe28 	bl	800237c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800172c:	f000 f9e0 	bl	8001af0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001730:	f000 fba2 	bl	8001e78 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001734:	f000 fb76 	bl	8001e24 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001738:	f000 fa42 	bl	8001bc0 <MX_ADC1_Init>
  MX_TIM2_Init();
 800173c:	f000 fafa 	bl	8001d34 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001740:	f000 fb46 	bl	8001dd0 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001744:	f000 faa6 	bl	8001c94 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001748:	484c      	ldr	r0, [pc, #304]	; (800187c <main+0x15c>)
 800174a:	f002 fb1f 	bl	8003d8c <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart1, receivedData, 1);
 800174e:	2201      	movs	r2, #1
 8001750:	494b      	ldr	r1, [pc, #300]	; (8001880 <main+0x160>)
 8001752:	484c      	ldr	r0, [pc, #304]	; (8001884 <main+0x164>)
 8001754:	f002 ffef 	bl	8004736 <HAL_UART_Receive_IT>
  DS18B20_Init(DS18B20_Resolution_12bits);
 8001758:	200c      	movs	r0, #12
 800175a:	f7ff fc5f 	bl	800101c <DS18B20_Init>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, 0);
 800175e:	2200      	movs	r2, #0
 8001760:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001764:	4848      	ldr	r0, [pc, #288]	; (8001888 <main+0x168>)
 8001766:	f001 fd9d 	bl	80032a4 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  sConfig.Channel = ADC_CHANNEL_0;
 800176a:	4b48      	ldr	r3, [pc, #288]	; (800188c <main+0x16c>)
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = 1;
 8001770:	4b46      	ldr	r3, [pc, #280]	; (800188c <main+0x16c>)
 8001772:	2201      	movs	r2, #1
 8001774:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001776:	4b45      	ldr	r3, [pc, #276]	; (800188c <main+0x16c>)
 8001778:	2200      	movs	r2, #0
 800177a:	609a      	str	r2, [r3, #8]
  int pressing = 0;
 800177c:	2300      	movs	r3, #0
 800177e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_UART_Transmit(&huart2, "Initialize successful\n\r", 23, HAL_MAX_DELAY);
 8001780:	f04f 33ff 	mov.w	r3, #4294967295
 8001784:	2217      	movs	r2, #23
 8001786:	4942      	ldr	r1, [pc, #264]	; (8001890 <main+0x170>)
 8001788:	4842      	ldr	r0, [pc, #264]	; (8001894 <main+0x174>)
 800178a:	f002 ff42 	bl	8004612 <HAL_UART_Transmit>
  while (1)
  {
	 int pressedButton = !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 800178e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001792:	483d      	ldr	r0, [pc, #244]	; (8001888 <main+0x168>)
 8001794:	f001 fd6e 	bl	8003274 <HAL_GPIO_ReadPin>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	bf0c      	ite	eq
 800179e:	2301      	moveq	r3, #1
 80017a0:	2300      	movne	r3, #0
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	61bb      	str	r3, [r7, #24]
	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, !workingInProgress);
 80017a6:	4b3c      	ldr	r3, [pc, #240]	; (8001898 <main+0x178>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	bf0c      	ite	eq
 80017ae:	2301      	moveq	r3, #1
 80017b0:	2300      	movne	r3, #0
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	461a      	mov	r2, r3
 80017b6:	2120      	movs	r1, #32
 80017b8:	4838      	ldr	r0, [pc, #224]	; (800189c <main+0x17c>)
 80017ba:	f001 fd73 	bl	80032a4 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, workingInProgress);
 80017be:	4b36      	ldr	r3, [pc, #216]	; (8001898 <main+0x178>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	461a      	mov	r2, r3
 80017c6:	2180      	movs	r1, #128	; 0x80
 80017c8:	4834      	ldr	r0, [pc, #208]	; (800189c <main+0x17c>)
 80017ca:	f001 fd6b 	bl	80032a4 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, workingInProgress);
 80017ce:	4b32      	ldr	r3, [pc, #200]	; (8001898 <main+0x178>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	461a      	mov	r2, r3
 80017d6:	2180      	movs	r1, #128	; 0x80
 80017d8:	482b      	ldr	r0, [pc, #172]	; (8001888 <main+0x168>)
 80017da:	f001 fd63 	bl	80032a4 <HAL_GPIO_WritePin>

	 if(pressedButton && !pressing && !workingInProgress){
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	f000 814b 	beq.w	8001a7c <main+0x35c>
 80017e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	f040 8147 	bne.w	8001a7c <main+0x35c>
 80017ee:	4b2a      	ldr	r3, [pc, #168]	; (8001898 <main+0x178>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	f040 8142 	bne.w	8001a7c <main+0x35c>
		 pressing = 1;
 80017f8:	2301      	movs	r3, #1
 80017fa:	62fb      	str	r3, [r7, #44]	; 0x2c
		 workingInProgress = 1;
 80017fc:	4b26      	ldr	r3, [pc, #152]	; (8001898 <main+0x178>)
 80017fe:	2201      	movs	r2, #1
 8001800:	601a      	str	r2, [r3, #0]
		 dataPrepared = 0;
 8001802:	4b27      	ldr	r3, [pc, #156]	; (80018a0 <main+0x180>)
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]

		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001808:	2200      	movs	r2, #0
 800180a:	2120      	movs	r1, #32
 800180c:	4823      	ldr	r0, [pc, #140]	; (800189c <main+0x17c>)
 800180e:	f001 fd49 	bl	80032a4 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8001812:	2201      	movs	r2, #1
 8001814:	2180      	movs	r1, #128	; 0x80
 8001816:	4821      	ldr	r0, [pc, #132]	; (800189c <main+0x17c>)
 8001818:	f001 fd44 	bl	80032a4 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 800181c:	2201      	movs	r2, #1
 800181e:	2180      	movs	r1, #128	; 0x80
 8001820:	4819      	ldr	r0, [pc, #100]	; (8001888 <main+0x168>)
 8001822:	f001 fd3f 	bl	80032a4 <HAL_GPIO_WritePin>
//				adcValue = HAL_ADC_GetValue(&hadc1);
//				thermoAv+=adcValue;
//			 }
//		 }
//		 thermoAv/=100;
		 int thermoAv = 0;
 8001826:	2300      	movs	r3, #0
 8001828:	617b      	str	r3, [r7, #20]
		 float thermoSum = 0;
 800182a:	f04f 0300 	mov.w	r3, #0
 800182e:	62bb      	str	r3, [r7, #40]	; 0x28
		 for(int i=1;i<=100;i++){
 8001830:	2301      	movs	r3, #1
 8001832:	627b      	str	r3, [r7, #36]	; 0x24
 8001834:	e00c      	b.n	8001850 <main+0x130>
			 thermoSum+=tempRead();
 8001836:	f7ff ff3d 	bl	80016b4 <tempRead>
 800183a:	eeb0 7a40 	vmov.f32	s14, s0
 800183e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001842:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001846:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		 for(int i=1;i<=100;i++){
 800184a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184c:	3301      	adds	r3, #1
 800184e:	627b      	str	r3, [r7, #36]	; 0x24
 8001850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001852:	2b64      	cmp	r3, #100	; 0x64
 8001854:	ddef      	ble.n	8001836 <main+0x116>
		 }
		 thermoAv = thermoSum/100;
 8001856:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800185a:	eddf 6a12 	vldr	s13, [pc, #72]	; 80018a4 <main+0x184>
 800185e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001862:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001866:	ee17 3a90 	vmov	r3, s15
 800186a:	617b      	str	r3, [r7, #20]

		 // get Value from TDS Sensor
		 int TDSav = 0;
 800186c:	2300      	movs	r3, #0
 800186e:	623b      	str	r3, [r7, #32]
		 sConfig.Channel = ADC_CHANNEL_0;
 8001870:	4b06      	ldr	r3, [pc, #24]	; (800188c <main+0x16c>)
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
		 for(int i=1;i<=100;i++){
 8001876:	2301      	movs	r3, #1
 8001878:	61fb      	str	r3, [r7, #28]
 800187a:	e02f      	b.n	80018dc <main+0x1bc>
 800187c:	20000174 	.word	0x20000174
 8001880:	20000264 	.word	0x20000264
 8001884:	200001bc 	.word	0x200001bc
 8001888:	40020800 	.word	0x40020800
 800188c:	20000270 	.word	0x20000270
 8001890:	08005fc4 	.word	0x08005fc4
 8001894:	20000200 	.word	0x20000200
 8001898:	20000244 	.word	0x20000244
 800189c:	40020000 	.word	0x40020000
 80018a0:	20000248 	.word	0x20000248
 80018a4:	42c80000 	.word	0x42c80000
			 HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80018a8:	4983      	ldr	r1, [pc, #524]	; (8001ab8 <main+0x398>)
 80018aa:	4884      	ldr	r0, [pc, #528]	; (8001abc <main+0x39c>)
 80018ac:	f000 ff8c 	bl	80027c8 <HAL_ADC_ConfigChannel>
			 HAL_ADC_Start(&hadc1);
 80018b0:	4882      	ldr	r0, [pc, #520]	; (8001abc <main+0x39c>)
 80018b2:	f000 fe3d 	bl	8002530 <HAL_ADC_Start>
			 int adcValue;
			 if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK){
 80018b6:	2164      	movs	r1, #100	; 0x64
 80018b8:	4880      	ldr	r0, [pc, #512]	; (8001abc <main+0x39c>)
 80018ba:	f000 feed 	bl	8002698 <HAL_ADC_PollForConversion>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d108      	bne.n	80018d6 <main+0x1b6>
				adcValue = HAL_ADC_GetValue(&hadc1);
 80018c4:	487d      	ldr	r0, [pc, #500]	; (8001abc <main+0x39c>)
 80018c6:	f000 ff72 	bl	80027ae <HAL_ADC_GetValue>
 80018ca:	4603      	mov	r3, r0
 80018cc:	603b      	str	r3, [r7, #0]
				TDSav+=adcValue;
 80018ce:	6a3a      	ldr	r2, [r7, #32]
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	4413      	add	r3, r2
 80018d4:	623b      	str	r3, [r7, #32]
		 for(int i=1;i<=100;i++){
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	3301      	adds	r3, #1
 80018da:	61fb      	str	r3, [r7, #28]
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	2b64      	cmp	r3, #100	; 0x64
 80018e0:	dde2      	ble.n	80018a8 <main+0x188>
			 }
		 }
		 TDSav/=100;
 80018e2:	6a3b      	ldr	r3, [r7, #32]
 80018e4:	4a76      	ldr	r2, [pc, #472]	; (8001ac0 <main+0x3a0>)
 80018e6:	fb82 1203 	smull	r1, r2, r2, r3
 80018ea:	1152      	asrs	r2, r2, #5
 80018ec:	17db      	asrs	r3, r3, #31
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	623b      	str	r3, [r7, #32]
		 float compensationCoefficient=1.0+0.02*(thermoAv - 25.0);
 80018f2:	6978      	ldr	r0, [r7, #20]
 80018f4:	f7fe ff40 	bl	8000778 <__aeabi_i2d>
 80018f8:	f04f 0200 	mov.w	r2, #0
 80018fc:	4b71      	ldr	r3, [pc, #452]	; (8001ac4 <main+0x3a4>)
 80018fe:	f7fe fded 	bl	80004dc <__aeabi_dsub>
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	4610      	mov	r0, r2
 8001908:	4619      	mov	r1, r3
 800190a:	a363      	add	r3, pc, #396	; (adr r3, 8001a98 <main+0x378>)
 800190c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001910:	f7fe fcb6 	bl	8000280 <__aeabi_dmul>
 8001914:	4602      	mov	r2, r0
 8001916:	460b      	mov	r3, r1
 8001918:	4610      	mov	r0, r2
 800191a:	4619      	mov	r1, r3
 800191c:	f04f 0200 	mov.w	r2, #0
 8001920:	4b69      	ldr	r3, [pc, #420]	; (8001ac8 <main+0x3a8>)
 8001922:	f7fe fddd 	bl	80004e0 <__adddf3>
 8001926:	4602      	mov	r2, r0
 8001928:	460b      	mov	r3, r1
 800192a:	4610      	mov	r0, r2
 800192c:	4619      	mov	r1, r3
 800192e:	f7fe ffb5 	bl	800089c <__aeabi_d2f>
 8001932:	4603      	mov	r3, r0
 8001934:	613b      	str	r3, [r7, #16]
		 float compensationVolatge=TDSav/compensationCoefficient;
 8001936:	6a3b      	ldr	r3, [r7, #32]
 8001938:	ee07 3a90 	vmov	s15, r3
 800193c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001940:	ed97 7a04 	vldr	s14, [r7, #16]
 8001944:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001948:	edc7 7a03 	vstr	s15, [r7, #12]
		 int tdsValue=10*(133.42*compensationVolatge*compensationVolatge*compensationVolatge - 255.86*compensationVolatge*compensationVolatge + 857.39*compensationVolatge)*0.5;
 800194c:	68f8      	ldr	r0, [r7, #12]
 800194e:	f7fe ff25 	bl	800079c <__aeabi_f2d>
 8001952:	a353      	add	r3, pc, #332	; (adr r3, 8001aa0 <main+0x380>)
 8001954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001958:	f7fe fc92 	bl	8000280 <__aeabi_dmul>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	4614      	mov	r4, r2
 8001962:	461d      	mov	r5, r3
 8001964:	68f8      	ldr	r0, [r7, #12]
 8001966:	f7fe ff19 	bl	800079c <__aeabi_f2d>
 800196a:	4602      	mov	r2, r0
 800196c:	460b      	mov	r3, r1
 800196e:	4620      	mov	r0, r4
 8001970:	4629      	mov	r1, r5
 8001972:	f7fe fc85 	bl	8000280 <__aeabi_dmul>
 8001976:	4602      	mov	r2, r0
 8001978:	460b      	mov	r3, r1
 800197a:	4614      	mov	r4, r2
 800197c:	461d      	mov	r5, r3
 800197e:	68f8      	ldr	r0, [r7, #12]
 8001980:	f7fe ff0c 	bl	800079c <__aeabi_f2d>
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	4620      	mov	r0, r4
 800198a:	4629      	mov	r1, r5
 800198c:	f7fe fc78 	bl	8000280 <__aeabi_dmul>
 8001990:	4602      	mov	r2, r0
 8001992:	460b      	mov	r3, r1
 8001994:	4614      	mov	r4, r2
 8001996:	461d      	mov	r5, r3
 8001998:	68f8      	ldr	r0, [r7, #12]
 800199a:	f7fe feff 	bl	800079c <__aeabi_f2d>
 800199e:	a342      	add	r3, pc, #264	; (adr r3, 8001aa8 <main+0x388>)
 80019a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a4:	f7fe fc6c 	bl	8000280 <__aeabi_dmul>
 80019a8:	4602      	mov	r2, r0
 80019aa:	460b      	mov	r3, r1
 80019ac:	4690      	mov	r8, r2
 80019ae:	4699      	mov	r9, r3
 80019b0:	68f8      	ldr	r0, [r7, #12]
 80019b2:	f7fe fef3 	bl	800079c <__aeabi_f2d>
 80019b6:	4602      	mov	r2, r0
 80019b8:	460b      	mov	r3, r1
 80019ba:	4640      	mov	r0, r8
 80019bc:	4649      	mov	r1, r9
 80019be:	f7fe fc5f 	bl	8000280 <__aeabi_dmul>
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	4620      	mov	r0, r4
 80019c8:	4629      	mov	r1, r5
 80019ca:	f7fe fd87 	bl	80004dc <__aeabi_dsub>
 80019ce:	4602      	mov	r2, r0
 80019d0:	460b      	mov	r3, r1
 80019d2:	4614      	mov	r4, r2
 80019d4:	461d      	mov	r5, r3
 80019d6:	68f8      	ldr	r0, [r7, #12]
 80019d8:	f7fe fee0 	bl	800079c <__aeabi_f2d>
 80019dc:	a334      	add	r3, pc, #208	; (adr r3, 8001ab0 <main+0x390>)
 80019de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e2:	f7fe fc4d 	bl	8000280 <__aeabi_dmul>
 80019e6:	4602      	mov	r2, r0
 80019e8:	460b      	mov	r3, r1
 80019ea:	4620      	mov	r0, r4
 80019ec:	4629      	mov	r1, r5
 80019ee:	f7fe fd77 	bl	80004e0 <__adddf3>
 80019f2:	4602      	mov	r2, r0
 80019f4:	460b      	mov	r3, r1
 80019f6:	4610      	mov	r0, r2
 80019f8:	4619      	mov	r1, r3
 80019fa:	f04f 0200 	mov.w	r2, #0
 80019fe:	4b33      	ldr	r3, [pc, #204]	; (8001acc <main+0x3ac>)
 8001a00:	f7fe fc3e 	bl	8000280 <__aeabi_dmul>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	4610      	mov	r0, r2
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	f04f 0200 	mov.w	r2, #0
 8001a10:	4b2f      	ldr	r3, [pc, #188]	; (8001ad0 <main+0x3b0>)
 8001a12:	f7fe fc35 	bl	8000280 <__aeabi_dmul>
 8001a16:	4602      	mov	r2, r0
 8001a18:	460b      	mov	r3, r1
 8001a1a:	4610      	mov	r0, r2
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	f7fe ff15 	bl	800084c <__aeabi_d2iz>
 8001a22:	4603      	mov	r3, r0
 8001a24:	60bb      	str	r3, [r7, #8]
//				adcValue = HAL_ADC_GetValue(&hadc1);
//				O2av+=adcValue;
//			 }
//		 }
//		 O2av/=100;
		 int O2av = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10);
 8001a26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a2a:	482a      	ldr	r0, [pc, #168]	; (8001ad4 <main+0x3b4>)
 8001a2c:	f001 fc22 	bl	8003274 <HAL_GPIO_ReadPin>
 8001a30:	4603      	mov	r3, r0
 8001a32:	607b      	str	r3, [r7, #4]

		 // Convert Int to String
		 sprintf(buffer, "%04d", tdsValue);
 8001a34:	68ba      	ldr	r2, [r7, #8]
 8001a36:	4928      	ldr	r1, [pc, #160]	; (8001ad8 <main+0x3b8>)
 8001a38:	4828      	ldr	r0, [pc, #160]	; (8001adc <main+0x3bc>)
 8001a3a:	f003 fe47 	bl	80056cc <siprintf>
		 sprintf(buffer+4, "%04d", thermoAv);
 8001a3e:	4b28      	ldr	r3, [pc, #160]	; (8001ae0 <main+0x3c0>)
 8001a40:	697a      	ldr	r2, [r7, #20]
 8001a42:	4925      	ldr	r1, [pc, #148]	; (8001ad8 <main+0x3b8>)
 8001a44:	4618      	mov	r0, r3
 8001a46:	f003 fe41 	bl	80056cc <siprintf>
		 sprintf(buffer+8, "%04d", O2av);
 8001a4a:	4b26      	ldr	r3, [pc, #152]	; (8001ae4 <main+0x3c4>)
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	4922      	ldr	r1, [pc, #136]	; (8001ad8 <main+0x3b8>)
 8001a50:	4618      	mov	r0, r3
 8001a52:	f003 fe3b 	bl	80056cc <siprintf>
		 buffer[0] = 'A';
 8001a56:	4b21      	ldr	r3, [pc, #132]	; (8001adc <main+0x3bc>)
 8001a58:	2241      	movs	r2, #65	; 0x41
 8001a5a:	701a      	strb	r2, [r3, #0]
		 buffer[4] = 'B';
 8001a5c:	4b1f      	ldr	r3, [pc, #124]	; (8001adc <main+0x3bc>)
 8001a5e:	2242      	movs	r2, #66	; 0x42
 8001a60:	711a      	strb	r2, [r3, #4]
		 buffer[8] = 'C';
 8001a62:	4b1e      	ldr	r3, [pc, #120]	; (8001adc <main+0x3bc>)
 8001a64:	2243      	movs	r2, #67	; 0x43
 8001a66:	721a      	strb	r2, [r3, #8]
		 buffer[12] = '\0';
 8001a68:	4b1c      	ldr	r3, [pc, #112]	; (8001adc <main+0x3bc>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	731a      	strb	r2, [r3, #12]

		 currentPositionOfBuffer = 0;
 8001a6e:	4b1e      	ldr	r3, [pc, #120]	; (8001ae8 <main+0x3c8>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
		 dataPrepared = 1;
 8001a74:	4b1d      	ldr	r3, [pc, #116]	; (8001aec <main+0x3cc>)
 8001a76:	2201      	movs	r2, #1
 8001a78:	601a      	str	r2, [r3, #0]
	 if(pressedButton && !pressing && !workingInProgress){
 8001a7a:	e009      	b.n	8001a90 <main+0x370>
	 }else if(!pressedButton && pressing){
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	f47f ae85 	bne.w	800178e <main+0x6e>
 8001a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	f43f ae81 	beq.w	800178e <main+0x6e>
		 pressing = 0;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  {
 8001a90:	e67d      	b.n	800178e <main+0x6e>
 8001a92:	bf00      	nop
 8001a94:	f3af 8000 	nop.w
 8001a98:	47ae147b 	.word	0x47ae147b
 8001a9c:	3f947ae1 	.word	0x3f947ae1
 8001aa0:	a3d70a3d 	.word	0xa3d70a3d
 8001aa4:	4060ad70 	.word	0x4060ad70
 8001aa8:	1eb851ec 	.word	0x1eb851ec
 8001aac:	406ffb85 	.word	0x406ffb85
 8001ab0:	b851eb85 	.word	0xb851eb85
 8001ab4:	408acb1e 	.word	0x408acb1e
 8001ab8:	20000270 	.word	0x20000270
 8001abc:	200000e4 	.word	0x200000e4
 8001ac0:	51eb851f 	.word	0x51eb851f
 8001ac4:	40390000 	.word	0x40390000
 8001ac8:	3ff00000 	.word	0x3ff00000
 8001acc:	40240000 	.word	0x40240000
 8001ad0:	3fe00000 	.word	0x3fe00000
 8001ad4:	40020800 	.word	0x40020800
 8001ad8:	08005fdc 	.word	0x08005fdc
 8001adc:	20000250 	.word	0x20000250
 8001ae0:	20000254 	.word	0x20000254
 8001ae4:	20000258 	.word	0x20000258
 8001ae8:	2000024c 	.word	0x2000024c
 8001aec:	20000248 	.word	0x20000248

08001af0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b094      	sub	sp, #80	; 0x50
 8001af4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001af6:	f107 0320 	add.w	r3, r7, #32
 8001afa:	2230      	movs	r2, #48	; 0x30
 8001afc:	2100      	movs	r1, #0
 8001afe:	4618      	mov	r0, r3
 8001b00:	f003 fddc 	bl	80056bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b04:	f107 030c 	add.w	r3, r7, #12
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	605a      	str	r2, [r3, #4]
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	60da      	str	r2, [r3, #12]
 8001b12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b14:	2300      	movs	r3, #0
 8001b16:	60bb      	str	r3, [r7, #8]
 8001b18:	4b27      	ldr	r3, [pc, #156]	; (8001bb8 <SystemClock_Config+0xc8>)
 8001b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1c:	4a26      	ldr	r2, [pc, #152]	; (8001bb8 <SystemClock_Config+0xc8>)
 8001b1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b22:	6413      	str	r3, [r2, #64]	; 0x40
 8001b24:	4b24      	ldr	r3, [pc, #144]	; (8001bb8 <SystemClock_Config+0xc8>)
 8001b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2c:	60bb      	str	r3, [r7, #8]
 8001b2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b30:	2300      	movs	r3, #0
 8001b32:	607b      	str	r3, [r7, #4]
 8001b34:	4b21      	ldr	r3, [pc, #132]	; (8001bbc <SystemClock_Config+0xcc>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a20      	ldr	r2, [pc, #128]	; (8001bbc <SystemClock_Config+0xcc>)
 8001b3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b3e:	6013      	str	r3, [r2, #0]
 8001b40:	4b1e      	ldr	r3, [pc, #120]	; (8001bbc <SystemClock_Config+0xcc>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b48:	607b      	str	r3, [r7, #4]
 8001b4a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b50:	2301      	movs	r3, #1
 8001b52:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b54:	2310      	movs	r3, #16
 8001b56:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001b60:	2308      	movs	r3, #8
 8001b62:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001b64:	2364      	movs	r3, #100	; 0x64
 8001b66:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b68:	2302      	movs	r3, #2
 8001b6a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001b6c:	2304      	movs	r3, #4
 8001b6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b70:	f107 0320 	add.w	r3, r7, #32
 8001b74:	4618      	mov	r0, r3
 8001b76:	f001 fbc7 	bl	8003308 <HAL_RCC_OscConfig>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001b80:	f000 fa12 	bl	8001fa8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b84:	230f      	movs	r3, #15
 8001b86:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b88:	2302      	movs	r3, #2
 8001b8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b94:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b96:	2300      	movs	r3, #0
 8001b98:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001b9a:	f107 030c 	add.w	r3, r7, #12
 8001b9e:	2103      	movs	r1, #3
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f001 fe29 	bl	80037f8 <HAL_RCC_ClockConfig>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001bac:	f000 f9fc 	bl	8001fa8 <Error_Handler>
  }
}
 8001bb0:	bf00      	nop
 8001bb2:	3750      	adds	r7, #80	; 0x50
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	40007000 	.word	0x40007000

08001bc0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001bc6:	463b      	mov	r3, r7
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001bd2:	4b2d      	ldr	r3, [pc, #180]	; (8001c88 <MX_ADC1_Init+0xc8>)
 8001bd4:	4a2d      	ldr	r2, [pc, #180]	; (8001c8c <MX_ADC1_Init+0xcc>)
 8001bd6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001bd8:	4b2b      	ldr	r3, [pc, #172]	; (8001c88 <MX_ADC1_Init+0xc8>)
 8001bda:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001bde:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001be0:	4b29      	ldr	r3, [pc, #164]	; (8001c88 <MX_ADC1_Init+0xc8>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001be6:	4b28      	ldr	r3, [pc, #160]	; (8001c88 <MX_ADC1_Init+0xc8>)
 8001be8:	2201      	movs	r2, #1
 8001bea:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001bec:	4b26      	ldr	r3, [pc, #152]	; (8001c88 <MX_ADC1_Init+0xc8>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001bf2:	4b25      	ldr	r3, [pc, #148]	; (8001c88 <MX_ADC1_Init+0xc8>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001bfa:	4b23      	ldr	r3, [pc, #140]	; (8001c88 <MX_ADC1_Init+0xc8>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c00:	4b21      	ldr	r3, [pc, #132]	; (8001c88 <MX_ADC1_Init+0xc8>)
 8001c02:	4a23      	ldr	r2, [pc, #140]	; (8001c90 <MX_ADC1_Init+0xd0>)
 8001c04:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c06:	4b20      	ldr	r3, [pc, #128]	; (8001c88 <MX_ADC1_Init+0xc8>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8001c0c:	4b1e      	ldr	r3, [pc, #120]	; (8001c88 <MX_ADC1_Init+0xc8>)
 8001c0e:	2203      	movs	r2, #3
 8001c10:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001c12:	4b1d      	ldr	r3, [pc, #116]	; (8001c88 <MX_ADC1_Init+0xc8>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c1a:	4b1b      	ldr	r3, [pc, #108]	; (8001c88 <MX_ADC1_Init+0xc8>)
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c20:	4819      	ldr	r0, [pc, #100]	; (8001c88 <MX_ADC1_Init+0xc8>)
 8001c22:	f000 fc41 	bl	80024a8 <HAL_ADC_Init>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001c2c:	f000 f9bc 	bl	8001fa8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001c30:	2300      	movs	r3, #0
 8001c32:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001c34:	2301      	movs	r3, #1
 8001c36:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c3c:	463b      	mov	r3, r7
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4811      	ldr	r0, [pc, #68]	; (8001c88 <MX_ADC1_Init+0xc8>)
 8001c42:	f000 fdc1 	bl	80027c8 <HAL_ADC_ConfigChannel>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001c4c:	f000 f9ac 	bl	8001fa8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 8001c50:	2302      	movs	r3, #2
 8001c52:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c54:	463b      	mov	r3, r7
 8001c56:	4619      	mov	r1, r3
 8001c58:	480b      	ldr	r0, [pc, #44]	; (8001c88 <MX_ADC1_Init+0xc8>)
 8001c5a:	f000 fdb5 	bl	80027c8 <HAL_ADC_ConfigChannel>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8001c64:	f000 f9a0 	bl	8001fa8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 3;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c6c:	463b      	mov	r3, r7
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4805      	ldr	r0, [pc, #20]	; (8001c88 <MX_ADC1_Init+0xc8>)
 8001c72:	f000 fda9 	bl	80027c8 <HAL_ADC_ConfigChannel>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 8001c7c:	f000 f994 	bl	8001fa8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c80:	bf00      	nop
 8001c82:	3710      	adds	r7, #16
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	200000e4 	.word	0x200000e4
 8001c8c:	40012000 	.word	0x40012000
 8001c90:	0f000001 	.word	0x0f000001

08001c94 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b086      	sub	sp, #24
 8001c98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c9a:	f107 0308 	add.w	r3, r7, #8
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	601a      	str	r2, [r3, #0]
 8001ca2:	605a      	str	r2, [r3, #4]
 8001ca4:	609a      	str	r2, [r3, #8]
 8001ca6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ca8:	463b      	mov	r3, r7
 8001caa:	2200      	movs	r2, #0
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001cb0:	4b1e      	ldr	r3, [pc, #120]	; (8001d2c <MX_TIM1_Init+0x98>)
 8001cb2:	4a1f      	ldr	r2, [pc, #124]	; (8001d30 <MX_TIM1_Init+0x9c>)
 8001cb4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63;
 8001cb6:	4b1d      	ldr	r3, [pc, #116]	; (8001d2c <MX_TIM1_Init+0x98>)
 8001cb8:	223f      	movs	r2, #63	; 0x3f
 8001cba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cbc:	4b1b      	ldr	r3, [pc, #108]	; (8001d2c <MX_TIM1_Init+0x98>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001cc2:	4b1a      	ldr	r3, [pc, #104]	; (8001d2c <MX_TIM1_Init+0x98>)
 8001cc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cc8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cca:	4b18      	ldr	r3, [pc, #96]	; (8001d2c <MX_TIM1_Init+0x98>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001cd0:	4b16      	ldr	r3, [pc, #88]	; (8001d2c <MX_TIM1_Init+0x98>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cd6:	4b15      	ldr	r3, [pc, #84]	; (8001d2c <MX_TIM1_Init+0x98>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001cdc:	4813      	ldr	r0, [pc, #76]	; (8001d2c <MX_TIM1_Init+0x98>)
 8001cde:	f001 ffab 	bl	8003c38 <HAL_TIM_Base_Init>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001ce8:	f000 f95e 	bl	8001fa8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cf0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001cf2:	f107 0308 	add.w	r3, r7, #8
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	480c      	ldr	r0, [pc, #48]	; (8001d2c <MX_TIM1_Init+0x98>)
 8001cfa:	f002 f9b1 	bl	8004060 <HAL_TIM_ConfigClockSource>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001d04:	f000 f950 	bl	8001fa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d10:	463b      	mov	r3, r7
 8001d12:	4619      	mov	r1, r3
 8001d14:	4805      	ldr	r0, [pc, #20]	; (8001d2c <MX_TIM1_Init+0x98>)
 8001d16:	f002 fbad 	bl	8004474 <HAL_TIMEx_MasterConfigSynchronization>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001d20:	f000 f942 	bl	8001fa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001d24:	bf00      	nop
 8001d26:	3718      	adds	r7, #24
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	2000012c 	.word	0x2000012c
 8001d30:	40010000 	.word	0x40010000

08001d34 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d3a:	f107 0308 	add.w	r3, r7, #8
 8001d3e:	2200      	movs	r2, #0
 8001d40:	601a      	str	r2, [r3, #0]
 8001d42:	605a      	str	r2, [r3, #4]
 8001d44:	609a      	str	r2, [r3, #8]
 8001d46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d48:	463b      	mov	r3, r7
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d50:	4b1d      	ldr	r3, [pc, #116]	; (8001dc8 <MX_TIM2_Init+0x94>)
 8001d52:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d56:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100;
 8001d58:	4b1b      	ldr	r3, [pc, #108]	; (8001dc8 <MX_TIM2_Init+0x94>)
 8001d5a:	2264      	movs	r2, #100	; 0x64
 8001d5c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d5e:	4b1a      	ldr	r3, [pc, #104]	; (8001dc8 <MX_TIM2_Init+0x94>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100000;
 8001d64:	4b18      	ldr	r3, [pc, #96]	; (8001dc8 <MX_TIM2_Init+0x94>)
 8001d66:	4a19      	ldr	r2, [pc, #100]	; (8001dcc <MX_TIM2_Init+0x98>)
 8001d68:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d6a:	4b17      	ldr	r3, [pc, #92]	; (8001dc8 <MX_TIM2_Init+0x94>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d70:	4b15      	ldr	r3, [pc, #84]	; (8001dc8 <MX_TIM2_Init+0x94>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d76:	4814      	ldr	r0, [pc, #80]	; (8001dc8 <MX_TIM2_Init+0x94>)
 8001d78:	f001 ff5e 	bl	8003c38 <HAL_TIM_Base_Init>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8001d82:	f000 f911 	bl	8001fa8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d8a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d8c:	f107 0308 	add.w	r3, r7, #8
 8001d90:	4619      	mov	r1, r3
 8001d92:	480d      	ldr	r0, [pc, #52]	; (8001dc8 <MX_TIM2_Init+0x94>)
 8001d94:	f002 f964 	bl	8004060 <HAL_TIM_ConfigClockSource>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8001d9e:	f000 f903 	bl	8001fa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001da2:	2300      	movs	r3, #0
 8001da4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001da6:	2300      	movs	r3, #0
 8001da8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001daa:	463b      	mov	r3, r7
 8001dac:	4619      	mov	r1, r3
 8001dae:	4806      	ldr	r0, [pc, #24]	; (8001dc8 <MX_TIM2_Init+0x94>)
 8001db0:	f002 fb60 	bl	8004474 <HAL_TIMEx_MasterConfigSynchronization>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001dba:	f000 f8f5 	bl	8001fa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001dbe:	bf00      	nop
 8001dc0:	3718      	adds	r7, #24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	20000174 	.word	0x20000174
 8001dcc:	000186a0 	.word	0x000186a0

08001dd0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001dd4:	4b11      	ldr	r3, [pc, #68]	; (8001e1c <MX_USART1_UART_Init+0x4c>)
 8001dd6:	4a12      	ldr	r2, [pc, #72]	; (8001e20 <MX_USART1_UART_Init+0x50>)
 8001dd8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001dda:	4b10      	ldr	r3, [pc, #64]	; (8001e1c <MX_USART1_UART_Init+0x4c>)
 8001ddc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001de0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001de2:	4b0e      	ldr	r3, [pc, #56]	; (8001e1c <MX_USART1_UART_Init+0x4c>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001de8:	4b0c      	ldr	r3, [pc, #48]	; (8001e1c <MX_USART1_UART_Init+0x4c>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001dee:	4b0b      	ldr	r3, [pc, #44]	; (8001e1c <MX_USART1_UART_Init+0x4c>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001df4:	4b09      	ldr	r3, [pc, #36]	; (8001e1c <MX_USART1_UART_Init+0x4c>)
 8001df6:	220c      	movs	r2, #12
 8001df8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dfa:	4b08      	ldr	r3, [pc, #32]	; (8001e1c <MX_USART1_UART_Init+0x4c>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e00:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <MX_USART1_UART_Init+0x4c>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e06:	4805      	ldr	r0, [pc, #20]	; (8001e1c <MX_USART1_UART_Init+0x4c>)
 8001e08:	f002 fbb6 	bl	8004578 <HAL_UART_Init>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e12:	f000 f8c9 	bl	8001fa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e16:	bf00      	nop
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	200001bc 	.word	0x200001bc
 8001e20:	40011000 	.word	0x40011000

08001e24 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e28:	4b11      	ldr	r3, [pc, #68]	; (8001e70 <MX_USART2_UART_Init+0x4c>)
 8001e2a:	4a12      	ldr	r2, [pc, #72]	; (8001e74 <MX_USART2_UART_Init+0x50>)
 8001e2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e2e:	4b10      	ldr	r3, [pc, #64]	; (8001e70 <MX_USART2_UART_Init+0x4c>)
 8001e30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e36:	4b0e      	ldr	r3, [pc, #56]	; (8001e70 <MX_USART2_UART_Init+0x4c>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e3c:	4b0c      	ldr	r3, [pc, #48]	; (8001e70 <MX_USART2_UART_Init+0x4c>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e42:	4b0b      	ldr	r3, [pc, #44]	; (8001e70 <MX_USART2_UART_Init+0x4c>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e48:	4b09      	ldr	r3, [pc, #36]	; (8001e70 <MX_USART2_UART_Init+0x4c>)
 8001e4a:	220c      	movs	r2, #12
 8001e4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e4e:	4b08      	ldr	r3, [pc, #32]	; (8001e70 <MX_USART2_UART_Init+0x4c>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e54:	4b06      	ldr	r3, [pc, #24]	; (8001e70 <MX_USART2_UART_Init+0x4c>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e5a:	4805      	ldr	r0, [pc, #20]	; (8001e70 <MX_USART2_UART_Init+0x4c>)
 8001e5c:	f002 fb8c 	bl	8004578 <HAL_UART_Init>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e66:	f000 f89f 	bl	8001fa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e6a:	bf00      	nop
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	20000200 	.word	0x20000200
 8001e74:	40004400 	.word	0x40004400

08001e78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b08a      	sub	sp, #40	; 0x28
 8001e7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e7e:	f107 0314 	add.w	r3, r7, #20
 8001e82:	2200      	movs	r2, #0
 8001e84:	601a      	str	r2, [r3, #0]
 8001e86:	605a      	str	r2, [r3, #4]
 8001e88:	609a      	str	r2, [r3, #8]
 8001e8a:	60da      	str	r2, [r3, #12]
 8001e8c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e8e:	2300      	movs	r3, #0
 8001e90:	613b      	str	r3, [r7, #16]
 8001e92:	4b42      	ldr	r3, [pc, #264]	; (8001f9c <MX_GPIO_Init+0x124>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	4a41      	ldr	r2, [pc, #260]	; (8001f9c <MX_GPIO_Init+0x124>)
 8001e98:	f043 0304 	orr.w	r3, r3, #4
 8001e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e9e:	4b3f      	ldr	r3, [pc, #252]	; (8001f9c <MX_GPIO_Init+0x124>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	f003 0304 	and.w	r3, r3, #4
 8001ea6:	613b      	str	r3, [r7, #16]
 8001ea8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001eaa:	2300      	movs	r3, #0
 8001eac:	60fb      	str	r3, [r7, #12]
 8001eae:	4b3b      	ldr	r3, [pc, #236]	; (8001f9c <MX_GPIO_Init+0x124>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb2:	4a3a      	ldr	r2, [pc, #232]	; (8001f9c <MX_GPIO_Init+0x124>)
 8001eb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eba:	4b38      	ldr	r3, [pc, #224]	; (8001f9c <MX_GPIO_Init+0x124>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ec2:	60fb      	str	r3, [r7, #12]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	60bb      	str	r3, [r7, #8]
 8001eca:	4b34      	ldr	r3, [pc, #208]	; (8001f9c <MX_GPIO_Init+0x124>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ece:	4a33      	ldr	r2, [pc, #204]	; (8001f9c <MX_GPIO_Init+0x124>)
 8001ed0:	f043 0301 	orr.w	r3, r3, #1
 8001ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed6:	4b31      	ldr	r3, [pc, #196]	; (8001f9c <MX_GPIO_Init+0x124>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	60bb      	str	r3, [r7, #8]
 8001ee0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	607b      	str	r3, [r7, #4]
 8001ee6:	4b2d      	ldr	r3, [pc, #180]	; (8001f9c <MX_GPIO_Init+0x124>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eea:	4a2c      	ldr	r2, [pc, #176]	; (8001f9c <MX_GPIO_Init+0x124>)
 8001eec:	f043 0302 	orr.w	r3, r3, #2
 8001ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ef2:	4b2a      	ldr	r3, [pc, #168]	; (8001f9c <MX_GPIO_Init+0x124>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	607b      	str	r3, [r7, #4]
 8001efc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001efe:	2200      	movs	r2, #0
 8001f00:	21e0      	movs	r1, #224	; 0xe0
 8001f02:	4827      	ldr	r0, [pc, #156]	; (8001fa0 <MX_GPIO_Init+0x128>)
 8001f04:	f001 f9ce 	bl	80032a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f0e:	4825      	ldr	r0, [pc, #148]	; (8001fa4 <MX_GPIO_Init+0x12c>)
 8001f10:	f001 f9c8 	bl	80032a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001f14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f1a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001f1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f20:	2300      	movs	r3, #0
 8001f22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001f24:	f107 0314 	add.w	r3, r7, #20
 8001f28:	4619      	mov	r1, r3
 8001f2a:	481e      	ldr	r0, [pc, #120]	; (8001fa4 <MX_GPIO_Init+0x12c>)
 8001f2c:	f001 f81e 	bl	8002f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 PA7 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_7;
 8001f30:	23e0      	movs	r3, #224	; 0xe0
 8001f32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f34:	2301      	movs	r3, #1
 8001f36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f40:	f107 0314 	add.w	r3, r7, #20
 8001f44:	4619      	mov	r1, r3
 8001f46:	4816      	ldr	r0, [pc, #88]	; (8001fa0 <MX_GPIO_Init+0x128>)
 8001f48:	f001 f810 	bl	8002f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f52:	2300      	movs	r3, #0
 8001f54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f56:	2300      	movs	r3, #0
 8001f58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f5a:	f107 0314 	add.w	r3, r7, #20
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4810      	ldr	r0, [pc, #64]	; (8001fa4 <MX_GPIO_Init+0x12c>)
 8001f62:	f001 f803 	bl	8002f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001f66:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f70:	2300      	movs	r3, #0
 8001f72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f74:	2300      	movs	r3, #0
 8001f76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f78:	f107 0314 	add.w	r3, r7, #20
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4809      	ldr	r0, [pc, #36]	; (8001fa4 <MX_GPIO_Init+0x12c>)
 8001f80:	f000 fff4 	bl	8002f6c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001f84:	2200      	movs	r2, #0
 8001f86:	2100      	movs	r1, #0
 8001f88:	2028      	movs	r0, #40	; 0x28
 8001f8a:	f000 ff26 	bl	8002dda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f8e:	2028      	movs	r0, #40	; 0x28
 8001f90:	f000 ff3f 	bl	8002e12 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f94:	bf00      	nop
 8001f96:	3728      	adds	r7, #40	; 0x28
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	40023800 	.word	0x40023800
 8001fa0:	40020000 	.word	0x40020000
 8001fa4:	40020800 	.word	0x40020800

08001fa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fac:	b672      	cpsid	i
}
 8001fae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fb0:	e7fe      	b.n	8001fb0 <Error_Handler+0x8>
	...

08001fb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	607b      	str	r3, [r7, #4]
 8001fbe:	4b10      	ldr	r3, [pc, #64]	; (8002000 <HAL_MspInit+0x4c>)
 8001fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc2:	4a0f      	ldr	r2, [pc, #60]	; (8002000 <HAL_MspInit+0x4c>)
 8001fc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fc8:	6453      	str	r3, [r2, #68]	; 0x44
 8001fca:	4b0d      	ldr	r3, [pc, #52]	; (8002000 <HAL_MspInit+0x4c>)
 8001fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fd2:	607b      	str	r3, [r7, #4]
 8001fd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	603b      	str	r3, [r7, #0]
 8001fda:	4b09      	ldr	r3, [pc, #36]	; (8002000 <HAL_MspInit+0x4c>)
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fde:	4a08      	ldr	r2, [pc, #32]	; (8002000 <HAL_MspInit+0x4c>)
 8001fe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fe4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fe6:	4b06      	ldr	r3, [pc, #24]	; (8002000 <HAL_MspInit+0x4c>)
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fee:	603b      	str	r3, [r7, #0]
 8001ff0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ff2:	bf00      	nop
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	40023800 	.word	0x40023800

08002004 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b08a      	sub	sp, #40	; 0x28
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800200c:	f107 0314 	add.w	r3, r7, #20
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	605a      	str	r2, [r3, #4]
 8002016:	609a      	str	r2, [r3, #8]
 8002018:	60da      	str	r2, [r3, #12]
 800201a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a17      	ldr	r2, [pc, #92]	; (8002080 <HAL_ADC_MspInit+0x7c>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d127      	bne.n	8002076 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002026:	2300      	movs	r3, #0
 8002028:	613b      	str	r3, [r7, #16]
 800202a:	4b16      	ldr	r3, [pc, #88]	; (8002084 <HAL_ADC_MspInit+0x80>)
 800202c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202e:	4a15      	ldr	r2, [pc, #84]	; (8002084 <HAL_ADC_MspInit+0x80>)
 8002030:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002034:	6453      	str	r3, [r2, #68]	; 0x44
 8002036:	4b13      	ldr	r3, [pc, #76]	; (8002084 <HAL_ADC_MspInit+0x80>)
 8002038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800203e:	613b      	str	r3, [r7, #16]
 8002040:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002042:	2300      	movs	r3, #0
 8002044:	60fb      	str	r3, [r7, #12]
 8002046:	4b0f      	ldr	r3, [pc, #60]	; (8002084 <HAL_ADC_MspInit+0x80>)
 8002048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204a:	4a0e      	ldr	r2, [pc, #56]	; (8002084 <HAL_ADC_MspInit+0x80>)
 800204c:	f043 0301 	orr.w	r3, r3, #1
 8002050:	6313      	str	r3, [r2, #48]	; 0x30
 8002052:	4b0c      	ldr	r3, [pc, #48]	; (8002084 <HAL_ADC_MspInit+0x80>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	60fb      	str	r3, [r7, #12]
 800205c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 800205e:	2313      	movs	r3, #19
 8002060:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002062:	2303      	movs	r3, #3
 8002064:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002066:	2300      	movs	r3, #0
 8002068:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800206a:	f107 0314 	add.w	r3, r7, #20
 800206e:	4619      	mov	r1, r3
 8002070:	4805      	ldr	r0, [pc, #20]	; (8002088 <HAL_ADC_MspInit+0x84>)
 8002072:	f000 ff7b 	bl	8002f6c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002076:	bf00      	nop
 8002078:	3728      	adds	r7, #40	; 0x28
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	40012000 	.word	0x40012000
 8002084:	40023800 	.word	0x40023800
 8002088:	40020000 	.word	0x40020000

0800208c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a18      	ldr	r2, [pc, #96]	; (80020fc <HAL_TIM_Base_MspInit+0x70>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d10e      	bne.n	80020bc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800209e:	2300      	movs	r3, #0
 80020a0:	60fb      	str	r3, [r7, #12]
 80020a2:	4b17      	ldr	r3, [pc, #92]	; (8002100 <HAL_TIM_Base_MspInit+0x74>)
 80020a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a6:	4a16      	ldr	r2, [pc, #88]	; (8002100 <HAL_TIM_Base_MspInit+0x74>)
 80020a8:	f043 0301 	orr.w	r3, r3, #1
 80020ac:	6453      	str	r3, [r2, #68]	; 0x44
 80020ae:	4b14      	ldr	r3, [pc, #80]	; (8002100 <HAL_TIM_Base_MspInit+0x74>)
 80020b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	60fb      	str	r3, [r7, #12]
 80020b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80020ba:	e01a      	b.n	80020f2 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM2)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020c4:	d115      	bne.n	80020f2 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020c6:	2300      	movs	r3, #0
 80020c8:	60bb      	str	r3, [r7, #8]
 80020ca:	4b0d      	ldr	r3, [pc, #52]	; (8002100 <HAL_TIM_Base_MspInit+0x74>)
 80020cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ce:	4a0c      	ldr	r2, [pc, #48]	; (8002100 <HAL_TIM_Base_MspInit+0x74>)
 80020d0:	f043 0301 	orr.w	r3, r3, #1
 80020d4:	6413      	str	r3, [r2, #64]	; 0x40
 80020d6:	4b0a      	ldr	r3, [pc, #40]	; (8002100 <HAL_TIM_Base_MspInit+0x74>)
 80020d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	60bb      	str	r3, [r7, #8]
 80020e0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80020e2:	2200      	movs	r2, #0
 80020e4:	2100      	movs	r1, #0
 80020e6:	201c      	movs	r0, #28
 80020e8:	f000 fe77 	bl	8002dda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80020ec:	201c      	movs	r0, #28
 80020ee:	f000 fe90 	bl	8002e12 <HAL_NVIC_EnableIRQ>
}
 80020f2:	bf00      	nop
 80020f4:	3710      	adds	r7, #16
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	40010000 	.word	0x40010000
 8002100:	40023800 	.word	0x40023800

08002104 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b08c      	sub	sp, #48	; 0x30
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800210c:	f107 031c 	add.w	r3, r7, #28
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	605a      	str	r2, [r3, #4]
 8002116:	609a      	str	r2, [r3, #8]
 8002118:	60da      	str	r2, [r3, #12]
 800211a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a36      	ldr	r2, [pc, #216]	; (80021fc <HAL_UART_MspInit+0xf8>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d135      	bne.n	8002192 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	61bb      	str	r3, [r7, #24]
 800212a:	4b35      	ldr	r3, [pc, #212]	; (8002200 <HAL_UART_MspInit+0xfc>)
 800212c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212e:	4a34      	ldr	r2, [pc, #208]	; (8002200 <HAL_UART_MspInit+0xfc>)
 8002130:	f043 0310 	orr.w	r3, r3, #16
 8002134:	6453      	str	r3, [r2, #68]	; 0x44
 8002136:	4b32      	ldr	r3, [pc, #200]	; (8002200 <HAL_UART_MspInit+0xfc>)
 8002138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213a:	f003 0310 	and.w	r3, r3, #16
 800213e:	61bb      	str	r3, [r7, #24]
 8002140:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002142:	2300      	movs	r3, #0
 8002144:	617b      	str	r3, [r7, #20]
 8002146:	4b2e      	ldr	r3, [pc, #184]	; (8002200 <HAL_UART_MspInit+0xfc>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	4a2d      	ldr	r2, [pc, #180]	; (8002200 <HAL_UART_MspInit+0xfc>)
 800214c:	f043 0301 	orr.w	r3, r3, #1
 8002150:	6313      	str	r3, [r2, #48]	; 0x30
 8002152:	4b2b      	ldr	r3, [pc, #172]	; (8002200 <HAL_UART_MspInit+0xfc>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	617b      	str	r3, [r7, #20]
 800215c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800215e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002162:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002164:	2302      	movs	r3, #2
 8002166:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002168:	2300      	movs	r3, #0
 800216a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800216c:	2303      	movs	r3, #3
 800216e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002170:	2307      	movs	r3, #7
 8002172:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002174:	f107 031c 	add.w	r3, r7, #28
 8002178:	4619      	mov	r1, r3
 800217a:	4822      	ldr	r0, [pc, #136]	; (8002204 <HAL_UART_MspInit+0x100>)
 800217c:	f000 fef6 	bl	8002f6c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002180:	2200      	movs	r2, #0
 8002182:	2100      	movs	r1, #0
 8002184:	2025      	movs	r0, #37	; 0x25
 8002186:	f000 fe28 	bl	8002dda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800218a:	2025      	movs	r0, #37	; 0x25
 800218c:	f000 fe41 	bl	8002e12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002190:	e030      	b.n	80021f4 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a1c      	ldr	r2, [pc, #112]	; (8002208 <HAL_UART_MspInit+0x104>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d12b      	bne.n	80021f4 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800219c:	2300      	movs	r3, #0
 800219e:	613b      	str	r3, [r7, #16]
 80021a0:	4b17      	ldr	r3, [pc, #92]	; (8002200 <HAL_UART_MspInit+0xfc>)
 80021a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a4:	4a16      	ldr	r2, [pc, #88]	; (8002200 <HAL_UART_MspInit+0xfc>)
 80021a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021aa:	6413      	str	r3, [r2, #64]	; 0x40
 80021ac:	4b14      	ldr	r3, [pc, #80]	; (8002200 <HAL_UART_MspInit+0xfc>)
 80021ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b4:	613b      	str	r3, [r7, #16]
 80021b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021b8:	2300      	movs	r3, #0
 80021ba:	60fb      	str	r3, [r7, #12]
 80021bc:	4b10      	ldr	r3, [pc, #64]	; (8002200 <HAL_UART_MspInit+0xfc>)
 80021be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c0:	4a0f      	ldr	r2, [pc, #60]	; (8002200 <HAL_UART_MspInit+0xfc>)
 80021c2:	f043 0301 	orr.w	r3, r3, #1
 80021c6:	6313      	str	r3, [r2, #48]	; 0x30
 80021c8:	4b0d      	ldr	r3, [pc, #52]	; (8002200 <HAL_UART_MspInit+0xfc>)
 80021ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021cc:	f003 0301 	and.w	r3, r3, #1
 80021d0:	60fb      	str	r3, [r7, #12]
 80021d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80021d4:	230c      	movs	r3, #12
 80021d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d8:	2302      	movs	r3, #2
 80021da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021dc:	2300      	movs	r3, #0
 80021de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e0:	2303      	movs	r3, #3
 80021e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021e4:	2307      	movs	r3, #7
 80021e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e8:	f107 031c 	add.w	r3, r7, #28
 80021ec:	4619      	mov	r1, r3
 80021ee:	4805      	ldr	r0, [pc, #20]	; (8002204 <HAL_UART_MspInit+0x100>)
 80021f0:	f000 febc 	bl	8002f6c <HAL_GPIO_Init>
}
 80021f4:	bf00      	nop
 80021f6:	3730      	adds	r7, #48	; 0x30
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	40011000 	.word	0x40011000
 8002200:	40023800 	.word	0x40023800
 8002204:	40020000 	.word	0x40020000
 8002208:	40004400 	.word	0x40004400

0800220c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002210:	e7fe      	b.n	8002210 <NMI_Handler+0x4>

08002212 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002212:	b480      	push	{r7}
 8002214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002216:	e7fe      	b.n	8002216 <HardFault_Handler+0x4>

08002218 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800221c:	e7fe      	b.n	800221c <MemManage_Handler+0x4>

0800221e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800221e:	b480      	push	{r7}
 8002220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002222:	e7fe      	b.n	8002222 <BusFault_Handler+0x4>

08002224 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002228:	e7fe      	b.n	8002228 <UsageFault_Handler+0x4>

0800222a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800222a:	b480      	push	{r7}
 800222c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800222e:	bf00      	nop
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800223c:	bf00      	nop
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr

08002246 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002246:	b480      	push	{r7}
 8002248:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800224a:	bf00      	nop
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002258:	f000 f8e2 	bl	8002420 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800225c:	bf00      	nop
 800225e:	bd80      	pop	{r7, pc}

08002260 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002264:	4802      	ldr	r0, [pc, #8]	; (8002270 <TIM2_IRQHandler+0x10>)
 8002266:	f001 fdf3 	bl	8003e50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800226a:	bf00      	nop
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	20000174 	.word	0x20000174

08002274 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002278:	4802      	ldr	r0, [pc, #8]	; (8002284 <USART1_IRQHandler+0x10>)
 800227a:	f002 fa8d 	bl	8004798 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800227e:	bf00      	nop
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	200001bc 	.word	0x200001bc

08002288 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800228c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002290:	f001 f822 	bl	80032d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002294:	bf00      	nop
 8002296:	bd80      	pop	{r7, pc}

08002298 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022a0:	4a14      	ldr	r2, [pc, #80]	; (80022f4 <_sbrk+0x5c>)
 80022a2:	4b15      	ldr	r3, [pc, #84]	; (80022f8 <_sbrk+0x60>)
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022ac:	4b13      	ldr	r3, [pc, #76]	; (80022fc <_sbrk+0x64>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d102      	bne.n	80022ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022b4:	4b11      	ldr	r3, [pc, #68]	; (80022fc <_sbrk+0x64>)
 80022b6:	4a12      	ldr	r2, [pc, #72]	; (8002300 <_sbrk+0x68>)
 80022b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022ba:	4b10      	ldr	r3, [pc, #64]	; (80022fc <_sbrk+0x64>)
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4413      	add	r3, r2
 80022c2:	693a      	ldr	r2, [r7, #16]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d207      	bcs.n	80022d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022c8:	f003 f9ce 	bl	8005668 <__errno>
 80022cc:	4603      	mov	r3, r0
 80022ce:	220c      	movs	r2, #12
 80022d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022d2:	f04f 33ff 	mov.w	r3, #4294967295
 80022d6:	e009      	b.n	80022ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022d8:	4b08      	ldr	r3, [pc, #32]	; (80022fc <_sbrk+0x64>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022de:	4b07      	ldr	r3, [pc, #28]	; (80022fc <_sbrk+0x64>)
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4413      	add	r3, r2
 80022e6:	4a05      	ldr	r2, [pc, #20]	; (80022fc <_sbrk+0x64>)
 80022e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022ea:	68fb      	ldr	r3, [r7, #12]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3718      	adds	r7, #24
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	20020000 	.word	0x20020000
 80022f8:	00000400 	.word	0x00000400
 80022fc:	20000280 	.word	0x20000280
 8002300:	20000298 	.word	0x20000298

08002304 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002308:	4b06      	ldr	r3, [pc, #24]	; (8002324 <SystemInit+0x20>)
 800230a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800230e:	4a05      	ldr	r2, [pc, #20]	; (8002324 <SystemInit+0x20>)
 8002310:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002314:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002318:	bf00      	nop
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	e000ed00 	.word	0xe000ed00

08002328 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002328:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002360 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800232c:	480d      	ldr	r0, [pc, #52]	; (8002364 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800232e:	490e      	ldr	r1, [pc, #56]	; (8002368 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002330:	4a0e      	ldr	r2, [pc, #56]	; (800236c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002332:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002334:	e002      	b.n	800233c <LoopCopyDataInit>

08002336 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002336:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002338:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800233a:	3304      	adds	r3, #4

0800233c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800233c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800233e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002340:	d3f9      	bcc.n	8002336 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002342:	4a0b      	ldr	r2, [pc, #44]	; (8002370 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002344:	4c0b      	ldr	r4, [pc, #44]	; (8002374 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002346:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002348:	e001      	b.n	800234e <LoopFillZerobss>

0800234a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800234a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800234c:	3204      	adds	r2, #4

0800234e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800234e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002350:	d3fb      	bcc.n	800234a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002352:	f7ff ffd7 	bl	8002304 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002356:	f003 f98d 	bl	8005674 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800235a:	f7ff f9e1 	bl	8001720 <main>
  bx  lr    
 800235e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002360:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002364:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002368:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800236c:	08006040 	.word	0x08006040
  ldr r2, =_sbss
 8002370:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002374:	20000298 	.word	0x20000298

08002378 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002378:	e7fe      	b.n	8002378 <ADC_IRQHandler>
	...

0800237c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002380:	4b0e      	ldr	r3, [pc, #56]	; (80023bc <HAL_Init+0x40>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a0d      	ldr	r2, [pc, #52]	; (80023bc <HAL_Init+0x40>)
 8002386:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800238a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800238c:	4b0b      	ldr	r3, [pc, #44]	; (80023bc <HAL_Init+0x40>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a0a      	ldr	r2, [pc, #40]	; (80023bc <HAL_Init+0x40>)
 8002392:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002396:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002398:	4b08      	ldr	r3, [pc, #32]	; (80023bc <HAL_Init+0x40>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a07      	ldr	r2, [pc, #28]	; (80023bc <HAL_Init+0x40>)
 800239e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023a4:	2003      	movs	r0, #3
 80023a6:	f000 fd0d 	bl	8002dc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023aa:	2000      	movs	r0, #0
 80023ac:	f000 f808 	bl	80023c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023b0:	f7ff fe00 	bl	8001fb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	40023c00 	.word	0x40023c00

080023c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023c8:	4b12      	ldr	r3, [pc, #72]	; (8002414 <HAL_InitTick+0x54>)
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	4b12      	ldr	r3, [pc, #72]	; (8002418 <HAL_InitTick+0x58>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	4619      	mov	r1, r3
 80023d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80023da:	fbb2 f3f3 	udiv	r3, r2, r3
 80023de:	4618      	mov	r0, r3
 80023e0:	f000 fd25 	bl	8002e2e <HAL_SYSTICK_Config>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e00e      	b.n	800240c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2b0f      	cmp	r3, #15
 80023f2:	d80a      	bhi.n	800240a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023f4:	2200      	movs	r2, #0
 80023f6:	6879      	ldr	r1, [r7, #4]
 80023f8:	f04f 30ff 	mov.w	r0, #4294967295
 80023fc:	f000 fced 	bl	8002dda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002400:	4a06      	ldr	r2, [pc, #24]	; (800241c <HAL_InitTick+0x5c>)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002406:	2300      	movs	r3, #0
 8002408:	e000      	b.n	800240c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
}
 800240c:	4618      	mov	r0, r3
 800240e:	3708      	adds	r7, #8
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	20000000 	.word	0x20000000
 8002418:	20000008 	.word	0x20000008
 800241c:	20000004 	.word	0x20000004

08002420 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002424:	4b06      	ldr	r3, [pc, #24]	; (8002440 <HAL_IncTick+0x20>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	461a      	mov	r2, r3
 800242a:	4b06      	ldr	r3, [pc, #24]	; (8002444 <HAL_IncTick+0x24>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4413      	add	r3, r2
 8002430:	4a04      	ldr	r2, [pc, #16]	; (8002444 <HAL_IncTick+0x24>)
 8002432:	6013      	str	r3, [r2, #0]
}
 8002434:	bf00      	nop
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	20000008 	.word	0x20000008
 8002444:	20000284 	.word	0x20000284

08002448 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  return uwTick;
 800244c:	4b03      	ldr	r3, [pc, #12]	; (800245c <HAL_GetTick+0x14>)
 800244e:	681b      	ldr	r3, [r3, #0]
}
 8002450:	4618      	mov	r0, r3
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	20000284 	.word	0x20000284

08002460 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002468:	f7ff ffee 	bl	8002448 <HAL_GetTick>
 800246c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002478:	d005      	beq.n	8002486 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800247a:	4b0a      	ldr	r3, [pc, #40]	; (80024a4 <HAL_Delay+0x44>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	461a      	mov	r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	4413      	add	r3, r2
 8002484:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002486:	bf00      	nop
 8002488:	f7ff ffde 	bl	8002448 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	68fa      	ldr	r2, [r7, #12]
 8002494:	429a      	cmp	r2, r3
 8002496:	d8f7      	bhi.n	8002488 <HAL_Delay+0x28>
  {
  }
}
 8002498:	bf00      	nop
 800249a:	bf00      	nop
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	20000008 	.word	0x20000008

080024a8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024b0:	2300      	movs	r3, #0
 80024b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e033      	b.n	8002526 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d109      	bne.n	80024da <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f7ff fd9c 	bl	8002004 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024de:	f003 0310 	and.w	r3, r3, #16
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d118      	bne.n	8002518 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80024ee:	f023 0302 	bic.w	r3, r3, #2
 80024f2:	f043 0202 	orr.w	r2, r3, #2
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f000 fa96 	bl	8002a2c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250a:	f023 0303 	bic.w	r3, r3, #3
 800250e:	f043 0201 	orr.w	r2, r3, #1
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	641a      	str	r2, [r3, #64]	; 0x40
 8002516:	e001      	b.n	800251c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002524:	7bfb      	ldrb	r3, [r7, #15]
}
 8002526:	4618      	mov	r0, r3
 8002528:	3710      	adds	r7, #16
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
	...

08002530 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002538:	2300      	movs	r3, #0
 800253a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002542:	2b01      	cmp	r3, #1
 8002544:	d101      	bne.n	800254a <HAL_ADC_Start+0x1a>
 8002546:	2302      	movs	r3, #2
 8002548:	e097      	b.n	800267a <HAL_ADC_Start+0x14a>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2201      	movs	r2, #1
 800254e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f003 0301 	and.w	r3, r3, #1
 800255c:	2b01      	cmp	r3, #1
 800255e:	d018      	beq.n	8002592 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	689a      	ldr	r2, [r3, #8]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f042 0201 	orr.w	r2, r2, #1
 800256e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002570:	4b45      	ldr	r3, [pc, #276]	; (8002688 <HAL_ADC_Start+0x158>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a45      	ldr	r2, [pc, #276]	; (800268c <HAL_ADC_Start+0x15c>)
 8002576:	fba2 2303 	umull	r2, r3, r2, r3
 800257a:	0c9a      	lsrs	r2, r3, #18
 800257c:	4613      	mov	r3, r2
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	4413      	add	r3, r2
 8002582:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002584:	e002      	b.n	800258c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	3b01      	subs	r3, #1
 800258a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d1f9      	bne.n	8002586 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f003 0301 	and.w	r3, r3, #1
 800259c:	2b01      	cmp	r3, #1
 800259e:	d15f      	bne.n	8002660 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80025a8:	f023 0301 	bic.w	r3, r3, #1
 80025ac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d007      	beq.n	80025d2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025ca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025de:	d106      	bne.n	80025ee <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e4:	f023 0206 	bic.w	r2, r3, #6
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	645a      	str	r2, [r3, #68]	; 0x44
 80025ec:	e002      	b.n	80025f4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025fc:	4b24      	ldr	r3, [pc, #144]	; (8002690 <HAL_ADC_Start+0x160>)
 80025fe:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002608:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f003 031f 	and.w	r3, r3, #31
 8002612:	2b00      	cmp	r3, #0
 8002614:	d10f      	bne.n	8002636 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d129      	bne.n	8002678 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	689a      	ldr	r2, [r3, #8]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002632:	609a      	str	r2, [r3, #8]
 8002634:	e020      	b.n	8002678 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a16      	ldr	r2, [pc, #88]	; (8002694 <HAL_ADC_Start+0x164>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d11b      	bne.n	8002678 <HAL_ADC_Start+0x148>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d114      	bne.n	8002678 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	689a      	ldr	r2, [r3, #8]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800265c:	609a      	str	r2, [r3, #8]
 800265e:	e00b      	b.n	8002678 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002664:	f043 0210 	orr.w	r2, r3, #16
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002670:	f043 0201 	orr.w	r2, r3, #1
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3714      	adds	r7, #20
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	20000000 	.word	0x20000000
 800268c:	431bde83 	.word	0x431bde83
 8002690:	40012300 	.word	0x40012300
 8002694:	40012000 	.word	0x40012000

08002698 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80026a2:	2300      	movs	r3, #0
 80026a4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026b4:	d113      	bne.n	80026de <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80026c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026c4:	d10b      	bne.n	80026de <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ca:	f043 0220 	orr.w	r2, r3, #32
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e063      	b.n	80027a6 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80026de:	f7ff feb3 	bl	8002448 <HAL_GetTick>
 80026e2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80026e4:	e021      	b.n	800272a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ec:	d01d      	beq.n	800272a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d007      	beq.n	8002704 <HAL_ADC_PollForConversion+0x6c>
 80026f4:	f7ff fea8 	bl	8002448 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	683a      	ldr	r2, [r7, #0]
 8002700:	429a      	cmp	r2, r3
 8002702:	d212      	bcs.n	800272a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b02      	cmp	r3, #2
 8002710:	d00b      	beq.n	800272a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	f043 0204 	orr.w	r2, r3, #4
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e03d      	b.n	80027a6 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0302 	and.w	r3, r3, #2
 8002734:	2b02      	cmp	r3, #2
 8002736:	d1d6      	bne.n	80026e6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f06f 0212 	mvn.w	r2, #18
 8002740:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002746:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d123      	bne.n	80027a4 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002760:	2b00      	cmp	r3, #0
 8002762:	d11f      	bne.n	80027a4 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800276a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800276e:	2b00      	cmp	r3, #0
 8002770:	d006      	beq.n	8002780 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800277c:	2b00      	cmp	r3, #0
 800277e:	d111      	bne.n	80027a4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002784:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002790:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d105      	bne.n	80027a4 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279c:	f043 0201 	orr.w	r2, r3, #1
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80027ae:	b480      	push	{r7}
 80027b0:	b083      	sub	sp, #12
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80027bc:	4618      	mov	r0, r3
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b085      	sub	sp, #20
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80027d2:	2300      	movs	r3, #0
 80027d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d101      	bne.n	80027e4 <HAL_ADC_ConfigChannel+0x1c>
 80027e0:	2302      	movs	r3, #2
 80027e2:	e113      	b.n	8002a0c <HAL_ADC_ConfigChannel+0x244>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2b09      	cmp	r3, #9
 80027f2:	d925      	bls.n	8002840 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68d9      	ldr	r1, [r3, #12]
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	b29b      	uxth	r3, r3
 8002800:	461a      	mov	r2, r3
 8002802:	4613      	mov	r3, r2
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	4413      	add	r3, r2
 8002808:	3b1e      	subs	r3, #30
 800280a:	2207      	movs	r2, #7
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	43da      	mvns	r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	400a      	ands	r2, r1
 8002818:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68d9      	ldr	r1, [r3, #12]
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	689a      	ldr	r2, [r3, #8]
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	b29b      	uxth	r3, r3
 800282a:	4618      	mov	r0, r3
 800282c:	4603      	mov	r3, r0
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	4403      	add	r3, r0
 8002832:	3b1e      	subs	r3, #30
 8002834:	409a      	lsls	r2, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	430a      	orrs	r2, r1
 800283c:	60da      	str	r2, [r3, #12]
 800283e:	e022      	b.n	8002886 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	6919      	ldr	r1, [r3, #16]
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	b29b      	uxth	r3, r3
 800284c:	461a      	mov	r2, r3
 800284e:	4613      	mov	r3, r2
 8002850:	005b      	lsls	r3, r3, #1
 8002852:	4413      	add	r3, r2
 8002854:	2207      	movs	r2, #7
 8002856:	fa02 f303 	lsl.w	r3, r2, r3
 800285a:	43da      	mvns	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	400a      	ands	r2, r1
 8002862:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	6919      	ldr	r1, [r3, #16]
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	689a      	ldr	r2, [r3, #8]
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	b29b      	uxth	r3, r3
 8002874:	4618      	mov	r0, r3
 8002876:	4603      	mov	r3, r0
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	4403      	add	r3, r0
 800287c:	409a      	lsls	r2, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	430a      	orrs	r2, r1
 8002884:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	2b06      	cmp	r3, #6
 800288c:	d824      	bhi.n	80028d8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685a      	ldr	r2, [r3, #4]
 8002898:	4613      	mov	r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	4413      	add	r3, r2
 800289e:	3b05      	subs	r3, #5
 80028a0:	221f      	movs	r2, #31
 80028a2:	fa02 f303 	lsl.w	r3, r2, r3
 80028a6:	43da      	mvns	r2, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	400a      	ands	r2, r1
 80028ae:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	4618      	mov	r0, r3
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685a      	ldr	r2, [r3, #4]
 80028c2:	4613      	mov	r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	4413      	add	r3, r2
 80028c8:	3b05      	subs	r3, #5
 80028ca:	fa00 f203 	lsl.w	r2, r0, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	430a      	orrs	r2, r1
 80028d4:	635a      	str	r2, [r3, #52]	; 0x34
 80028d6:	e04c      	b.n	8002972 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	2b0c      	cmp	r3, #12
 80028de:	d824      	bhi.n	800292a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685a      	ldr	r2, [r3, #4]
 80028ea:	4613      	mov	r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	4413      	add	r3, r2
 80028f0:	3b23      	subs	r3, #35	; 0x23
 80028f2:	221f      	movs	r2, #31
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	43da      	mvns	r2, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	400a      	ands	r2, r1
 8002900:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	b29b      	uxth	r3, r3
 800290e:	4618      	mov	r0, r3
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685a      	ldr	r2, [r3, #4]
 8002914:	4613      	mov	r3, r2
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	4413      	add	r3, r2
 800291a:	3b23      	subs	r3, #35	; 0x23
 800291c:	fa00 f203 	lsl.w	r2, r0, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	430a      	orrs	r2, r1
 8002926:	631a      	str	r2, [r3, #48]	; 0x30
 8002928:	e023      	b.n	8002972 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685a      	ldr	r2, [r3, #4]
 8002934:	4613      	mov	r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	4413      	add	r3, r2
 800293a:	3b41      	subs	r3, #65	; 0x41
 800293c:	221f      	movs	r2, #31
 800293e:	fa02 f303 	lsl.w	r3, r2, r3
 8002942:	43da      	mvns	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	400a      	ands	r2, r1
 800294a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	b29b      	uxth	r3, r3
 8002958:	4618      	mov	r0, r3
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	685a      	ldr	r2, [r3, #4]
 800295e:	4613      	mov	r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	4413      	add	r3, r2
 8002964:	3b41      	subs	r3, #65	; 0x41
 8002966:	fa00 f203 	lsl.w	r2, r0, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	430a      	orrs	r2, r1
 8002970:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002972:	4b29      	ldr	r3, [pc, #164]	; (8002a18 <HAL_ADC_ConfigChannel+0x250>)
 8002974:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a28      	ldr	r2, [pc, #160]	; (8002a1c <HAL_ADC_ConfigChannel+0x254>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d10f      	bne.n	80029a0 <HAL_ADC_ConfigChannel+0x1d8>
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2b12      	cmp	r3, #18
 8002986:	d10b      	bne.n	80029a0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a1d      	ldr	r2, [pc, #116]	; (8002a1c <HAL_ADC_ConfigChannel+0x254>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d12b      	bne.n	8002a02 <HAL_ADC_ConfigChannel+0x23a>
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a1c      	ldr	r2, [pc, #112]	; (8002a20 <HAL_ADC_ConfigChannel+0x258>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d003      	beq.n	80029bc <HAL_ADC_ConfigChannel+0x1f4>
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2b11      	cmp	r3, #17
 80029ba:	d122      	bne.n	8002a02 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a11      	ldr	r2, [pc, #68]	; (8002a20 <HAL_ADC_ConfigChannel+0x258>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d111      	bne.n	8002a02 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80029de:	4b11      	ldr	r3, [pc, #68]	; (8002a24 <HAL_ADC_ConfigChannel+0x25c>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a11      	ldr	r2, [pc, #68]	; (8002a28 <HAL_ADC_ConfigChannel+0x260>)
 80029e4:	fba2 2303 	umull	r2, r3, r2, r3
 80029e8:	0c9a      	lsrs	r2, r3, #18
 80029ea:	4613      	mov	r3, r2
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	4413      	add	r3, r2
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80029f4:	e002      	b.n	80029fc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	3b01      	subs	r3, #1
 80029fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1f9      	bne.n	80029f6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3714      	adds	r7, #20
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr
 8002a18:	40012300 	.word	0x40012300
 8002a1c:	40012000 	.word	0x40012000
 8002a20:	10000012 	.word	0x10000012
 8002a24:	20000000 	.word	0x20000000
 8002a28:	431bde83 	.word	0x431bde83

08002a2c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a34:	4b79      	ldr	r3, [pc, #484]	; (8002c1c <ADC_Init+0x1f0>)
 8002a36:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	685a      	ldr	r2, [r3, #4]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	431a      	orrs	r2, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	685a      	ldr	r2, [r3, #4]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a60:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	6859      	ldr	r1, [r3, #4]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	691b      	ldr	r3, [r3, #16]
 8002a6c:	021a      	lsls	r2, r3, #8
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	430a      	orrs	r2, r1
 8002a74:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	685a      	ldr	r2, [r3, #4]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002a84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	6859      	ldr	r1, [r3, #4]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689a      	ldr	r2, [r3, #8]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	430a      	orrs	r2, r1
 8002a96:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	689a      	ldr	r2, [r3, #8]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002aa6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	6899      	ldr	r1, [r3, #8]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	68da      	ldr	r2, [r3, #12]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002abe:	4a58      	ldr	r2, [pc, #352]	; (8002c20 <ADC_Init+0x1f4>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d022      	beq.n	8002b0a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	689a      	ldr	r2, [r3, #8]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ad2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	6899      	ldr	r1, [r3, #8]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	689a      	ldr	r2, [r3, #8]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002af4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	6899      	ldr	r1, [r3, #8]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	430a      	orrs	r2, r1
 8002b06:	609a      	str	r2, [r3, #8]
 8002b08:	e00f      	b.n	8002b2a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	689a      	ldr	r2, [r3, #8]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	689a      	ldr	r2, [r3, #8]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b28:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	689a      	ldr	r2, [r3, #8]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f022 0202 	bic.w	r2, r2, #2
 8002b38:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	6899      	ldr	r1, [r3, #8]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	7e1b      	ldrb	r3, [r3, #24]
 8002b44:	005a      	lsls	r2, r3, #1
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d01b      	beq.n	8002b90 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	685a      	ldr	r2, [r3, #4]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b66:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	685a      	ldr	r2, [r3, #4]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002b76:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	6859      	ldr	r1, [r3, #4]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b82:	3b01      	subs	r3, #1
 8002b84:	035a      	lsls	r2, r3, #13
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	430a      	orrs	r2, r1
 8002b8c:	605a      	str	r2, [r3, #4]
 8002b8e:	e007      	b.n	8002ba0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	685a      	ldr	r2, [r3, #4]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b9e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002bae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	69db      	ldr	r3, [r3, #28]
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	051a      	lsls	r2, r3, #20
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	689a      	ldr	r2, [r3, #8]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002bd4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	6899      	ldr	r1, [r3, #8]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002be2:	025a      	lsls	r2, r3, #9
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	430a      	orrs	r2, r1
 8002bea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	689a      	ldr	r2, [r3, #8]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bfa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	6899      	ldr	r1, [r3, #8]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	029a      	lsls	r2, r3, #10
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	430a      	orrs	r2, r1
 8002c0e:	609a      	str	r2, [r3, #8]
}
 8002c10:	bf00      	nop
 8002c12:	3714      	adds	r7, #20
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr
 8002c1c:	40012300 	.word	0x40012300
 8002c20:	0f000001 	.word	0x0f000001

08002c24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b085      	sub	sp, #20
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f003 0307 	and.w	r3, r3, #7
 8002c32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c34:	4b0c      	ldr	r3, [pc, #48]	; (8002c68 <__NVIC_SetPriorityGrouping+0x44>)
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c3a:	68ba      	ldr	r2, [r7, #8]
 8002c3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c40:	4013      	ands	r3, r2
 8002c42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c56:	4a04      	ldr	r2, [pc, #16]	; (8002c68 <__NVIC_SetPriorityGrouping+0x44>)
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	60d3      	str	r3, [r2, #12]
}
 8002c5c:	bf00      	nop
 8002c5e:	3714      	adds	r7, #20
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr
 8002c68:	e000ed00 	.word	0xe000ed00

08002c6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c70:	4b04      	ldr	r3, [pc, #16]	; (8002c84 <__NVIC_GetPriorityGrouping+0x18>)
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	0a1b      	lsrs	r3, r3, #8
 8002c76:	f003 0307 	and.w	r3, r3, #7
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr
 8002c84:	e000ed00 	.word	0xe000ed00

08002c88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	4603      	mov	r3, r0
 8002c90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	db0b      	blt.n	8002cb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c9a:	79fb      	ldrb	r3, [r7, #7]
 8002c9c:	f003 021f 	and.w	r2, r3, #31
 8002ca0:	4907      	ldr	r1, [pc, #28]	; (8002cc0 <__NVIC_EnableIRQ+0x38>)
 8002ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca6:	095b      	lsrs	r3, r3, #5
 8002ca8:	2001      	movs	r0, #1
 8002caa:	fa00 f202 	lsl.w	r2, r0, r2
 8002cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cb2:	bf00      	nop
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	e000e100 	.word	0xe000e100

08002cc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	4603      	mov	r3, r0
 8002ccc:	6039      	str	r1, [r7, #0]
 8002cce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	db0a      	blt.n	8002cee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	b2da      	uxtb	r2, r3
 8002cdc:	490c      	ldr	r1, [pc, #48]	; (8002d10 <__NVIC_SetPriority+0x4c>)
 8002cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce2:	0112      	lsls	r2, r2, #4
 8002ce4:	b2d2      	uxtb	r2, r2
 8002ce6:	440b      	add	r3, r1
 8002ce8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cec:	e00a      	b.n	8002d04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	b2da      	uxtb	r2, r3
 8002cf2:	4908      	ldr	r1, [pc, #32]	; (8002d14 <__NVIC_SetPriority+0x50>)
 8002cf4:	79fb      	ldrb	r3, [r7, #7]
 8002cf6:	f003 030f 	and.w	r3, r3, #15
 8002cfa:	3b04      	subs	r3, #4
 8002cfc:	0112      	lsls	r2, r2, #4
 8002cfe:	b2d2      	uxtb	r2, r2
 8002d00:	440b      	add	r3, r1
 8002d02:	761a      	strb	r2, [r3, #24]
}
 8002d04:	bf00      	nop
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr
 8002d10:	e000e100 	.word	0xe000e100
 8002d14:	e000ed00 	.word	0xe000ed00

08002d18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b089      	sub	sp, #36	; 0x24
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f003 0307 	and.w	r3, r3, #7
 8002d2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	f1c3 0307 	rsb	r3, r3, #7
 8002d32:	2b04      	cmp	r3, #4
 8002d34:	bf28      	it	cs
 8002d36:	2304      	movcs	r3, #4
 8002d38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	3304      	adds	r3, #4
 8002d3e:	2b06      	cmp	r3, #6
 8002d40:	d902      	bls.n	8002d48 <NVIC_EncodePriority+0x30>
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	3b03      	subs	r3, #3
 8002d46:	e000      	b.n	8002d4a <NVIC_EncodePriority+0x32>
 8002d48:	2300      	movs	r3, #0
 8002d4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	fa02 f303 	lsl.w	r3, r2, r3
 8002d56:	43da      	mvns	r2, r3
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	401a      	ands	r2, r3
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d60:	f04f 31ff 	mov.w	r1, #4294967295
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	fa01 f303 	lsl.w	r3, r1, r3
 8002d6a:	43d9      	mvns	r1, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d70:	4313      	orrs	r3, r2
         );
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3724      	adds	r7, #36	; 0x24
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
	...

08002d80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d90:	d301      	bcc.n	8002d96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d92:	2301      	movs	r3, #1
 8002d94:	e00f      	b.n	8002db6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d96:	4a0a      	ldr	r2, [pc, #40]	; (8002dc0 <SysTick_Config+0x40>)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d9e:	210f      	movs	r1, #15
 8002da0:	f04f 30ff 	mov.w	r0, #4294967295
 8002da4:	f7ff ff8e 	bl	8002cc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002da8:	4b05      	ldr	r3, [pc, #20]	; (8002dc0 <SysTick_Config+0x40>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dae:	4b04      	ldr	r3, [pc, #16]	; (8002dc0 <SysTick_Config+0x40>)
 8002db0:	2207      	movs	r2, #7
 8002db2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3708      	adds	r7, #8
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	e000e010 	.word	0xe000e010

08002dc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f7ff ff29 	bl	8002c24 <__NVIC_SetPriorityGrouping>
}
 8002dd2:	bf00      	nop
 8002dd4:	3708      	adds	r7, #8
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b086      	sub	sp, #24
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	4603      	mov	r3, r0
 8002de2:	60b9      	str	r1, [r7, #8]
 8002de4:	607a      	str	r2, [r7, #4]
 8002de6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002de8:	2300      	movs	r3, #0
 8002dea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002dec:	f7ff ff3e 	bl	8002c6c <__NVIC_GetPriorityGrouping>
 8002df0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	68b9      	ldr	r1, [r7, #8]
 8002df6:	6978      	ldr	r0, [r7, #20]
 8002df8:	f7ff ff8e 	bl	8002d18 <NVIC_EncodePriority>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e02:	4611      	mov	r1, r2
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7ff ff5d 	bl	8002cc4 <__NVIC_SetPriority>
}
 8002e0a:	bf00      	nop
 8002e0c:	3718      	adds	r7, #24
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b082      	sub	sp, #8
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	4603      	mov	r3, r0
 8002e1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7ff ff31 	bl	8002c88 <__NVIC_EnableIRQ>
}
 8002e26:	bf00      	nop
 8002e28:	3708      	adds	r7, #8
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b082      	sub	sp, #8
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f7ff ffa2 	bl	8002d80 <SysTick_Config>
 8002e3c:	4603      	mov	r3, r0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b084      	sub	sp, #16
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e52:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002e54:	f7ff faf8 	bl	8002448 <HAL_GetTick>
 8002e58:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d008      	beq.n	8002e78 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2280      	movs	r2, #128	; 0x80
 8002e6a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e052      	b.n	8002f1e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 0216 	bic.w	r2, r2, #22
 8002e86:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	695a      	ldr	r2, [r3, #20]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e96:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d103      	bne.n	8002ea8 <HAL_DMA_Abort+0x62>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d007      	beq.n	8002eb8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f022 0208 	bic.w	r2, r2, #8
 8002eb6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f022 0201 	bic.w	r2, r2, #1
 8002ec6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ec8:	e013      	b.n	8002ef2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002eca:	f7ff fabd 	bl	8002448 <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	2b05      	cmp	r3, #5
 8002ed6:	d90c      	bls.n	8002ef2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2220      	movs	r2, #32
 8002edc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2203      	movs	r2, #3
 8002ee2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e015      	b.n	8002f1e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0301 	and.w	r3, r3, #1
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d1e4      	bne.n	8002eca <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f04:	223f      	movs	r2, #63	; 0x3f
 8002f06:	409a      	lsls	r2, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3710      	adds	r7, #16
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f26:	b480      	push	{r7}
 8002f28:	b083      	sub	sp, #12
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d004      	beq.n	8002f44 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2280      	movs	r2, #128	; 0x80
 8002f3e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e00c      	b.n	8002f5e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2205      	movs	r2, #5
 8002f48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f022 0201 	bic.w	r2, r2, #1
 8002f5a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
	...

08002f6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b089      	sub	sp, #36	; 0x24
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f76:	2300      	movs	r3, #0
 8002f78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f82:	2300      	movs	r3, #0
 8002f84:	61fb      	str	r3, [r7, #28]
 8002f86:	e159      	b.n	800323c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f88:	2201      	movs	r2, #1
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	697a      	ldr	r2, [r7, #20]
 8002f98:	4013      	ands	r3, r2
 8002f9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f9c:	693a      	ldr	r2, [r7, #16]
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	f040 8148 	bne.w	8003236 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f003 0303 	and.w	r3, r3, #3
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d005      	beq.n	8002fbe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d130      	bne.n	8003020 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	005b      	lsls	r3, r3, #1
 8002fc8:	2203      	movs	r2, #3
 8002fca:	fa02 f303 	lsl.w	r3, r2, r3
 8002fce:	43db      	mvns	r3, r3
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	68da      	ldr	r2, [r3, #12]
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	005b      	lsls	r3, r3, #1
 8002fde:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe2:	69ba      	ldr	r2, [r7, #24]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	69ba      	ldr	r2, [r7, #24]
 8002fec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffc:	43db      	mvns	r3, r3
 8002ffe:	69ba      	ldr	r2, [r7, #24]
 8003000:	4013      	ands	r3, r2
 8003002:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	091b      	lsrs	r3, r3, #4
 800300a:	f003 0201 	and.w	r2, r3, #1
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	fa02 f303 	lsl.w	r3, r2, r3
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	4313      	orrs	r3, r2
 8003018:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f003 0303 	and.w	r3, r3, #3
 8003028:	2b03      	cmp	r3, #3
 800302a:	d017      	beq.n	800305c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	2203      	movs	r2, #3
 8003038:	fa02 f303 	lsl.w	r3, r2, r3
 800303c:	43db      	mvns	r3, r3
 800303e:	69ba      	ldr	r2, [r7, #24]
 8003040:	4013      	ands	r3, r2
 8003042:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	689a      	ldr	r2, [r3, #8]
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	005b      	lsls	r3, r3, #1
 800304c:	fa02 f303 	lsl.w	r3, r2, r3
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	4313      	orrs	r3, r2
 8003054:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f003 0303 	and.w	r3, r3, #3
 8003064:	2b02      	cmp	r3, #2
 8003066:	d123      	bne.n	80030b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	08da      	lsrs	r2, r3, #3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	3208      	adds	r2, #8
 8003070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003074:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	f003 0307 	and.w	r3, r3, #7
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	220f      	movs	r2, #15
 8003080:	fa02 f303 	lsl.w	r3, r2, r3
 8003084:	43db      	mvns	r3, r3
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	4013      	ands	r3, r2
 800308a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	691a      	ldr	r2, [r3, #16]
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	f003 0307 	and.w	r3, r3, #7
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	4313      	orrs	r3, r2
 80030a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	08da      	lsrs	r2, r3, #3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	3208      	adds	r2, #8
 80030aa:	69b9      	ldr	r1, [r7, #24]
 80030ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	005b      	lsls	r3, r3, #1
 80030ba:	2203      	movs	r2, #3
 80030bc:	fa02 f303 	lsl.w	r3, r2, r3
 80030c0:	43db      	mvns	r3, r3
 80030c2:	69ba      	ldr	r2, [r7, #24]
 80030c4:	4013      	ands	r3, r2
 80030c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f003 0203 	and.w	r2, r3, #3
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	69ba      	ldr	r2, [r7, #24]
 80030da:	4313      	orrs	r3, r2
 80030dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f000 80a2 	beq.w	8003236 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030f2:	2300      	movs	r3, #0
 80030f4:	60fb      	str	r3, [r7, #12]
 80030f6:	4b57      	ldr	r3, [pc, #348]	; (8003254 <HAL_GPIO_Init+0x2e8>)
 80030f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030fa:	4a56      	ldr	r2, [pc, #344]	; (8003254 <HAL_GPIO_Init+0x2e8>)
 80030fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003100:	6453      	str	r3, [r2, #68]	; 0x44
 8003102:	4b54      	ldr	r3, [pc, #336]	; (8003254 <HAL_GPIO_Init+0x2e8>)
 8003104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003106:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800310a:	60fb      	str	r3, [r7, #12]
 800310c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800310e:	4a52      	ldr	r2, [pc, #328]	; (8003258 <HAL_GPIO_Init+0x2ec>)
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	089b      	lsrs	r3, r3, #2
 8003114:	3302      	adds	r3, #2
 8003116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800311a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	f003 0303 	and.w	r3, r3, #3
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	220f      	movs	r2, #15
 8003126:	fa02 f303 	lsl.w	r3, r2, r3
 800312a:	43db      	mvns	r3, r3
 800312c:	69ba      	ldr	r2, [r7, #24]
 800312e:	4013      	ands	r3, r2
 8003130:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a49      	ldr	r2, [pc, #292]	; (800325c <HAL_GPIO_Init+0x2f0>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d019      	beq.n	800316e <HAL_GPIO_Init+0x202>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a48      	ldr	r2, [pc, #288]	; (8003260 <HAL_GPIO_Init+0x2f4>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d013      	beq.n	800316a <HAL_GPIO_Init+0x1fe>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a47      	ldr	r2, [pc, #284]	; (8003264 <HAL_GPIO_Init+0x2f8>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d00d      	beq.n	8003166 <HAL_GPIO_Init+0x1fa>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a46      	ldr	r2, [pc, #280]	; (8003268 <HAL_GPIO_Init+0x2fc>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d007      	beq.n	8003162 <HAL_GPIO_Init+0x1f6>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a45      	ldr	r2, [pc, #276]	; (800326c <HAL_GPIO_Init+0x300>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d101      	bne.n	800315e <HAL_GPIO_Init+0x1f2>
 800315a:	2304      	movs	r3, #4
 800315c:	e008      	b.n	8003170 <HAL_GPIO_Init+0x204>
 800315e:	2307      	movs	r3, #7
 8003160:	e006      	b.n	8003170 <HAL_GPIO_Init+0x204>
 8003162:	2303      	movs	r3, #3
 8003164:	e004      	b.n	8003170 <HAL_GPIO_Init+0x204>
 8003166:	2302      	movs	r3, #2
 8003168:	e002      	b.n	8003170 <HAL_GPIO_Init+0x204>
 800316a:	2301      	movs	r3, #1
 800316c:	e000      	b.n	8003170 <HAL_GPIO_Init+0x204>
 800316e:	2300      	movs	r3, #0
 8003170:	69fa      	ldr	r2, [r7, #28]
 8003172:	f002 0203 	and.w	r2, r2, #3
 8003176:	0092      	lsls	r2, r2, #2
 8003178:	4093      	lsls	r3, r2
 800317a:	69ba      	ldr	r2, [r7, #24]
 800317c:	4313      	orrs	r3, r2
 800317e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003180:	4935      	ldr	r1, [pc, #212]	; (8003258 <HAL_GPIO_Init+0x2ec>)
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	089b      	lsrs	r3, r3, #2
 8003186:	3302      	adds	r3, #2
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800318e:	4b38      	ldr	r3, [pc, #224]	; (8003270 <HAL_GPIO_Init+0x304>)
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	43db      	mvns	r3, r3
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	4013      	ands	r3, r2
 800319c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d003      	beq.n	80031b2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80031aa:	69ba      	ldr	r2, [r7, #24]
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031b2:	4a2f      	ldr	r2, [pc, #188]	; (8003270 <HAL_GPIO_Init+0x304>)
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031b8:	4b2d      	ldr	r3, [pc, #180]	; (8003270 <HAL_GPIO_Init+0x304>)
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	43db      	mvns	r3, r3
 80031c2:	69ba      	ldr	r2, [r7, #24]
 80031c4:	4013      	ands	r3, r2
 80031c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d003      	beq.n	80031dc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	4313      	orrs	r3, r2
 80031da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031dc:	4a24      	ldr	r2, [pc, #144]	; (8003270 <HAL_GPIO_Init+0x304>)
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031e2:	4b23      	ldr	r3, [pc, #140]	; (8003270 <HAL_GPIO_Init+0x304>)
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	43db      	mvns	r3, r3
 80031ec:	69ba      	ldr	r2, [r7, #24]
 80031ee:	4013      	ands	r3, r2
 80031f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d003      	beq.n	8003206 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80031fe:	69ba      	ldr	r2, [r7, #24]
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	4313      	orrs	r3, r2
 8003204:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003206:	4a1a      	ldr	r2, [pc, #104]	; (8003270 <HAL_GPIO_Init+0x304>)
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800320c:	4b18      	ldr	r3, [pc, #96]	; (8003270 <HAL_GPIO_Init+0x304>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	43db      	mvns	r3, r3
 8003216:	69ba      	ldr	r2, [r7, #24]
 8003218:	4013      	ands	r3, r2
 800321a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d003      	beq.n	8003230 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003228:	69ba      	ldr	r2, [r7, #24]
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	4313      	orrs	r3, r2
 800322e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003230:	4a0f      	ldr	r2, [pc, #60]	; (8003270 <HAL_GPIO_Init+0x304>)
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	3301      	adds	r3, #1
 800323a:	61fb      	str	r3, [r7, #28]
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	2b0f      	cmp	r3, #15
 8003240:	f67f aea2 	bls.w	8002f88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003244:	bf00      	nop
 8003246:	bf00      	nop
 8003248:	3724      	adds	r7, #36	; 0x24
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	40023800 	.word	0x40023800
 8003258:	40013800 	.word	0x40013800
 800325c:	40020000 	.word	0x40020000
 8003260:	40020400 	.word	0x40020400
 8003264:	40020800 	.word	0x40020800
 8003268:	40020c00 	.word	0x40020c00
 800326c:	40021000 	.word	0x40021000
 8003270:	40013c00 	.word	0x40013c00

08003274 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003274:	b480      	push	{r7}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	460b      	mov	r3, r1
 800327e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	691a      	ldr	r2, [r3, #16]
 8003284:	887b      	ldrh	r3, [r7, #2]
 8003286:	4013      	ands	r3, r2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d002      	beq.n	8003292 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800328c:	2301      	movs	r3, #1
 800328e:	73fb      	strb	r3, [r7, #15]
 8003290:	e001      	b.n	8003296 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003292:	2300      	movs	r3, #0
 8003294:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003296:	7bfb      	ldrb	r3, [r7, #15]
}
 8003298:	4618      	mov	r0, r3
 800329a:	3714      	adds	r7, #20
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	460b      	mov	r3, r1
 80032ae:	807b      	strh	r3, [r7, #2]
 80032b0:	4613      	mov	r3, r2
 80032b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032b4:	787b      	ldrb	r3, [r7, #1]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d003      	beq.n	80032c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032ba:	887a      	ldrh	r2, [r7, #2]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032c0:	e003      	b.n	80032ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032c2:	887b      	ldrh	r3, [r7, #2]
 80032c4:	041a      	lsls	r2, r3, #16
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	619a      	str	r2, [r3, #24]
}
 80032ca:	bf00      	nop
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
	...

080032d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	4603      	mov	r3, r0
 80032e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80032e2:	4b08      	ldr	r3, [pc, #32]	; (8003304 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032e4:	695a      	ldr	r2, [r3, #20]
 80032e6:	88fb      	ldrh	r3, [r7, #6]
 80032e8:	4013      	ands	r3, r2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d006      	beq.n	80032fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80032ee:	4a05      	ldr	r2, [pc, #20]	; (8003304 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032f0:	88fb      	ldrh	r3, [r7, #6]
 80032f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80032f4:	88fb      	ldrh	r3, [r7, #6]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f7fe f968 	bl	80015cc <HAL_GPIO_EXTI_Callback>
  }
}
 80032fc:	bf00      	nop
 80032fe:	3708      	adds	r7, #8
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	40013c00 	.word	0x40013c00

08003308 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b086      	sub	sp, #24
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e267      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	2b00      	cmp	r3, #0
 8003324:	d075      	beq.n	8003412 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003326:	4b88      	ldr	r3, [pc, #544]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f003 030c 	and.w	r3, r3, #12
 800332e:	2b04      	cmp	r3, #4
 8003330:	d00c      	beq.n	800334c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003332:	4b85      	ldr	r3, [pc, #532]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800333a:	2b08      	cmp	r3, #8
 800333c:	d112      	bne.n	8003364 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800333e:	4b82      	ldr	r3, [pc, #520]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003346:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800334a:	d10b      	bne.n	8003364 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800334c:	4b7e      	ldr	r3, [pc, #504]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d05b      	beq.n	8003410 <HAL_RCC_OscConfig+0x108>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d157      	bne.n	8003410 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e242      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800336c:	d106      	bne.n	800337c <HAL_RCC_OscConfig+0x74>
 800336e:	4b76      	ldr	r3, [pc, #472]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a75      	ldr	r2, [pc, #468]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003378:	6013      	str	r3, [r2, #0]
 800337a:	e01d      	b.n	80033b8 <HAL_RCC_OscConfig+0xb0>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003384:	d10c      	bne.n	80033a0 <HAL_RCC_OscConfig+0x98>
 8003386:	4b70      	ldr	r3, [pc, #448]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a6f      	ldr	r2, [pc, #444]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 800338c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003390:	6013      	str	r3, [r2, #0]
 8003392:	4b6d      	ldr	r3, [pc, #436]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a6c      	ldr	r2, [pc, #432]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800339c:	6013      	str	r3, [r2, #0]
 800339e:	e00b      	b.n	80033b8 <HAL_RCC_OscConfig+0xb0>
 80033a0:	4b69      	ldr	r3, [pc, #420]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a68      	ldr	r2, [pc, #416]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 80033a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033aa:	6013      	str	r3, [r2, #0]
 80033ac:	4b66      	ldr	r3, [pc, #408]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a65      	ldr	r2, [pc, #404]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 80033b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d013      	beq.n	80033e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c0:	f7ff f842 	bl	8002448 <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033c6:	e008      	b.n	80033da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033c8:	f7ff f83e 	bl	8002448 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b64      	cmp	r3, #100	; 0x64
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e207      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033da:	4b5b      	ldr	r3, [pc, #364]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d0f0      	beq.n	80033c8 <HAL_RCC_OscConfig+0xc0>
 80033e6:	e014      	b.n	8003412 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e8:	f7ff f82e 	bl	8002448 <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033f0:	f7ff f82a 	bl	8002448 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b64      	cmp	r3, #100	; 0x64
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e1f3      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003402:	4b51      	ldr	r3, [pc, #324]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1f0      	bne.n	80033f0 <HAL_RCC_OscConfig+0xe8>
 800340e:	e000      	b.n	8003412 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003410:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d063      	beq.n	80034e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800341e:	4b4a      	ldr	r3, [pc, #296]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 030c 	and.w	r3, r3, #12
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00b      	beq.n	8003442 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800342a:	4b47      	ldr	r3, [pc, #284]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003432:	2b08      	cmp	r3, #8
 8003434:	d11c      	bne.n	8003470 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003436:	4b44      	ldr	r3, [pc, #272]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d116      	bne.n	8003470 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003442:	4b41      	ldr	r3, [pc, #260]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d005      	beq.n	800345a <HAL_RCC_OscConfig+0x152>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d001      	beq.n	800345a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e1c7      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800345a:	4b3b      	ldr	r3, [pc, #236]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	00db      	lsls	r3, r3, #3
 8003468:	4937      	ldr	r1, [pc, #220]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 800346a:	4313      	orrs	r3, r2
 800346c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800346e:	e03a      	b.n	80034e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d020      	beq.n	80034ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003478:	4b34      	ldr	r3, [pc, #208]	; (800354c <HAL_RCC_OscConfig+0x244>)
 800347a:	2201      	movs	r2, #1
 800347c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800347e:	f7fe ffe3 	bl	8002448 <HAL_GetTick>
 8003482:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003484:	e008      	b.n	8003498 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003486:	f7fe ffdf 	bl	8002448 <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	2b02      	cmp	r3, #2
 8003492:	d901      	bls.n	8003498 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e1a8      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003498:	4b2b      	ldr	r3, [pc, #172]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d0f0      	beq.n	8003486 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034a4:	4b28      	ldr	r3, [pc, #160]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	691b      	ldr	r3, [r3, #16]
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	4925      	ldr	r1, [pc, #148]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	600b      	str	r3, [r1, #0]
 80034b8:	e015      	b.n	80034e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034ba:	4b24      	ldr	r3, [pc, #144]	; (800354c <HAL_RCC_OscConfig+0x244>)
 80034bc:	2200      	movs	r2, #0
 80034be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c0:	f7fe ffc2 	bl	8002448 <HAL_GetTick>
 80034c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034c6:	e008      	b.n	80034da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034c8:	f7fe ffbe 	bl	8002448 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d901      	bls.n	80034da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e187      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034da:	4b1b      	ldr	r3, [pc, #108]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1f0      	bne.n	80034c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0308 	and.w	r3, r3, #8
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d036      	beq.n	8003560 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d016      	beq.n	8003528 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034fa:	4b15      	ldr	r3, [pc, #84]	; (8003550 <HAL_RCC_OscConfig+0x248>)
 80034fc:	2201      	movs	r2, #1
 80034fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003500:	f7fe ffa2 	bl	8002448 <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003506:	e008      	b.n	800351a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003508:	f7fe ff9e 	bl	8002448 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b02      	cmp	r3, #2
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e167      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800351a:	4b0b      	ldr	r3, [pc, #44]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 800351c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d0f0      	beq.n	8003508 <HAL_RCC_OscConfig+0x200>
 8003526:	e01b      	b.n	8003560 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003528:	4b09      	ldr	r3, [pc, #36]	; (8003550 <HAL_RCC_OscConfig+0x248>)
 800352a:	2200      	movs	r2, #0
 800352c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800352e:	f7fe ff8b 	bl	8002448 <HAL_GetTick>
 8003532:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003534:	e00e      	b.n	8003554 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003536:	f7fe ff87 	bl	8002448 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b02      	cmp	r3, #2
 8003542:	d907      	bls.n	8003554 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e150      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
 8003548:	40023800 	.word	0x40023800
 800354c:	42470000 	.word	0x42470000
 8003550:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003554:	4b88      	ldr	r3, [pc, #544]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003556:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d1ea      	bne.n	8003536 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0304 	and.w	r3, r3, #4
 8003568:	2b00      	cmp	r3, #0
 800356a:	f000 8097 	beq.w	800369c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800356e:	2300      	movs	r3, #0
 8003570:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003572:	4b81      	ldr	r3, [pc, #516]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10f      	bne.n	800359e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800357e:	2300      	movs	r3, #0
 8003580:	60bb      	str	r3, [r7, #8]
 8003582:	4b7d      	ldr	r3, [pc, #500]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	4a7c      	ldr	r2, [pc, #496]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800358c:	6413      	str	r3, [r2, #64]	; 0x40
 800358e:	4b7a      	ldr	r3, [pc, #488]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003596:	60bb      	str	r3, [r7, #8]
 8003598:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800359a:	2301      	movs	r3, #1
 800359c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800359e:	4b77      	ldr	r3, [pc, #476]	; (800377c <HAL_RCC_OscConfig+0x474>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d118      	bne.n	80035dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035aa:	4b74      	ldr	r3, [pc, #464]	; (800377c <HAL_RCC_OscConfig+0x474>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a73      	ldr	r2, [pc, #460]	; (800377c <HAL_RCC_OscConfig+0x474>)
 80035b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035b6:	f7fe ff47 	bl	8002448 <HAL_GetTick>
 80035ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035bc:	e008      	b.n	80035d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035be:	f7fe ff43 	bl	8002448 <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d901      	bls.n	80035d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e10c      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d0:	4b6a      	ldr	r3, [pc, #424]	; (800377c <HAL_RCC_OscConfig+0x474>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d0f0      	beq.n	80035be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d106      	bne.n	80035f2 <HAL_RCC_OscConfig+0x2ea>
 80035e4:	4b64      	ldr	r3, [pc, #400]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 80035e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e8:	4a63      	ldr	r2, [pc, #396]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 80035ea:	f043 0301 	orr.w	r3, r3, #1
 80035ee:	6713      	str	r3, [r2, #112]	; 0x70
 80035f0:	e01c      	b.n	800362c <HAL_RCC_OscConfig+0x324>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	2b05      	cmp	r3, #5
 80035f8:	d10c      	bne.n	8003614 <HAL_RCC_OscConfig+0x30c>
 80035fa:	4b5f      	ldr	r3, [pc, #380]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 80035fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035fe:	4a5e      	ldr	r2, [pc, #376]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003600:	f043 0304 	orr.w	r3, r3, #4
 8003604:	6713      	str	r3, [r2, #112]	; 0x70
 8003606:	4b5c      	ldr	r3, [pc, #368]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800360a:	4a5b      	ldr	r2, [pc, #364]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 800360c:	f043 0301 	orr.w	r3, r3, #1
 8003610:	6713      	str	r3, [r2, #112]	; 0x70
 8003612:	e00b      	b.n	800362c <HAL_RCC_OscConfig+0x324>
 8003614:	4b58      	ldr	r3, [pc, #352]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003618:	4a57      	ldr	r2, [pc, #348]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 800361a:	f023 0301 	bic.w	r3, r3, #1
 800361e:	6713      	str	r3, [r2, #112]	; 0x70
 8003620:	4b55      	ldr	r3, [pc, #340]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003624:	4a54      	ldr	r2, [pc, #336]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003626:	f023 0304 	bic.w	r3, r3, #4
 800362a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d015      	beq.n	8003660 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003634:	f7fe ff08 	bl	8002448 <HAL_GetTick>
 8003638:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800363a:	e00a      	b.n	8003652 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800363c:	f7fe ff04 	bl	8002448 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	f241 3288 	movw	r2, #5000	; 0x1388
 800364a:	4293      	cmp	r3, r2
 800364c:	d901      	bls.n	8003652 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e0cb      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003652:	4b49      	ldr	r3, [pc, #292]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d0ee      	beq.n	800363c <HAL_RCC_OscConfig+0x334>
 800365e:	e014      	b.n	800368a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003660:	f7fe fef2 	bl	8002448 <HAL_GetTick>
 8003664:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003666:	e00a      	b.n	800367e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003668:	f7fe feee 	bl	8002448 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	f241 3288 	movw	r2, #5000	; 0x1388
 8003676:	4293      	cmp	r3, r2
 8003678:	d901      	bls.n	800367e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e0b5      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800367e:	4b3e      	ldr	r3, [pc, #248]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1ee      	bne.n	8003668 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800368a:	7dfb      	ldrb	r3, [r7, #23]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d105      	bne.n	800369c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003690:	4b39      	ldr	r3, [pc, #228]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003694:	4a38      	ldr	r2, [pc, #224]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003696:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800369a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f000 80a1 	beq.w	80037e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036a6:	4b34      	ldr	r3, [pc, #208]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f003 030c 	and.w	r3, r3, #12
 80036ae:	2b08      	cmp	r3, #8
 80036b0:	d05c      	beq.n	800376c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d141      	bne.n	800373e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ba:	4b31      	ldr	r3, [pc, #196]	; (8003780 <HAL_RCC_OscConfig+0x478>)
 80036bc:	2200      	movs	r2, #0
 80036be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c0:	f7fe fec2 	bl	8002448 <HAL_GetTick>
 80036c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036c6:	e008      	b.n	80036da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036c8:	f7fe febe 	bl	8002448 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d901      	bls.n	80036da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e087      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036da:	4b27      	ldr	r3, [pc, #156]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1f0      	bne.n	80036c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	69da      	ldr	r2, [r3, #28]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a1b      	ldr	r3, [r3, #32]
 80036ee:	431a      	orrs	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f4:	019b      	lsls	r3, r3, #6
 80036f6:	431a      	orrs	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036fc:	085b      	lsrs	r3, r3, #1
 80036fe:	3b01      	subs	r3, #1
 8003700:	041b      	lsls	r3, r3, #16
 8003702:	431a      	orrs	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003708:	061b      	lsls	r3, r3, #24
 800370a:	491b      	ldr	r1, [pc, #108]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 800370c:	4313      	orrs	r3, r2
 800370e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003710:	4b1b      	ldr	r3, [pc, #108]	; (8003780 <HAL_RCC_OscConfig+0x478>)
 8003712:	2201      	movs	r2, #1
 8003714:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003716:	f7fe fe97 	bl	8002448 <HAL_GetTick>
 800371a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800371c:	e008      	b.n	8003730 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800371e:	f7fe fe93 	bl	8002448 <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	2b02      	cmp	r3, #2
 800372a:	d901      	bls.n	8003730 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e05c      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003730:	4b11      	ldr	r3, [pc, #68]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d0f0      	beq.n	800371e <HAL_RCC_OscConfig+0x416>
 800373c:	e054      	b.n	80037e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800373e:	4b10      	ldr	r3, [pc, #64]	; (8003780 <HAL_RCC_OscConfig+0x478>)
 8003740:	2200      	movs	r2, #0
 8003742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003744:	f7fe fe80 	bl	8002448 <HAL_GetTick>
 8003748:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800374a:	e008      	b.n	800375e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800374c:	f7fe fe7c 	bl	8002448 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b02      	cmp	r3, #2
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e045      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800375e:	4b06      	ldr	r3, [pc, #24]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1f0      	bne.n	800374c <HAL_RCC_OscConfig+0x444>
 800376a:	e03d      	b.n	80037e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	2b01      	cmp	r3, #1
 8003772:	d107      	bne.n	8003784 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e038      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
 8003778:	40023800 	.word	0x40023800
 800377c:	40007000 	.word	0x40007000
 8003780:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003784:	4b1b      	ldr	r3, [pc, #108]	; (80037f4 <HAL_RCC_OscConfig+0x4ec>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d028      	beq.n	80037e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800379c:	429a      	cmp	r2, r3
 800379e:	d121      	bne.n	80037e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d11a      	bne.n	80037e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037b4:	4013      	ands	r3, r2
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037bc:	4293      	cmp	r3, r2
 80037be:	d111      	bne.n	80037e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ca:	085b      	lsrs	r3, r3, #1
 80037cc:	3b01      	subs	r3, #1
 80037ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d107      	bne.n	80037e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d001      	beq.n	80037e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e000      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3718      	adds	r7, #24
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	40023800 	.word	0x40023800

080037f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d101      	bne.n	800380c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e0cc      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800380c:	4b68      	ldr	r3, [pc, #416]	; (80039b0 <HAL_RCC_ClockConfig+0x1b8>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0307 	and.w	r3, r3, #7
 8003814:	683a      	ldr	r2, [r7, #0]
 8003816:	429a      	cmp	r2, r3
 8003818:	d90c      	bls.n	8003834 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800381a:	4b65      	ldr	r3, [pc, #404]	; (80039b0 <HAL_RCC_ClockConfig+0x1b8>)
 800381c:	683a      	ldr	r2, [r7, #0]
 800381e:	b2d2      	uxtb	r2, r2
 8003820:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003822:	4b63      	ldr	r3, [pc, #396]	; (80039b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0307 	and.w	r3, r3, #7
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	429a      	cmp	r2, r3
 800382e:	d001      	beq.n	8003834 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e0b8      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0302 	and.w	r3, r3, #2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d020      	beq.n	8003882 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0304 	and.w	r3, r3, #4
 8003848:	2b00      	cmp	r3, #0
 800384a:	d005      	beq.n	8003858 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800384c:	4b59      	ldr	r3, [pc, #356]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	4a58      	ldr	r2, [pc, #352]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003852:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003856:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0308 	and.w	r3, r3, #8
 8003860:	2b00      	cmp	r3, #0
 8003862:	d005      	beq.n	8003870 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003864:	4b53      	ldr	r3, [pc, #332]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	4a52      	ldr	r2, [pc, #328]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800386a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800386e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003870:	4b50      	ldr	r3, [pc, #320]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	494d      	ldr	r1, [pc, #308]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800387e:	4313      	orrs	r3, r2
 8003880:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	2b00      	cmp	r3, #0
 800388c:	d044      	beq.n	8003918 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	2b01      	cmp	r3, #1
 8003894:	d107      	bne.n	80038a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003896:	4b47      	ldr	r3, [pc, #284]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d119      	bne.n	80038d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e07f      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d003      	beq.n	80038b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038b2:	2b03      	cmp	r3, #3
 80038b4:	d107      	bne.n	80038c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038b6:	4b3f      	ldr	r3, [pc, #252]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d109      	bne.n	80038d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e06f      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038c6:	4b3b      	ldr	r3, [pc, #236]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e067      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038d6:	4b37      	ldr	r3, [pc, #220]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f023 0203 	bic.w	r2, r3, #3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	4934      	ldr	r1, [pc, #208]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038e8:	f7fe fdae 	bl	8002448 <HAL_GetTick>
 80038ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ee:	e00a      	b.n	8003906 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038f0:	f7fe fdaa 	bl	8002448 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80038fe:	4293      	cmp	r3, r2
 8003900:	d901      	bls.n	8003906 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e04f      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003906:	4b2b      	ldr	r3, [pc, #172]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f003 020c 	and.w	r2, r3, #12
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	429a      	cmp	r2, r3
 8003916:	d1eb      	bne.n	80038f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003918:	4b25      	ldr	r3, [pc, #148]	; (80039b0 <HAL_RCC_ClockConfig+0x1b8>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0307 	and.w	r3, r3, #7
 8003920:	683a      	ldr	r2, [r7, #0]
 8003922:	429a      	cmp	r2, r3
 8003924:	d20c      	bcs.n	8003940 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003926:	4b22      	ldr	r3, [pc, #136]	; (80039b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003928:	683a      	ldr	r2, [r7, #0]
 800392a:	b2d2      	uxtb	r2, r2
 800392c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800392e:	4b20      	ldr	r3, [pc, #128]	; (80039b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0307 	and.w	r3, r3, #7
 8003936:	683a      	ldr	r2, [r7, #0]
 8003938:	429a      	cmp	r2, r3
 800393a:	d001      	beq.n	8003940 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e032      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0304 	and.w	r3, r3, #4
 8003948:	2b00      	cmp	r3, #0
 800394a:	d008      	beq.n	800395e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800394c:	4b19      	ldr	r3, [pc, #100]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	4916      	ldr	r1, [pc, #88]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800395a:	4313      	orrs	r3, r2
 800395c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0308 	and.w	r3, r3, #8
 8003966:	2b00      	cmp	r3, #0
 8003968:	d009      	beq.n	800397e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800396a:	4b12      	ldr	r3, [pc, #72]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	00db      	lsls	r3, r3, #3
 8003978:	490e      	ldr	r1, [pc, #56]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800397a:	4313      	orrs	r3, r2
 800397c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800397e:	f000 f821 	bl	80039c4 <HAL_RCC_GetSysClockFreq>
 8003982:	4602      	mov	r2, r0
 8003984:	4b0b      	ldr	r3, [pc, #44]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	091b      	lsrs	r3, r3, #4
 800398a:	f003 030f 	and.w	r3, r3, #15
 800398e:	490a      	ldr	r1, [pc, #40]	; (80039b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003990:	5ccb      	ldrb	r3, [r1, r3]
 8003992:	fa22 f303 	lsr.w	r3, r2, r3
 8003996:	4a09      	ldr	r2, [pc, #36]	; (80039bc <HAL_RCC_ClockConfig+0x1c4>)
 8003998:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800399a:	4b09      	ldr	r3, [pc, #36]	; (80039c0 <HAL_RCC_ClockConfig+0x1c8>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4618      	mov	r0, r3
 80039a0:	f7fe fd0e 	bl	80023c0 <HAL_InitTick>

  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3710      	adds	r7, #16
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	40023c00 	.word	0x40023c00
 80039b4:	40023800 	.word	0x40023800
 80039b8:	08005fe4 	.word	0x08005fe4
 80039bc:	20000000 	.word	0x20000000
 80039c0:	20000004 	.word	0x20000004

080039c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039c8:	b094      	sub	sp, #80	; 0x50
 80039ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80039cc:	2300      	movs	r3, #0
 80039ce:	647b      	str	r3, [r7, #68]	; 0x44
 80039d0:	2300      	movs	r3, #0
 80039d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039d4:	2300      	movs	r3, #0
 80039d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80039d8:	2300      	movs	r3, #0
 80039da:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039dc:	4b79      	ldr	r3, [pc, #484]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0x200>)
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f003 030c 	and.w	r3, r3, #12
 80039e4:	2b08      	cmp	r3, #8
 80039e6:	d00d      	beq.n	8003a04 <HAL_RCC_GetSysClockFreq+0x40>
 80039e8:	2b08      	cmp	r3, #8
 80039ea:	f200 80e1 	bhi.w	8003bb0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d002      	beq.n	80039f8 <HAL_RCC_GetSysClockFreq+0x34>
 80039f2:	2b04      	cmp	r3, #4
 80039f4:	d003      	beq.n	80039fe <HAL_RCC_GetSysClockFreq+0x3a>
 80039f6:	e0db      	b.n	8003bb0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039f8:	4b73      	ldr	r3, [pc, #460]	; (8003bc8 <HAL_RCC_GetSysClockFreq+0x204>)
 80039fa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80039fc:	e0db      	b.n	8003bb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039fe:	4b73      	ldr	r3, [pc, #460]	; (8003bcc <HAL_RCC_GetSysClockFreq+0x208>)
 8003a00:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a02:	e0d8      	b.n	8003bb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a04:	4b6f      	ldr	r3, [pc, #444]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a0c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a0e:	4b6d      	ldr	r3, [pc, #436]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d063      	beq.n	8003ae2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a1a:	4b6a      	ldr	r3, [pc, #424]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	099b      	lsrs	r3, r3, #6
 8003a20:	2200      	movs	r2, #0
 8003a22:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a24:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a2c:	633b      	str	r3, [r7, #48]	; 0x30
 8003a2e:	2300      	movs	r3, #0
 8003a30:	637b      	str	r3, [r7, #52]	; 0x34
 8003a32:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003a36:	4622      	mov	r2, r4
 8003a38:	462b      	mov	r3, r5
 8003a3a:	f04f 0000 	mov.w	r0, #0
 8003a3e:	f04f 0100 	mov.w	r1, #0
 8003a42:	0159      	lsls	r1, r3, #5
 8003a44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a48:	0150      	lsls	r0, r2, #5
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	4621      	mov	r1, r4
 8003a50:	1a51      	subs	r1, r2, r1
 8003a52:	6139      	str	r1, [r7, #16]
 8003a54:	4629      	mov	r1, r5
 8003a56:	eb63 0301 	sbc.w	r3, r3, r1
 8003a5a:	617b      	str	r3, [r7, #20]
 8003a5c:	f04f 0200 	mov.w	r2, #0
 8003a60:	f04f 0300 	mov.w	r3, #0
 8003a64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a68:	4659      	mov	r1, fp
 8003a6a:	018b      	lsls	r3, r1, #6
 8003a6c:	4651      	mov	r1, sl
 8003a6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a72:	4651      	mov	r1, sl
 8003a74:	018a      	lsls	r2, r1, #6
 8003a76:	4651      	mov	r1, sl
 8003a78:	ebb2 0801 	subs.w	r8, r2, r1
 8003a7c:	4659      	mov	r1, fp
 8003a7e:	eb63 0901 	sbc.w	r9, r3, r1
 8003a82:	f04f 0200 	mov.w	r2, #0
 8003a86:	f04f 0300 	mov.w	r3, #0
 8003a8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a96:	4690      	mov	r8, r2
 8003a98:	4699      	mov	r9, r3
 8003a9a:	4623      	mov	r3, r4
 8003a9c:	eb18 0303 	adds.w	r3, r8, r3
 8003aa0:	60bb      	str	r3, [r7, #8]
 8003aa2:	462b      	mov	r3, r5
 8003aa4:	eb49 0303 	adc.w	r3, r9, r3
 8003aa8:	60fb      	str	r3, [r7, #12]
 8003aaa:	f04f 0200 	mov.w	r2, #0
 8003aae:	f04f 0300 	mov.w	r3, #0
 8003ab2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003ab6:	4629      	mov	r1, r5
 8003ab8:	024b      	lsls	r3, r1, #9
 8003aba:	4621      	mov	r1, r4
 8003abc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ac0:	4621      	mov	r1, r4
 8003ac2:	024a      	lsls	r2, r1, #9
 8003ac4:	4610      	mov	r0, r2
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003aca:	2200      	movs	r2, #0
 8003acc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ace:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ad0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ad4:	f7fc ff32 	bl	800093c <__aeabi_uldivmod>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	460b      	mov	r3, r1
 8003adc:	4613      	mov	r3, r2
 8003ade:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ae0:	e058      	b.n	8003b94 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ae2:	4b38      	ldr	r3, [pc, #224]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	099b      	lsrs	r3, r3, #6
 8003ae8:	2200      	movs	r2, #0
 8003aea:	4618      	mov	r0, r3
 8003aec:	4611      	mov	r1, r2
 8003aee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003af2:	623b      	str	r3, [r7, #32]
 8003af4:	2300      	movs	r3, #0
 8003af6:	627b      	str	r3, [r7, #36]	; 0x24
 8003af8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003afc:	4642      	mov	r2, r8
 8003afe:	464b      	mov	r3, r9
 8003b00:	f04f 0000 	mov.w	r0, #0
 8003b04:	f04f 0100 	mov.w	r1, #0
 8003b08:	0159      	lsls	r1, r3, #5
 8003b0a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b0e:	0150      	lsls	r0, r2, #5
 8003b10:	4602      	mov	r2, r0
 8003b12:	460b      	mov	r3, r1
 8003b14:	4641      	mov	r1, r8
 8003b16:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b1a:	4649      	mov	r1, r9
 8003b1c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b20:	f04f 0200 	mov.w	r2, #0
 8003b24:	f04f 0300 	mov.w	r3, #0
 8003b28:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b2c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b30:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b34:	ebb2 040a 	subs.w	r4, r2, sl
 8003b38:	eb63 050b 	sbc.w	r5, r3, fp
 8003b3c:	f04f 0200 	mov.w	r2, #0
 8003b40:	f04f 0300 	mov.w	r3, #0
 8003b44:	00eb      	lsls	r3, r5, #3
 8003b46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b4a:	00e2      	lsls	r2, r4, #3
 8003b4c:	4614      	mov	r4, r2
 8003b4e:	461d      	mov	r5, r3
 8003b50:	4643      	mov	r3, r8
 8003b52:	18e3      	adds	r3, r4, r3
 8003b54:	603b      	str	r3, [r7, #0]
 8003b56:	464b      	mov	r3, r9
 8003b58:	eb45 0303 	adc.w	r3, r5, r3
 8003b5c:	607b      	str	r3, [r7, #4]
 8003b5e:	f04f 0200 	mov.w	r2, #0
 8003b62:	f04f 0300 	mov.w	r3, #0
 8003b66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b6a:	4629      	mov	r1, r5
 8003b6c:	028b      	lsls	r3, r1, #10
 8003b6e:	4621      	mov	r1, r4
 8003b70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b74:	4621      	mov	r1, r4
 8003b76:	028a      	lsls	r2, r1, #10
 8003b78:	4610      	mov	r0, r2
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b7e:	2200      	movs	r2, #0
 8003b80:	61bb      	str	r3, [r7, #24]
 8003b82:	61fa      	str	r2, [r7, #28]
 8003b84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b88:	f7fc fed8 	bl	800093c <__aeabi_uldivmod>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	460b      	mov	r3, r1
 8003b90:	4613      	mov	r3, r2
 8003b92:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b94:	4b0b      	ldr	r3, [pc, #44]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	0c1b      	lsrs	r3, r3, #16
 8003b9a:	f003 0303 	and.w	r3, r3, #3
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	005b      	lsls	r3, r3, #1
 8003ba2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003ba4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ba6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bae:	e002      	b.n	8003bb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bb0:	4b05      	ldr	r3, [pc, #20]	; (8003bc8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003bb2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3750      	adds	r7, #80	; 0x50
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bc2:	bf00      	nop
 8003bc4:	40023800 	.word	0x40023800
 8003bc8:	00f42400 	.word	0x00f42400
 8003bcc:	007a1200 	.word	0x007a1200

08003bd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bd4:	4b03      	ldr	r3, [pc, #12]	; (8003be4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	20000000 	.word	0x20000000

08003be8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003bec:	f7ff fff0 	bl	8003bd0 <HAL_RCC_GetHCLKFreq>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	4b05      	ldr	r3, [pc, #20]	; (8003c08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	0a9b      	lsrs	r3, r3, #10
 8003bf8:	f003 0307 	and.w	r3, r3, #7
 8003bfc:	4903      	ldr	r1, [pc, #12]	; (8003c0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bfe:	5ccb      	ldrb	r3, [r1, r3]
 8003c00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	40023800 	.word	0x40023800
 8003c0c:	08005ff4 	.word	0x08005ff4

08003c10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c14:	f7ff ffdc 	bl	8003bd0 <HAL_RCC_GetHCLKFreq>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	4b05      	ldr	r3, [pc, #20]	; (8003c30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	0b5b      	lsrs	r3, r3, #13
 8003c20:	f003 0307 	and.w	r3, r3, #7
 8003c24:	4903      	ldr	r1, [pc, #12]	; (8003c34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c26:	5ccb      	ldrb	r3, [r1, r3]
 8003c28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	40023800 	.word	0x40023800
 8003c34:	08005ff4 	.word	0x08005ff4

08003c38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d101      	bne.n	8003c4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e041      	b.n	8003cce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d106      	bne.n	8003c64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f7fe fa14 	bl	800208c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2202      	movs	r2, #2
 8003c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	3304      	adds	r3, #4
 8003c74:	4619      	mov	r1, r3
 8003c76:	4610      	mov	r0, r2
 8003c78:	f000 fae2 	bl	8004240 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3708      	adds	r7, #8
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
	...

08003cd8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d001      	beq.n	8003cf0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e03c      	b.n	8003d6a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2202      	movs	r2, #2
 8003cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a1e      	ldr	r2, [pc, #120]	; (8003d78 <HAL_TIM_Base_Start+0xa0>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d018      	beq.n	8003d34 <HAL_TIM_Base_Start+0x5c>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d0a:	d013      	beq.n	8003d34 <HAL_TIM_Base_Start+0x5c>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a1a      	ldr	r2, [pc, #104]	; (8003d7c <HAL_TIM_Base_Start+0xa4>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d00e      	beq.n	8003d34 <HAL_TIM_Base_Start+0x5c>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a19      	ldr	r2, [pc, #100]	; (8003d80 <HAL_TIM_Base_Start+0xa8>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d009      	beq.n	8003d34 <HAL_TIM_Base_Start+0x5c>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a17      	ldr	r2, [pc, #92]	; (8003d84 <HAL_TIM_Base_Start+0xac>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d004      	beq.n	8003d34 <HAL_TIM_Base_Start+0x5c>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a16      	ldr	r2, [pc, #88]	; (8003d88 <HAL_TIM_Base_Start+0xb0>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d111      	bne.n	8003d58 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f003 0307 	and.w	r3, r3, #7
 8003d3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2b06      	cmp	r3, #6
 8003d44:	d010      	beq.n	8003d68 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f042 0201 	orr.w	r2, r2, #1
 8003d54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d56:	e007      	b.n	8003d68 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f042 0201 	orr.w	r2, r2, #1
 8003d66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3714      	adds	r7, #20
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr
 8003d76:	bf00      	nop
 8003d78:	40010000 	.word	0x40010000
 8003d7c:	40000400 	.word	0x40000400
 8003d80:	40000800 	.word	0x40000800
 8003d84:	40000c00 	.word	0x40000c00
 8003d88:	40014000 	.word	0x40014000

08003d8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b085      	sub	sp, #20
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d001      	beq.n	8003da4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e044      	b.n	8003e2e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2202      	movs	r2, #2
 8003da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	68da      	ldr	r2, [r3, #12]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f042 0201 	orr.w	r2, r2, #1
 8003dba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a1e      	ldr	r2, [pc, #120]	; (8003e3c <HAL_TIM_Base_Start_IT+0xb0>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d018      	beq.n	8003df8 <HAL_TIM_Base_Start_IT+0x6c>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dce:	d013      	beq.n	8003df8 <HAL_TIM_Base_Start_IT+0x6c>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a1a      	ldr	r2, [pc, #104]	; (8003e40 <HAL_TIM_Base_Start_IT+0xb4>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d00e      	beq.n	8003df8 <HAL_TIM_Base_Start_IT+0x6c>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a19      	ldr	r2, [pc, #100]	; (8003e44 <HAL_TIM_Base_Start_IT+0xb8>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d009      	beq.n	8003df8 <HAL_TIM_Base_Start_IT+0x6c>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a17      	ldr	r2, [pc, #92]	; (8003e48 <HAL_TIM_Base_Start_IT+0xbc>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d004      	beq.n	8003df8 <HAL_TIM_Base_Start_IT+0x6c>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a16      	ldr	r2, [pc, #88]	; (8003e4c <HAL_TIM_Base_Start_IT+0xc0>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d111      	bne.n	8003e1c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f003 0307 	and.w	r3, r3, #7
 8003e02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2b06      	cmp	r3, #6
 8003e08:	d010      	beq.n	8003e2c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f042 0201 	orr.w	r2, r2, #1
 8003e18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e1a:	e007      	b.n	8003e2c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f042 0201 	orr.w	r2, r2, #1
 8003e2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3714      	adds	r7, #20
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	40010000 	.word	0x40010000
 8003e40:	40000400 	.word	0x40000400
 8003e44:	40000800 	.word	0x40000800
 8003e48:	40000c00 	.word	0x40000c00
 8003e4c:	40014000 	.word	0x40014000

08003e50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	f003 0302 	and.w	r3, r3, #2
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d122      	bne.n	8003eac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	f003 0302 	and.w	r3, r3, #2
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d11b      	bne.n	8003eac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f06f 0202 	mvn.w	r2, #2
 8003e7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2201      	movs	r2, #1
 8003e82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	699b      	ldr	r3, [r3, #24]
 8003e8a:	f003 0303 	and.w	r3, r3, #3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d003      	beq.n	8003e9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 f9b5 	bl	8004202 <HAL_TIM_IC_CaptureCallback>
 8003e98:	e005      	b.n	8003ea6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 f9a7 	bl	80041ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f000 f9b8 	bl	8004216 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	f003 0304 	and.w	r3, r3, #4
 8003eb6:	2b04      	cmp	r3, #4
 8003eb8:	d122      	bne.n	8003f00 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	f003 0304 	and.w	r3, r3, #4
 8003ec4:	2b04      	cmp	r3, #4
 8003ec6:	d11b      	bne.n	8003f00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f06f 0204 	mvn.w	r2, #4
 8003ed0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2202      	movs	r2, #2
 8003ed6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d003      	beq.n	8003eee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 f98b 	bl	8004202 <HAL_TIM_IC_CaptureCallback>
 8003eec:	e005      	b.n	8003efa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 f97d 	bl	80041ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f000 f98e 	bl	8004216 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	f003 0308 	and.w	r3, r3, #8
 8003f0a:	2b08      	cmp	r3, #8
 8003f0c:	d122      	bne.n	8003f54 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	f003 0308 	and.w	r3, r3, #8
 8003f18:	2b08      	cmp	r3, #8
 8003f1a:	d11b      	bne.n	8003f54 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f06f 0208 	mvn.w	r2, #8
 8003f24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2204      	movs	r2, #4
 8003f2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	69db      	ldr	r3, [r3, #28]
 8003f32:	f003 0303 	and.w	r3, r3, #3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d003      	beq.n	8003f42 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 f961 	bl	8004202 <HAL_TIM_IC_CaptureCallback>
 8003f40:	e005      	b.n	8003f4e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 f953 	bl	80041ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f000 f964 	bl	8004216 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	f003 0310 	and.w	r3, r3, #16
 8003f5e:	2b10      	cmp	r3, #16
 8003f60:	d122      	bne.n	8003fa8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	f003 0310 	and.w	r3, r3, #16
 8003f6c:	2b10      	cmp	r3, #16
 8003f6e:	d11b      	bne.n	8003fa8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f06f 0210 	mvn.w	r2, #16
 8003f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2208      	movs	r2, #8
 8003f7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	69db      	ldr	r3, [r3, #28]
 8003f86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d003      	beq.n	8003f96 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 f937 	bl	8004202 <HAL_TIM_IC_CaptureCallback>
 8003f94:	e005      	b.n	8003fa2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 f929 	bl	80041ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f000 f93a 	bl	8004216 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	f003 0301 	and.w	r3, r3, #1
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d10e      	bne.n	8003fd4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	f003 0301 	and.w	r3, r3, #1
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d107      	bne.n	8003fd4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f06f 0201 	mvn.w	r2, #1
 8003fcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f7fd fb12 	bl	80015f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fde:	2b80      	cmp	r3, #128	; 0x80
 8003fe0:	d10e      	bne.n	8004000 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fec:	2b80      	cmp	r3, #128	; 0x80
 8003fee:	d107      	bne.n	8004000 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ff8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 fab2 	bl	8004564 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800400a:	2b40      	cmp	r3, #64	; 0x40
 800400c:	d10e      	bne.n	800402c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004018:	2b40      	cmp	r3, #64	; 0x40
 800401a:	d107      	bne.n	800402c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 f8ff 	bl	800422a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	f003 0320 	and.w	r3, r3, #32
 8004036:	2b20      	cmp	r3, #32
 8004038:	d10e      	bne.n	8004058 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	f003 0320 	and.w	r3, r3, #32
 8004044:	2b20      	cmp	r3, #32
 8004046:	d107      	bne.n	8004058 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f06f 0220 	mvn.w	r2, #32
 8004050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 fa7c 	bl	8004550 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004058:	bf00      	nop
 800405a:	3708      	adds	r7, #8
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800406a:	2300      	movs	r3, #0
 800406c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004074:	2b01      	cmp	r3, #1
 8004076:	d101      	bne.n	800407c <HAL_TIM_ConfigClockSource+0x1c>
 8004078:	2302      	movs	r3, #2
 800407a:	e0b4      	b.n	80041e6 <HAL_TIM_ConfigClockSource+0x186>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2202      	movs	r2, #2
 8004088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800409a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68ba      	ldr	r2, [r7, #8]
 80040aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040b4:	d03e      	beq.n	8004134 <HAL_TIM_ConfigClockSource+0xd4>
 80040b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040ba:	f200 8087 	bhi.w	80041cc <HAL_TIM_ConfigClockSource+0x16c>
 80040be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040c2:	f000 8086 	beq.w	80041d2 <HAL_TIM_ConfigClockSource+0x172>
 80040c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ca:	d87f      	bhi.n	80041cc <HAL_TIM_ConfigClockSource+0x16c>
 80040cc:	2b70      	cmp	r3, #112	; 0x70
 80040ce:	d01a      	beq.n	8004106 <HAL_TIM_ConfigClockSource+0xa6>
 80040d0:	2b70      	cmp	r3, #112	; 0x70
 80040d2:	d87b      	bhi.n	80041cc <HAL_TIM_ConfigClockSource+0x16c>
 80040d4:	2b60      	cmp	r3, #96	; 0x60
 80040d6:	d050      	beq.n	800417a <HAL_TIM_ConfigClockSource+0x11a>
 80040d8:	2b60      	cmp	r3, #96	; 0x60
 80040da:	d877      	bhi.n	80041cc <HAL_TIM_ConfigClockSource+0x16c>
 80040dc:	2b50      	cmp	r3, #80	; 0x50
 80040de:	d03c      	beq.n	800415a <HAL_TIM_ConfigClockSource+0xfa>
 80040e0:	2b50      	cmp	r3, #80	; 0x50
 80040e2:	d873      	bhi.n	80041cc <HAL_TIM_ConfigClockSource+0x16c>
 80040e4:	2b40      	cmp	r3, #64	; 0x40
 80040e6:	d058      	beq.n	800419a <HAL_TIM_ConfigClockSource+0x13a>
 80040e8:	2b40      	cmp	r3, #64	; 0x40
 80040ea:	d86f      	bhi.n	80041cc <HAL_TIM_ConfigClockSource+0x16c>
 80040ec:	2b30      	cmp	r3, #48	; 0x30
 80040ee:	d064      	beq.n	80041ba <HAL_TIM_ConfigClockSource+0x15a>
 80040f0:	2b30      	cmp	r3, #48	; 0x30
 80040f2:	d86b      	bhi.n	80041cc <HAL_TIM_ConfigClockSource+0x16c>
 80040f4:	2b20      	cmp	r3, #32
 80040f6:	d060      	beq.n	80041ba <HAL_TIM_ConfigClockSource+0x15a>
 80040f8:	2b20      	cmp	r3, #32
 80040fa:	d867      	bhi.n	80041cc <HAL_TIM_ConfigClockSource+0x16c>
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d05c      	beq.n	80041ba <HAL_TIM_ConfigClockSource+0x15a>
 8004100:	2b10      	cmp	r3, #16
 8004102:	d05a      	beq.n	80041ba <HAL_TIM_ConfigClockSource+0x15a>
 8004104:	e062      	b.n	80041cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6818      	ldr	r0, [r3, #0]
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	6899      	ldr	r1, [r3, #8]
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	685a      	ldr	r2, [r3, #4]
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	f000 f98d 	bl	8004434 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004128:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	68ba      	ldr	r2, [r7, #8]
 8004130:	609a      	str	r2, [r3, #8]
      break;
 8004132:	e04f      	b.n	80041d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6818      	ldr	r0, [r3, #0]
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	6899      	ldr	r1, [r3, #8]
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	685a      	ldr	r2, [r3, #4]
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	f000 f976 	bl	8004434 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	689a      	ldr	r2, [r3, #8]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004156:	609a      	str	r2, [r3, #8]
      break;
 8004158:	e03c      	b.n	80041d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6818      	ldr	r0, [r3, #0]
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	6859      	ldr	r1, [r3, #4]
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	461a      	mov	r2, r3
 8004168:	f000 f8ea 	bl	8004340 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2150      	movs	r1, #80	; 0x50
 8004172:	4618      	mov	r0, r3
 8004174:	f000 f943 	bl	80043fe <TIM_ITRx_SetConfig>
      break;
 8004178:	e02c      	b.n	80041d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6818      	ldr	r0, [r3, #0]
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	6859      	ldr	r1, [r3, #4]
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	461a      	mov	r2, r3
 8004188:	f000 f909 	bl	800439e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2160      	movs	r1, #96	; 0x60
 8004192:	4618      	mov	r0, r3
 8004194:	f000 f933 	bl	80043fe <TIM_ITRx_SetConfig>
      break;
 8004198:	e01c      	b.n	80041d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6818      	ldr	r0, [r3, #0]
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	6859      	ldr	r1, [r3, #4]
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	461a      	mov	r2, r3
 80041a8:	f000 f8ca 	bl	8004340 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	2140      	movs	r1, #64	; 0x40
 80041b2:	4618      	mov	r0, r3
 80041b4:	f000 f923 	bl	80043fe <TIM_ITRx_SetConfig>
      break;
 80041b8:	e00c      	b.n	80041d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4619      	mov	r1, r3
 80041c4:	4610      	mov	r0, r2
 80041c6:	f000 f91a 	bl	80043fe <TIM_ITRx_SetConfig>
      break;
 80041ca:	e003      	b.n	80041d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	73fb      	strb	r3, [r7, #15]
      break;
 80041d0:	e000      	b.n	80041d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80041d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80041e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3710      	adds	r7, #16
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}

080041ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041ee:	b480      	push	{r7}
 80041f0:	b083      	sub	sp, #12
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041f6:	bf00      	nop
 80041f8:	370c      	adds	r7, #12
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr

08004202 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004202:	b480      	push	{r7}
 8004204:	b083      	sub	sp, #12
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800420a:	bf00      	nop
 800420c:	370c      	adds	r7, #12
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr

08004216 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004216:	b480      	push	{r7}
 8004218:	b083      	sub	sp, #12
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800421e:	bf00      	nop
 8004220:	370c      	adds	r7, #12
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr

0800422a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800422a:	b480      	push	{r7}
 800422c:	b083      	sub	sp, #12
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004232:	bf00      	nop
 8004234:	370c      	adds	r7, #12
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
	...

08004240 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004240:	b480      	push	{r7}
 8004242:	b085      	sub	sp, #20
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4a34      	ldr	r2, [pc, #208]	; (8004324 <TIM_Base_SetConfig+0xe4>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d00f      	beq.n	8004278 <TIM_Base_SetConfig+0x38>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800425e:	d00b      	beq.n	8004278 <TIM_Base_SetConfig+0x38>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a31      	ldr	r2, [pc, #196]	; (8004328 <TIM_Base_SetConfig+0xe8>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d007      	beq.n	8004278 <TIM_Base_SetConfig+0x38>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4a30      	ldr	r2, [pc, #192]	; (800432c <TIM_Base_SetConfig+0xec>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d003      	beq.n	8004278 <TIM_Base_SetConfig+0x38>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4a2f      	ldr	r2, [pc, #188]	; (8004330 <TIM_Base_SetConfig+0xf0>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d108      	bne.n	800428a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800427e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	4313      	orrs	r3, r2
 8004288:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a25      	ldr	r2, [pc, #148]	; (8004324 <TIM_Base_SetConfig+0xe4>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d01b      	beq.n	80042ca <TIM_Base_SetConfig+0x8a>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004298:	d017      	beq.n	80042ca <TIM_Base_SetConfig+0x8a>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a22      	ldr	r2, [pc, #136]	; (8004328 <TIM_Base_SetConfig+0xe8>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d013      	beq.n	80042ca <TIM_Base_SetConfig+0x8a>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a21      	ldr	r2, [pc, #132]	; (800432c <TIM_Base_SetConfig+0xec>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d00f      	beq.n	80042ca <TIM_Base_SetConfig+0x8a>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a20      	ldr	r2, [pc, #128]	; (8004330 <TIM_Base_SetConfig+0xf0>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d00b      	beq.n	80042ca <TIM_Base_SetConfig+0x8a>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a1f      	ldr	r2, [pc, #124]	; (8004334 <TIM_Base_SetConfig+0xf4>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d007      	beq.n	80042ca <TIM_Base_SetConfig+0x8a>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a1e      	ldr	r2, [pc, #120]	; (8004338 <TIM_Base_SetConfig+0xf8>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d003      	beq.n	80042ca <TIM_Base_SetConfig+0x8a>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a1d      	ldr	r2, [pc, #116]	; (800433c <TIM_Base_SetConfig+0xfc>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d108      	bne.n	80042dc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	4313      	orrs	r3, r2
 80042da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	695b      	ldr	r3, [r3, #20]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	689a      	ldr	r2, [r3, #8]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4a08      	ldr	r2, [pc, #32]	; (8004324 <TIM_Base_SetConfig+0xe4>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d103      	bne.n	8004310 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	691a      	ldr	r2, [r3, #16]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	615a      	str	r2, [r3, #20]
}
 8004316:	bf00      	nop
 8004318:	3714      	adds	r7, #20
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	40010000 	.word	0x40010000
 8004328:	40000400 	.word	0x40000400
 800432c:	40000800 	.word	0x40000800
 8004330:	40000c00 	.word	0x40000c00
 8004334:	40014000 	.word	0x40014000
 8004338:	40014400 	.word	0x40014400
 800433c:	40014800 	.word	0x40014800

08004340 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004340:	b480      	push	{r7}
 8004342:	b087      	sub	sp, #28
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6a1b      	ldr	r3, [r3, #32]
 8004350:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6a1b      	ldr	r3, [r3, #32]
 8004356:	f023 0201 	bic.w	r2, r3, #1
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800436a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	011b      	lsls	r3, r3, #4
 8004370:	693a      	ldr	r2, [r7, #16]
 8004372:	4313      	orrs	r3, r2
 8004374:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	f023 030a 	bic.w	r3, r3, #10
 800437c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800437e:	697a      	ldr	r2, [r7, #20]
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	4313      	orrs	r3, r2
 8004384:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	693a      	ldr	r2, [r7, #16]
 800438a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	697a      	ldr	r2, [r7, #20]
 8004390:	621a      	str	r2, [r3, #32]
}
 8004392:	bf00      	nop
 8004394:	371c      	adds	r7, #28
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr

0800439e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800439e:	b480      	push	{r7}
 80043a0:	b087      	sub	sp, #28
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	60f8      	str	r0, [r7, #12]
 80043a6:	60b9      	str	r1, [r7, #8]
 80043a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6a1b      	ldr	r3, [r3, #32]
 80043ae:	f023 0210 	bic.w	r2, r3, #16
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6a1b      	ldr	r3, [r3, #32]
 80043c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	031b      	lsls	r3, r3, #12
 80043ce:	697a      	ldr	r2, [r7, #20]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80043da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	011b      	lsls	r3, r3, #4
 80043e0:	693a      	ldr	r2, [r7, #16]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	693a      	ldr	r2, [r7, #16]
 80043f0:	621a      	str	r2, [r3, #32]
}
 80043f2:	bf00      	nop
 80043f4:	371c      	adds	r7, #28
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr

080043fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043fe:	b480      	push	{r7}
 8004400:	b085      	sub	sp, #20
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
 8004406:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004414:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004416:	683a      	ldr	r2, [r7, #0]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	4313      	orrs	r3, r2
 800441c:	f043 0307 	orr.w	r3, r3, #7
 8004420:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	68fa      	ldr	r2, [r7, #12]
 8004426:	609a      	str	r2, [r3, #8]
}
 8004428:	bf00      	nop
 800442a:	3714      	adds	r7, #20
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004434:	b480      	push	{r7}
 8004436:	b087      	sub	sp, #28
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	607a      	str	r2, [r7, #4]
 8004440:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800444e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	021a      	lsls	r2, r3, #8
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	431a      	orrs	r2, r3
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	4313      	orrs	r3, r2
 800445c:	697a      	ldr	r2, [r7, #20]
 800445e:	4313      	orrs	r3, r2
 8004460:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	697a      	ldr	r2, [r7, #20]
 8004466:	609a      	str	r2, [r3, #8]
}
 8004468:	bf00      	nop
 800446a:	371c      	adds	r7, #28
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004474:	b480      	push	{r7}
 8004476:	b085      	sub	sp, #20
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004484:	2b01      	cmp	r3, #1
 8004486:	d101      	bne.n	800448c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004488:	2302      	movs	r3, #2
 800448a:	e050      	b.n	800452e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2202      	movs	r2, #2
 8004498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	68fa      	ldr	r2, [r7, #12]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	68fa      	ldr	r2, [r7, #12]
 80044c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a1c      	ldr	r2, [pc, #112]	; (800453c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d018      	beq.n	8004502 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044d8:	d013      	beq.n	8004502 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a18      	ldr	r2, [pc, #96]	; (8004540 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d00e      	beq.n	8004502 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a16      	ldr	r2, [pc, #88]	; (8004544 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d009      	beq.n	8004502 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a15      	ldr	r2, [pc, #84]	; (8004548 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d004      	beq.n	8004502 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a13      	ldr	r2, [pc, #76]	; (800454c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d10c      	bne.n	800451c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004508:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	68ba      	ldr	r2, [r7, #8]
 8004510:	4313      	orrs	r3, r2
 8004512:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68ba      	ldr	r2, [r7, #8]
 800451a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3714      	adds	r7, #20
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop
 800453c:	40010000 	.word	0x40010000
 8004540:	40000400 	.word	0x40000400
 8004544:	40000800 	.word	0x40000800
 8004548:	40000c00 	.word	0x40000c00
 800454c:	40014000 	.word	0x40014000

08004550 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004558:	bf00      	nop
 800455a:	370c      	adds	r7, #12
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800456c:	bf00      	nop
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b082      	sub	sp, #8
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d101      	bne.n	800458a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e03f      	b.n	800460a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004590:	b2db      	uxtb	r3, r3
 8004592:	2b00      	cmp	r3, #0
 8004594:	d106      	bne.n	80045a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f7fd fdb0 	bl	8002104 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2224      	movs	r2, #36	; 0x24
 80045a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68da      	ldr	r2, [r3, #12]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f000 fddf 	bl	8005180 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	691a      	ldr	r2, [r3, #16]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	695a      	ldr	r2, [r3, #20]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	68da      	ldr	r2, [r3, #12]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2220      	movs	r2, #32
 80045fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2220      	movs	r2, #32
 8004604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3708      	adds	r7, #8
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}

08004612 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004612:	b580      	push	{r7, lr}
 8004614:	b08a      	sub	sp, #40	; 0x28
 8004616:	af02      	add	r7, sp, #8
 8004618:	60f8      	str	r0, [r7, #12]
 800461a:	60b9      	str	r1, [r7, #8]
 800461c:	603b      	str	r3, [r7, #0]
 800461e:	4613      	mov	r3, r2
 8004620:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004622:	2300      	movs	r3, #0
 8004624:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800462c:	b2db      	uxtb	r3, r3
 800462e:	2b20      	cmp	r3, #32
 8004630:	d17c      	bne.n	800472c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d002      	beq.n	800463e <HAL_UART_Transmit+0x2c>
 8004638:	88fb      	ldrh	r3, [r7, #6]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d101      	bne.n	8004642 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e075      	b.n	800472e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004648:	2b01      	cmp	r3, #1
 800464a:	d101      	bne.n	8004650 <HAL_UART_Transmit+0x3e>
 800464c:	2302      	movs	r3, #2
 800464e:	e06e      	b.n	800472e <HAL_UART_Transmit+0x11c>
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2200      	movs	r2, #0
 800465c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2221      	movs	r2, #33	; 0x21
 8004662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004666:	f7fd feef 	bl	8002448 <HAL_GetTick>
 800466a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	88fa      	ldrh	r2, [r7, #6]
 8004670:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	88fa      	ldrh	r2, [r7, #6]
 8004676:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004680:	d108      	bne.n	8004694 <HAL_UART_Transmit+0x82>
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d104      	bne.n	8004694 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800468a:	2300      	movs	r3, #0
 800468c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	61bb      	str	r3, [r7, #24]
 8004692:	e003      	b.n	800469c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004698:	2300      	movs	r3, #0
 800469a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80046a4:	e02a      	b.n	80046fc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	9300      	str	r3, [sp, #0]
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	2200      	movs	r2, #0
 80046ae:	2180      	movs	r1, #128	; 0x80
 80046b0:	68f8      	ldr	r0, [r7, #12]
 80046b2:	f000 fb1f 	bl	8004cf4 <UART_WaitOnFlagUntilTimeout>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d001      	beq.n	80046c0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	e036      	b.n	800472e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d10b      	bne.n	80046de <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	881b      	ldrh	r3, [r3, #0]
 80046ca:	461a      	mov	r2, r3
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	3302      	adds	r3, #2
 80046da:	61bb      	str	r3, [r7, #24]
 80046dc:	e007      	b.n	80046ee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	781a      	ldrb	r2, [r3, #0]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	3301      	adds	r3, #1
 80046ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	3b01      	subs	r3, #1
 80046f6:	b29a      	uxth	r2, r3
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004700:	b29b      	uxth	r3, r3
 8004702:	2b00      	cmp	r3, #0
 8004704:	d1cf      	bne.n	80046a6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	9300      	str	r3, [sp, #0]
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	2200      	movs	r2, #0
 800470e:	2140      	movs	r1, #64	; 0x40
 8004710:	68f8      	ldr	r0, [r7, #12]
 8004712:	f000 faef 	bl	8004cf4 <UART_WaitOnFlagUntilTimeout>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d001      	beq.n	8004720 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e006      	b.n	800472e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2220      	movs	r2, #32
 8004724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004728:	2300      	movs	r3, #0
 800472a:	e000      	b.n	800472e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800472c:	2302      	movs	r3, #2
  }
}
 800472e:	4618      	mov	r0, r3
 8004730:	3720      	adds	r7, #32
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}

08004736 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004736:	b580      	push	{r7, lr}
 8004738:	b084      	sub	sp, #16
 800473a:	af00      	add	r7, sp, #0
 800473c:	60f8      	str	r0, [r7, #12]
 800473e:	60b9      	str	r1, [r7, #8]
 8004740:	4613      	mov	r3, r2
 8004742:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800474a:	b2db      	uxtb	r3, r3
 800474c:	2b20      	cmp	r3, #32
 800474e:	d11d      	bne.n	800478c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d002      	beq.n	800475c <HAL_UART_Receive_IT+0x26>
 8004756:	88fb      	ldrh	r3, [r7, #6]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d101      	bne.n	8004760 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e016      	b.n	800478e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004766:	2b01      	cmp	r3, #1
 8004768:	d101      	bne.n	800476e <HAL_UART_Receive_IT+0x38>
 800476a:	2302      	movs	r3, #2
 800476c:	e00f      	b.n	800478e <HAL_UART_Receive_IT+0x58>
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2201      	movs	r2, #1
 8004772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2200      	movs	r2, #0
 800477a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800477c:	88fb      	ldrh	r3, [r7, #6]
 800477e:	461a      	mov	r2, r3
 8004780:	68b9      	ldr	r1, [r7, #8]
 8004782:	68f8      	ldr	r0, [r7, #12]
 8004784:	f000 fb24 	bl	8004dd0 <UART_Start_Receive_IT>
 8004788:	4603      	mov	r3, r0
 800478a:	e000      	b.n	800478e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800478c:	2302      	movs	r3, #2
  }
}
 800478e:	4618      	mov	r0, r3
 8004790:	3710      	adds	r7, #16
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
	...

08004798 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b0ba      	sub	sp, #232	; 0xe8
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	695b      	ldr	r3, [r3, #20]
 80047ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80047be:	2300      	movs	r3, #0
 80047c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80047c4:	2300      	movs	r3, #0
 80047c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80047ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047ce:	f003 030f 	and.w	r3, r3, #15
 80047d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80047d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d10f      	bne.n	80047fe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80047de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047e2:	f003 0320 	and.w	r3, r3, #32
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d009      	beq.n	80047fe <HAL_UART_IRQHandler+0x66>
 80047ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047ee:	f003 0320 	and.w	r3, r3, #32
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d003      	beq.n	80047fe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 fc07 	bl	800500a <UART_Receive_IT>
      return;
 80047fc:	e256      	b.n	8004cac <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80047fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004802:	2b00      	cmp	r3, #0
 8004804:	f000 80de 	beq.w	80049c4 <HAL_UART_IRQHandler+0x22c>
 8004808:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800480c:	f003 0301 	and.w	r3, r3, #1
 8004810:	2b00      	cmp	r3, #0
 8004812:	d106      	bne.n	8004822 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004814:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004818:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800481c:	2b00      	cmp	r3, #0
 800481e:	f000 80d1 	beq.w	80049c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004826:	f003 0301 	and.w	r3, r3, #1
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00b      	beq.n	8004846 <HAL_UART_IRQHandler+0xae>
 800482e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004836:	2b00      	cmp	r3, #0
 8004838:	d005      	beq.n	8004846 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483e:	f043 0201 	orr.w	r2, r3, #1
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800484a:	f003 0304 	and.w	r3, r3, #4
 800484e:	2b00      	cmp	r3, #0
 8004850:	d00b      	beq.n	800486a <HAL_UART_IRQHandler+0xd2>
 8004852:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004856:	f003 0301 	and.w	r3, r3, #1
 800485a:	2b00      	cmp	r3, #0
 800485c:	d005      	beq.n	800486a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004862:	f043 0202 	orr.w	r2, r3, #2
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800486a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800486e:	f003 0302 	and.w	r3, r3, #2
 8004872:	2b00      	cmp	r3, #0
 8004874:	d00b      	beq.n	800488e <HAL_UART_IRQHandler+0xf6>
 8004876:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800487a:	f003 0301 	and.w	r3, r3, #1
 800487e:	2b00      	cmp	r3, #0
 8004880:	d005      	beq.n	800488e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004886:	f043 0204 	orr.w	r2, r3, #4
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800488e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004892:	f003 0308 	and.w	r3, r3, #8
 8004896:	2b00      	cmp	r3, #0
 8004898:	d011      	beq.n	80048be <HAL_UART_IRQHandler+0x126>
 800489a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800489e:	f003 0320 	and.w	r3, r3, #32
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d105      	bne.n	80048b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80048a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048aa:	f003 0301 	and.w	r3, r3, #1
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d005      	beq.n	80048be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b6:	f043 0208 	orr.w	r2, r3, #8
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	f000 81ed 	beq.w	8004ca2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80048c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048cc:	f003 0320 	and.w	r3, r3, #32
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d008      	beq.n	80048e6 <HAL_UART_IRQHandler+0x14e>
 80048d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048d8:	f003 0320 	and.w	r3, r3, #32
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d002      	beq.n	80048e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f000 fb92 	bl	800500a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	695b      	ldr	r3, [r3, #20]
 80048ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048f0:	2b40      	cmp	r3, #64	; 0x40
 80048f2:	bf0c      	ite	eq
 80048f4:	2301      	moveq	r3, #1
 80048f6:	2300      	movne	r3, #0
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004902:	f003 0308 	and.w	r3, r3, #8
 8004906:	2b00      	cmp	r3, #0
 8004908:	d103      	bne.n	8004912 <HAL_UART_IRQHandler+0x17a>
 800490a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800490e:	2b00      	cmp	r3, #0
 8004910:	d04f      	beq.n	80049b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 fa9a 	bl	8004e4c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	695b      	ldr	r3, [r3, #20]
 800491e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004922:	2b40      	cmp	r3, #64	; 0x40
 8004924:	d141      	bne.n	80049aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	3314      	adds	r3, #20
 800492c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004930:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004934:	e853 3f00 	ldrex	r3, [r3]
 8004938:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800493c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004940:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004944:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	3314      	adds	r3, #20
 800494e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004952:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004956:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800495a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800495e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004962:	e841 2300 	strex	r3, r2, [r1]
 8004966:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800496a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d1d9      	bne.n	8004926 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004976:	2b00      	cmp	r3, #0
 8004978:	d013      	beq.n	80049a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800497e:	4a7d      	ldr	r2, [pc, #500]	; (8004b74 <HAL_UART_IRQHandler+0x3dc>)
 8004980:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004986:	4618      	mov	r0, r3
 8004988:	f7fe facd 	bl	8002f26 <HAL_DMA_Abort_IT>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d016      	beq.n	80049c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004996:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800499c:	4610      	mov	r0, r2
 800499e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049a0:	e00e      	b.n	80049c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 f990 	bl	8004cc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049a8:	e00a      	b.n	80049c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 f98c 	bl	8004cc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049b0:	e006      	b.n	80049c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 f988 	bl	8004cc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80049be:	e170      	b.n	8004ca2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049c0:	bf00      	nop
    return;
 80049c2:	e16e      	b.n	8004ca2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	f040 814a 	bne.w	8004c62 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80049ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049d2:	f003 0310 	and.w	r3, r3, #16
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	f000 8143 	beq.w	8004c62 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80049dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049e0:	f003 0310 	and.w	r3, r3, #16
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f000 813c 	beq.w	8004c62 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80049ea:	2300      	movs	r3, #0
 80049ec:	60bb      	str	r3, [r7, #8]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	60bb      	str	r3, [r7, #8]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	60bb      	str	r3, [r7, #8]
 80049fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	695b      	ldr	r3, [r3, #20]
 8004a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a0a:	2b40      	cmp	r3, #64	; 0x40
 8004a0c:	f040 80b4 	bne.w	8004b78 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004a1c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	f000 8140 	beq.w	8004ca6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004a2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	f080 8139 	bcs.w	8004ca6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004a3a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a40:	69db      	ldr	r3, [r3, #28]
 8004a42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a46:	f000 8088 	beq.w	8004b5a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	330c      	adds	r3, #12
 8004a50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a54:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a58:	e853 3f00 	ldrex	r3, [r3]
 8004a5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004a60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	330c      	adds	r3, #12
 8004a72:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004a76:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004a7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a7e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004a82:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004a86:	e841 2300 	strex	r3, r2, [r1]
 8004a8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004a8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d1d9      	bne.n	8004a4a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	3314      	adds	r3, #20
 8004a9c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004aa0:	e853 3f00 	ldrex	r3, [r3]
 8004aa4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004aa6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004aa8:	f023 0301 	bic.w	r3, r3, #1
 8004aac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	3314      	adds	r3, #20
 8004ab6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004aba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004abe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004ac2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004ac6:	e841 2300 	strex	r3, r2, [r1]
 8004aca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004acc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d1e1      	bne.n	8004a96 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	3314      	adds	r3, #20
 8004ad8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ada:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004adc:	e853 3f00 	ldrex	r3, [r3]
 8004ae0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004ae2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ae4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ae8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	3314      	adds	r3, #20
 8004af2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004af6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004af8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004afa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004afc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004afe:	e841 2300 	strex	r3, r2, [r1]
 8004b02:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004b04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1e3      	bne.n	8004ad2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2220      	movs	r2, #32
 8004b0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	330c      	adds	r3, #12
 8004b1e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b22:	e853 3f00 	ldrex	r3, [r3]
 8004b26:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004b28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b2a:	f023 0310 	bic.w	r3, r3, #16
 8004b2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	330c      	adds	r3, #12
 8004b38:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004b3c:	65ba      	str	r2, [r7, #88]	; 0x58
 8004b3e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b40:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004b42:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b44:	e841 2300 	strex	r3, r2, [r1]
 8004b48:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004b4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d1e3      	bne.n	8004b18 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b54:	4618      	mov	r0, r3
 8004b56:	f7fe f976 	bl	8002e46 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	4619      	mov	r1, r3
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 f8b6 	bl	8004cdc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b70:	e099      	b.n	8004ca6 <HAL_UART_IRQHandler+0x50e>
 8004b72:	bf00      	nop
 8004b74:	08004f13 	.word	0x08004f13
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	1ad3      	subs	r3, r2, r3
 8004b84:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	f000 808b 	beq.w	8004caa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004b94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	f000 8086 	beq.w	8004caa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	330c      	adds	r3, #12
 8004ba4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ba8:	e853 3f00 	ldrex	r3, [r3]
 8004bac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bb0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004bb4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	330c      	adds	r3, #12
 8004bbe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004bc2:	647a      	str	r2, [r7, #68]	; 0x44
 8004bc4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004bc8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004bca:	e841 2300 	strex	r3, r2, [r1]
 8004bce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004bd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d1e3      	bne.n	8004b9e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	3314      	adds	r3, #20
 8004bdc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be0:	e853 3f00 	ldrex	r3, [r3]
 8004be4:	623b      	str	r3, [r7, #32]
   return(result);
 8004be6:	6a3b      	ldr	r3, [r7, #32]
 8004be8:	f023 0301 	bic.w	r3, r3, #1
 8004bec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	3314      	adds	r3, #20
 8004bf6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004bfa:	633a      	str	r2, [r7, #48]	; 0x30
 8004bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bfe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c02:	e841 2300 	strex	r3, r2, [r1]
 8004c06:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d1e3      	bne.n	8004bd6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2220      	movs	r2, #32
 8004c12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	330c      	adds	r3, #12
 8004c22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	e853 3f00 	ldrex	r3, [r3]
 8004c2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f023 0310 	bic.w	r3, r3, #16
 8004c32:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	330c      	adds	r3, #12
 8004c3c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004c40:	61fa      	str	r2, [r7, #28]
 8004c42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c44:	69b9      	ldr	r1, [r7, #24]
 8004c46:	69fa      	ldr	r2, [r7, #28]
 8004c48:	e841 2300 	strex	r3, r2, [r1]
 8004c4c:	617b      	str	r3, [r7, #20]
   return(result);
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d1e3      	bne.n	8004c1c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004c54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c58:	4619      	mov	r1, r3
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 f83e 	bl	8004cdc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c60:	e023      	b.n	8004caa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d009      	beq.n	8004c82 <HAL_UART_IRQHandler+0x4ea>
 8004c6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d003      	beq.n	8004c82 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f000 f95d 	bl	8004f3a <UART_Transmit_IT>
    return;
 8004c80:	e014      	b.n	8004cac <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004c82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00e      	beq.n	8004cac <HAL_UART_IRQHandler+0x514>
 8004c8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d008      	beq.n	8004cac <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f000 f99d 	bl	8004fda <UART_EndTransmit_IT>
    return;
 8004ca0:	e004      	b.n	8004cac <HAL_UART_IRQHandler+0x514>
    return;
 8004ca2:	bf00      	nop
 8004ca4:	e002      	b.n	8004cac <HAL_UART_IRQHandler+0x514>
      return;
 8004ca6:	bf00      	nop
 8004ca8:	e000      	b.n	8004cac <HAL_UART_IRQHandler+0x514>
      return;
 8004caa:	bf00      	nop
  }
}
 8004cac:	37e8      	adds	r7, #232	; 0xe8
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop

08004cb4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004cbc:	bf00      	nop
 8004cbe:	370c      	adds	r7, #12
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr

08004cc8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004cd0:	bf00      	nop
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	460b      	mov	r3, r1
 8004ce6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004ce8:	bf00      	nop
 8004cea:	370c      	adds	r7, #12
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr

08004cf4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b090      	sub	sp, #64	; 0x40
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	60b9      	str	r1, [r7, #8]
 8004cfe:	603b      	str	r3, [r7, #0]
 8004d00:	4613      	mov	r3, r2
 8004d02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d04:	e050      	b.n	8004da8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d0c:	d04c      	beq.n	8004da8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004d0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d007      	beq.n	8004d24 <UART_WaitOnFlagUntilTimeout+0x30>
 8004d14:	f7fd fb98 	bl	8002448 <HAL_GetTick>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d241      	bcs.n	8004da8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	330c      	adds	r3, #12
 8004d2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d2e:	e853 3f00 	ldrex	r3, [r3]
 8004d32:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d36:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	330c      	adds	r3, #12
 8004d42:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d44:	637a      	str	r2, [r7, #52]	; 0x34
 8004d46:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d48:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d4c:	e841 2300 	strex	r3, r2, [r1]
 8004d50:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d1e5      	bne.n	8004d24 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	3314      	adds	r3, #20
 8004d5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	e853 3f00 	ldrex	r3, [r3]
 8004d66:	613b      	str	r3, [r7, #16]
   return(result);
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	f023 0301 	bic.w	r3, r3, #1
 8004d6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	3314      	adds	r3, #20
 8004d76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d78:	623a      	str	r2, [r7, #32]
 8004d7a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d7c:	69f9      	ldr	r1, [r7, #28]
 8004d7e:	6a3a      	ldr	r2, [r7, #32]
 8004d80:	e841 2300 	strex	r3, r2, [r1]
 8004d84:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d1e5      	bne.n	8004d58 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2220      	movs	r2, #32
 8004d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2220      	movs	r2, #32
 8004d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	e00f      	b.n	8004dc8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	4013      	ands	r3, r2
 8004db2:	68ba      	ldr	r2, [r7, #8]
 8004db4:	429a      	cmp	r2, r3
 8004db6:	bf0c      	ite	eq
 8004db8:	2301      	moveq	r3, #1
 8004dba:	2300      	movne	r3, #0
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	79fb      	ldrb	r3, [r7, #7]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d09f      	beq.n	8004d06 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004dc6:	2300      	movs	r3, #0
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3740      	adds	r7, #64	; 0x40
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b085      	sub	sp, #20
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	60b9      	str	r1, [r7, #8]
 8004dda:	4613      	mov	r3, r2
 8004ddc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	68ba      	ldr	r2, [r7, #8]
 8004de2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	88fa      	ldrh	r2, [r7, #6]
 8004de8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	88fa      	ldrh	r2, [r7, #6]
 8004dee:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2200      	movs	r2, #0
 8004df4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2222      	movs	r2, #34	; 0x22
 8004dfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d007      	beq.n	8004e1e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68da      	ldr	r2, [r3, #12]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e1c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	695a      	ldr	r2, [r3, #20]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f042 0201 	orr.w	r2, r2, #1
 8004e2c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	68da      	ldr	r2, [r3, #12]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f042 0220 	orr.w	r2, r2, #32
 8004e3c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004e3e:	2300      	movs	r3, #0
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3714      	adds	r7, #20
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr

08004e4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b095      	sub	sp, #84	; 0x54
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	330c      	adds	r3, #12
 8004e5a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e5e:	e853 3f00 	ldrex	r3, [r3]
 8004e62:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e66:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	330c      	adds	r3, #12
 8004e72:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e74:	643a      	str	r2, [r7, #64]	; 0x40
 8004e76:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e78:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004e7a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004e7c:	e841 2300 	strex	r3, r2, [r1]
 8004e80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d1e5      	bne.n	8004e54 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	3314      	adds	r3, #20
 8004e8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e90:	6a3b      	ldr	r3, [r7, #32]
 8004e92:	e853 3f00 	ldrex	r3, [r3]
 8004e96:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	f023 0301 	bic.w	r3, r3, #1
 8004e9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	3314      	adds	r3, #20
 8004ea6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ea8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004eaa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004eae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004eb0:	e841 2300 	strex	r3, r2, [r1]
 8004eb4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d1e5      	bne.n	8004e88 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d119      	bne.n	8004ef8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	330c      	adds	r3, #12
 8004eca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	e853 3f00 	ldrex	r3, [r3]
 8004ed2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	f023 0310 	bic.w	r3, r3, #16
 8004eda:	647b      	str	r3, [r7, #68]	; 0x44
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	330c      	adds	r3, #12
 8004ee2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ee4:	61ba      	str	r2, [r7, #24]
 8004ee6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee8:	6979      	ldr	r1, [r7, #20]
 8004eea:	69ba      	ldr	r2, [r7, #24]
 8004eec:	e841 2300 	strex	r3, r2, [r1]
 8004ef0:	613b      	str	r3, [r7, #16]
   return(result);
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d1e5      	bne.n	8004ec4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2220      	movs	r2, #32
 8004efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004f06:	bf00      	nop
 8004f08:	3754      	adds	r7, #84	; 0x54
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr

08004f12 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f12:	b580      	push	{r7, lr}
 8004f14:	b084      	sub	sp, #16
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f1e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2200      	movs	r2, #0
 8004f24:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f2c:	68f8      	ldr	r0, [r7, #12]
 8004f2e:	f7ff fecb 	bl	8004cc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f32:	bf00      	nop
 8004f34:	3710      	adds	r7, #16
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}

08004f3a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004f3a:	b480      	push	{r7}
 8004f3c:	b085      	sub	sp, #20
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	2b21      	cmp	r3, #33	; 0x21
 8004f4c:	d13e      	bne.n	8004fcc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f56:	d114      	bne.n	8004f82 <UART_Transmit_IT+0x48>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	691b      	ldr	r3, [r3, #16]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d110      	bne.n	8004f82 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a1b      	ldr	r3, [r3, #32]
 8004f64:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	881b      	ldrh	r3, [r3, #0]
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f74:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a1b      	ldr	r3, [r3, #32]
 8004f7a:	1c9a      	adds	r2, r3, #2
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	621a      	str	r2, [r3, #32]
 8004f80:	e008      	b.n	8004f94 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a1b      	ldr	r3, [r3, #32]
 8004f86:	1c59      	adds	r1, r3, #1
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	6211      	str	r1, [r2, #32]
 8004f8c:	781a      	ldrb	r2, [r3, #0]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	3b01      	subs	r3, #1
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	4619      	mov	r1, r3
 8004fa2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d10f      	bne.n	8004fc8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68da      	ldr	r2, [r3, #12]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004fb6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	68da      	ldr	r2, [r3, #12]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fc6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	e000      	b.n	8004fce <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004fcc:	2302      	movs	r3, #2
  }
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3714      	adds	r7, #20
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr

08004fda <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004fda:	b580      	push	{r7, lr}
 8004fdc:	b082      	sub	sp, #8
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68da      	ldr	r2, [r3, #12]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ff0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2220      	movs	r2, #32
 8004ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f7ff fe5a 	bl	8004cb4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	3708      	adds	r7, #8
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}

0800500a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800500a:	b580      	push	{r7, lr}
 800500c:	b08c      	sub	sp, #48	; 0x30
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005018:	b2db      	uxtb	r3, r3
 800501a:	2b22      	cmp	r3, #34	; 0x22
 800501c:	f040 80ab 	bne.w	8005176 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005028:	d117      	bne.n	800505a <UART_Receive_IT+0x50>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	691b      	ldr	r3, [r3, #16]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d113      	bne.n	800505a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005032:	2300      	movs	r3, #0
 8005034:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800503a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	b29b      	uxth	r3, r3
 8005044:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005048:	b29a      	uxth	r2, r3
 800504a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800504c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005052:	1c9a      	adds	r2, r3, #2
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	629a      	str	r2, [r3, #40]	; 0x28
 8005058:	e026      	b.n	80050a8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800505e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005060:	2300      	movs	r3, #0
 8005062:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800506c:	d007      	beq.n	800507e <UART_Receive_IT+0x74>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d10a      	bne.n	800508c <UART_Receive_IT+0x82>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d106      	bne.n	800508c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	b2da      	uxtb	r2, r3
 8005086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005088:	701a      	strb	r2, [r3, #0]
 800508a:	e008      	b.n	800509e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	b2db      	uxtb	r3, r3
 8005094:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005098:	b2da      	uxtb	r2, r3
 800509a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800509c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050a2:	1c5a      	adds	r2, r3, #1
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	3b01      	subs	r3, #1
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	4619      	mov	r1, r3
 80050b6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d15a      	bne.n	8005172 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68da      	ldr	r2, [r3, #12]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f022 0220 	bic.w	r2, r2, #32
 80050ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	68da      	ldr	r2, [r3, #12]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80050da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	695a      	ldr	r2, [r3, #20]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f022 0201 	bic.w	r2, r2, #1
 80050ea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2220      	movs	r2, #32
 80050f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d135      	bne.n	8005168 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	330c      	adds	r3, #12
 8005108:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	e853 3f00 	ldrex	r3, [r3]
 8005110:	613b      	str	r3, [r7, #16]
   return(result);
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	f023 0310 	bic.w	r3, r3, #16
 8005118:	627b      	str	r3, [r7, #36]	; 0x24
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	330c      	adds	r3, #12
 8005120:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005122:	623a      	str	r2, [r7, #32]
 8005124:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005126:	69f9      	ldr	r1, [r7, #28]
 8005128:	6a3a      	ldr	r2, [r7, #32]
 800512a:	e841 2300 	strex	r3, r2, [r1]
 800512e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d1e5      	bne.n	8005102 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 0310 	and.w	r3, r3, #16
 8005140:	2b10      	cmp	r3, #16
 8005142:	d10a      	bne.n	800515a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005144:	2300      	movs	r3, #0
 8005146:	60fb      	str	r3, [r7, #12]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	60fb      	str	r3, [r7, #12]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	60fb      	str	r3, [r7, #12]
 8005158:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800515e:	4619      	mov	r1, r3
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f7ff fdbb 	bl	8004cdc <HAL_UARTEx_RxEventCallback>
 8005166:	e002      	b.n	800516e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f7fc fa8d 	bl	8001688 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800516e:	2300      	movs	r3, #0
 8005170:	e002      	b.n	8005178 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005172:	2300      	movs	r3, #0
 8005174:	e000      	b.n	8005178 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005176:	2302      	movs	r3, #2
  }
}
 8005178:	4618      	mov	r0, r3
 800517a:	3730      	adds	r7, #48	; 0x30
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005180:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005184:	b0c0      	sub	sp, #256	; 0x100
 8005186:	af00      	add	r7, sp, #0
 8005188:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800518c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	691b      	ldr	r3, [r3, #16]
 8005194:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800519c:	68d9      	ldr	r1, [r3, #12]
 800519e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	ea40 0301 	orr.w	r3, r0, r1
 80051a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80051aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051ae:	689a      	ldr	r2, [r3, #8]
 80051b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	431a      	orrs	r2, r3
 80051b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051bc:	695b      	ldr	r3, [r3, #20]
 80051be:	431a      	orrs	r2, r3
 80051c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051c4:	69db      	ldr	r3, [r3, #28]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80051cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80051d8:	f021 010c 	bic.w	r1, r1, #12
 80051dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80051e6:	430b      	orrs	r3, r1
 80051e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80051ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	695b      	ldr	r3, [r3, #20]
 80051f2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80051f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051fa:	6999      	ldr	r1, [r3, #24]
 80051fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	ea40 0301 	orr.w	r3, r0, r1
 8005206:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	4b8f      	ldr	r3, [pc, #572]	; (800544c <UART_SetConfig+0x2cc>)
 8005210:	429a      	cmp	r2, r3
 8005212:	d005      	beq.n	8005220 <UART_SetConfig+0xa0>
 8005214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	4b8d      	ldr	r3, [pc, #564]	; (8005450 <UART_SetConfig+0x2d0>)
 800521c:	429a      	cmp	r2, r3
 800521e:	d104      	bne.n	800522a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005220:	f7fe fcf6 	bl	8003c10 <HAL_RCC_GetPCLK2Freq>
 8005224:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005228:	e003      	b.n	8005232 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800522a:	f7fe fcdd 	bl	8003be8 <HAL_RCC_GetPCLK1Freq>
 800522e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005232:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005236:	69db      	ldr	r3, [r3, #28]
 8005238:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800523c:	f040 810c 	bne.w	8005458 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005240:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005244:	2200      	movs	r2, #0
 8005246:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800524a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800524e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005252:	4622      	mov	r2, r4
 8005254:	462b      	mov	r3, r5
 8005256:	1891      	adds	r1, r2, r2
 8005258:	65b9      	str	r1, [r7, #88]	; 0x58
 800525a:	415b      	adcs	r3, r3
 800525c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800525e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005262:	4621      	mov	r1, r4
 8005264:	eb12 0801 	adds.w	r8, r2, r1
 8005268:	4629      	mov	r1, r5
 800526a:	eb43 0901 	adc.w	r9, r3, r1
 800526e:	f04f 0200 	mov.w	r2, #0
 8005272:	f04f 0300 	mov.w	r3, #0
 8005276:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800527a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800527e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005282:	4690      	mov	r8, r2
 8005284:	4699      	mov	r9, r3
 8005286:	4623      	mov	r3, r4
 8005288:	eb18 0303 	adds.w	r3, r8, r3
 800528c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005290:	462b      	mov	r3, r5
 8005292:	eb49 0303 	adc.w	r3, r9, r3
 8005296:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800529a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80052a6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80052aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80052ae:	460b      	mov	r3, r1
 80052b0:	18db      	adds	r3, r3, r3
 80052b2:	653b      	str	r3, [r7, #80]	; 0x50
 80052b4:	4613      	mov	r3, r2
 80052b6:	eb42 0303 	adc.w	r3, r2, r3
 80052ba:	657b      	str	r3, [r7, #84]	; 0x54
 80052bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80052c0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80052c4:	f7fb fb3a 	bl	800093c <__aeabi_uldivmod>
 80052c8:	4602      	mov	r2, r0
 80052ca:	460b      	mov	r3, r1
 80052cc:	4b61      	ldr	r3, [pc, #388]	; (8005454 <UART_SetConfig+0x2d4>)
 80052ce:	fba3 2302 	umull	r2, r3, r3, r2
 80052d2:	095b      	lsrs	r3, r3, #5
 80052d4:	011c      	lsls	r4, r3, #4
 80052d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052da:	2200      	movs	r2, #0
 80052dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80052e0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80052e4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80052e8:	4642      	mov	r2, r8
 80052ea:	464b      	mov	r3, r9
 80052ec:	1891      	adds	r1, r2, r2
 80052ee:	64b9      	str	r1, [r7, #72]	; 0x48
 80052f0:	415b      	adcs	r3, r3
 80052f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052f4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80052f8:	4641      	mov	r1, r8
 80052fa:	eb12 0a01 	adds.w	sl, r2, r1
 80052fe:	4649      	mov	r1, r9
 8005300:	eb43 0b01 	adc.w	fp, r3, r1
 8005304:	f04f 0200 	mov.w	r2, #0
 8005308:	f04f 0300 	mov.w	r3, #0
 800530c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005310:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005314:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005318:	4692      	mov	sl, r2
 800531a:	469b      	mov	fp, r3
 800531c:	4643      	mov	r3, r8
 800531e:	eb1a 0303 	adds.w	r3, sl, r3
 8005322:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005326:	464b      	mov	r3, r9
 8005328:	eb4b 0303 	adc.w	r3, fp, r3
 800532c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800533c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005340:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005344:	460b      	mov	r3, r1
 8005346:	18db      	adds	r3, r3, r3
 8005348:	643b      	str	r3, [r7, #64]	; 0x40
 800534a:	4613      	mov	r3, r2
 800534c:	eb42 0303 	adc.w	r3, r2, r3
 8005350:	647b      	str	r3, [r7, #68]	; 0x44
 8005352:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005356:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800535a:	f7fb faef 	bl	800093c <__aeabi_uldivmod>
 800535e:	4602      	mov	r2, r0
 8005360:	460b      	mov	r3, r1
 8005362:	4611      	mov	r1, r2
 8005364:	4b3b      	ldr	r3, [pc, #236]	; (8005454 <UART_SetConfig+0x2d4>)
 8005366:	fba3 2301 	umull	r2, r3, r3, r1
 800536a:	095b      	lsrs	r3, r3, #5
 800536c:	2264      	movs	r2, #100	; 0x64
 800536e:	fb02 f303 	mul.w	r3, r2, r3
 8005372:	1acb      	subs	r3, r1, r3
 8005374:	00db      	lsls	r3, r3, #3
 8005376:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800537a:	4b36      	ldr	r3, [pc, #216]	; (8005454 <UART_SetConfig+0x2d4>)
 800537c:	fba3 2302 	umull	r2, r3, r3, r2
 8005380:	095b      	lsrs	r3, r3, #5
 8005382:	005b      	lsls	r3, r3, #1
 8005384:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005388:	441c      	add	r4, r3
 800538a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800538e:	2200      	movs	r2, #0
 8005390:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005394:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005398:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800539c:	4642      	mov	r2, r8
 800539e:	464b      	mov	r3, r9
 80053a0:	1891      	adds	r1, r2, r2
 80053a2:	63b9      	str	r1, [r7, #56]	; 0x38
 80053a4:	415b      	adcs	r3, r3
 80053a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80053ac:	4641      	mov	r1, r8
 80053ae:	1851      	adds	r1, r2, r1
 80053b0:	6339      	str	r1, [r7, #48]	; 0x30
 80053b2:	4649      	mov	r1, r9
 80053b4:	414b      	adcs	r3, r1
 80053b6:	637b      	str	r3, [r7, #52]	; 0x34
 80053b8:	f04f 0200 	mov.w	r2, #0
 80053bc:	f04f 0300 	mov.w	r3, #0
 80053c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80053c4:	4659      	mov	r1, fp
 80053c6:	00cb      	lsls	r3, r1, #3
 80053c8:	4651      	mov	r1, sl
 80053ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053ce:	4651      	mov	r1, sl
 80053d0:	00ca      	lsls	r2, r1, #3
 80053d2:	4610      	mov	r0, r2
 80053d4:	4619      	mov	r1, r3
 80053d6:	4603      	mov	r3, r0
 80053d8:	4642      	mov	r2, r8
 80053da:	189b      	adds	r3, r3, r2
 80053dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80053e0:	464b      	mov	r3, r9
 80053e2:	460a      	mov	r2, r1
 80053e4:	eb42 0303 	adc.w	r3, r2, r3
 80053e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80053ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80053f8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80053fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005400:	460b      	mov	r3, r1
 8005402:	18db      	adds	r3, r3, r3
 8005404:	62bb      	str	r3, [r7, #40]	; 0x28
 8005406:	4613      	mov	r3, r2
 8005408:	eb42 0303 	adc.w	r3, r2, r3
 800540c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800540e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005412:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005416:	f7fb fa91 	bl	800093c <__aeabi_uldivmod>
 800541a:	4602      	mov	r2, r0
 800541c:	460b      	mov	r3, r1
 800541e:	4b0d      	ldr	r3, [pc, #52]	; (8005454 <UART_SetConfig+0x2d4>)
 8005420:	fba3 1302 	umull	r1, r3, r3, r2
 8005424:	095b      	lsrs	r3, r3, #5
 8005426:	2164      	movs	r1, #100	; 0x64
 8005428:	fb01 f303 	mul.w	r3, r1, r3
 800542c:	1ad3      	subs	r3, r2, r3
 800542e:	00db      	lsls	r3, r3, #3
 8005430:	3332      	adds	r3, #50	; 0x32
 8005432:	4a08      	ldr	r2, [pc, #32]	; (8005454 <UART_SetConfig+0x2d4>)
 8005434:	fba2 2303 	umull	r2, r3, r2, r3
 8005438:	095b      	lsrs	r3, r3, #5
 800543a:	f003 0207 	and.w	r2, r3, #7
 800543e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4422      	add	r2, r4
 8005446:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005448:	e105      	b.n	8005656 <UART_SetConfig+0x4d6>
 800544a:	bf00      	nop
 800544c:	40011000 	.word	0x40011000
 8005450:	40011400 	.word	0x40011400
 8005454:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005458:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800545c:	2200      	movs	r2, #0
 800545e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005462:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005466:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800546a:	4642      	mov	r2, r8
 800546c:	464b      	mov	r3, r9
 800546e:	1891      	adds	r1, r2, r2
 8005470:	6239      	str	r1, [r7, #32]
 8005472:	415b      	adcs	r3, r3
 8005474:	627b      	str	r3, [r7, #36]	; 0x24
 8005476:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800547a:	4641      	mov	r1, r8
 800547c:	1854      	adds	r4, r2, r1
 800547e:	4649      	mov	r1, r9
 8005480:	eb43 0501 	adc.w	r5, r3, r1
 8005484:	f04f 0200 	mov.w	r2, #0
 8005488:	f04f 0300 	mov.w	r3, #0
 800548c:	00eb      	lsls	r3, r5, #3
 800548e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005492:	00e2      	lsls	r2, r4, #3
 8005494:	4614      	mov	r4, r2
 8005496:	461d      	mov	r5, r3
 8005498:	4643      	mov	r3, r8
 800549a:	18e3      	adds	r3, r4, r3
 800549c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80054a0:	464b      	mov	r3, r9
 80054a2:	eb45 0303 	adc.w	r3, r5, r3
 80054a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80054aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80054b6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80054ba:	f04f 0200 	mov.w	r2, #0
 80054be:	f04f 0300 	mov.w	r3, #0
 80054c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80054c6:	4629      	mov	r1, r5
 80054c8:	008b      	lsls	r3, r1, #2
 80054ca:	4621      	mov	r1, r4
 80054cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054d0:	4621      	mov	r1, r4
 80054d2:	008a      	lsls	r2, r1, #2
 80054d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80054d8:	f7fb fa30 	bl	800093c <__aeabi_uldivmod>
 80054dc:	4602      	mov	r2, r0
 80054de:	460b      	mov	r3, r1
 80054e0:	4b60      	ldr	r3, [pc, #384]	; (8005664 <UART_SetConfig+0x4e4>)
 80054e2:	fba3 2302 	umull	r2, r3, r3, r2
 80054e6:	095b      	lsrs	r3, r3, #5
 80054e8:	011c      	lsls	r4, r3, #4
 80054ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054ee:	2200      	movs	r2, #0
 80054f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80054f4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80054f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80054fc:	4642      	mov	r2, r8
 80054fe:	464b      	mov	r3, r9
 8005500:	1891      	adds	r1, r2, r2
 8005502:	61b9      	str	r1, [r7, #24]
 8005504:	415b      	adcs	r3, r3
 8005506:	61fb      	str	r3, [r7, #28]
 8005508:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800550c:	4641      	mov	r1, r8
 800550e:	1851      	adds	r1, r2, r1
 8005510:	6139      	str	r1, [r7, #16]
 8005512:	4649      	mov	r1, r9
 8005514:	414b      	adcs	r3, r1
 8005516:	617b      	str	r3, [r7, #20]
 8005518:	f04f 0200 	mov.w	r2, #0
 800551c:	f04f 0300 	mov.w	r3, #0
 8005520:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005524:	4659      	mov	r1, fp
 8005526:	00cb      	lsls	r3, r1, #3
 8005528:	4651      	mov	r1, sl
 800552a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800552e:	4651      	mov	r1, sl
 8005530:	00ca      	lsls	r2, r1, #3
 8005532:	4610      	mov	r0, r2
 8005534:	4619      	mov	r1, r3
 8005536:	4603      	mov	r3, r0
 8005538:	4642      	mov	r2, r8
 800553a:	189b      	adds	r3, r3, r2
 800553c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005540:	464b      	mov	r3, r9
 8005542:	460a      	mov	r2, r1
 8005544:	eb42 0303 	adc.w	r3, r2, r3
 8005548:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800554c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	67bb      	str	r3, [r7, #120]	; 0x78
 8005556:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005558:	f04f 0200 	mov.w	r2, #0
 800555c:	f04f 0300 	mov.w	r3, #0
 8005560:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005564:	4649      	mov	r1, r9
 8005566:	008b      	lsls	r3, r1, #2
 8005568:	4641      	mov	r1, r8
 800556a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800556e:	4641      	mov	r1, r8
 8005570:	008a      	lsls	r2, r1, #2
 8005572:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005576:	f7fb f9e1 	bl	800093c <__aeabi_uldivmod>
 800557a:	4602      	mov	r2, r0
 800557c:	460b      	mov	r3, r1
 800557e:	4b39      	ldr	r3, [pc, #228]	; (8005664 <UART_SetConfig+0x4e4>)
 8005580:	fba3 1302 	umull	r1, r3, r3, r2
 8005584:	095b      	lsrs	r3, r3, #5
 8005586:	2164      	movs	r1, #100	; 0x64
 8005588:	fb01 f303 	mul.w	r3, r1, r3
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	011b      	lsls	r3, r3, #4
 8005590:	3332      	adds	r3, #50	; 0x32
 8005592:	4a34      	ldr	r2, [pc, #208]	; (8005664 <UART_SetConfig+0x4e4>)
 8005594:	fba2 2303 	umull	r2, r3, r2, r3
 8005598:	095b      	lsrs	r3, r3, #5
 800559a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800559e:	441c      	add	r4, r3
 80055a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055a4:	2200      	movs	r2, #0
 80055a6:	673b      	str	r3, [r7, #112]	; 0x70
 80055a8:	677a      	str	r2, [r7, #116]	; 0x74
 80055aa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80055ae:	4642      	mov	r2, r8
 80055b0:	464b      	mov	r3, r9
 80055b2:	1891      	adds	r1, r2, r2
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	415b      	adcs	r3, r3
 80055b8:	60fb      	str	r3, [r7, #12]
 80055ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80055be:	4641      	mov	r1, r8
 80055c0:	1851      	adds	r1, r2, r1
 80055c2:	6039      	str	r1, [r7, #0]
 80055c4:	4649      	mov	r1, r9
 80055c6:	414b      	adcs	r3, r1
 80055c8:	607b      	str	r3, [r7, #4]
 80055ca:	f04f 0200 	mov.w	r2, #0
 80055ce:	f04f 0300 	mov.w	r3, #0
 80055d2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80055d6:	4659      	mov	r1, fp
 80055d8:	00cb      	lsls	r3, r1, #3
 80055da:	4651      	mov	r1, sl
 80055dc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055e0:	4651      	mov	r1, sl
 80055e2:	00ca      	lsls	r2, r1, #3
 80055e4:	4610      	mov	r0, r2
 80055e6:	4619      	mov	r1, r3
 80055e8:	4603      	mov	r3, r0
 80055ea:	4642      	mov	r2, r8
 80055ec:	189b      	adds	r3, r3, r2
 80055ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80055f0:	464b      	mov	r3, r9
 80055f2:	460a      	mov	r2, r1
 80055f4:	eb42 0303 	adc.w	r3, r2, r3
 80055f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80055fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	663b      	str	r3, [r7, #96]	; 0x60
 8005604:	667a      	str	r2, [r7, #100]	; 0x64
 8005606:	f04f 0200 	mov.w	r2, #0
 800560a:	f04f 0300 	mov.w	r3, #0
 800560e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005612:	4649      	mov	r1, r9
 8005614:	008b      	lsls	r3, r1, #2
 8005616:	4641      	mov	r1, r8
 8005618:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800561c:	4641      	mov	r1, r8
 800561e:	008a      	lsls	r2, r1, #2
 8005620:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005624:	f7fb f98a 	bl	800093c <__aeabi_uldivmod>
 8005628:	4602      	mov	r2, r0
 800562a:	460b      	mov	r3, r1
 800562c:	4b0d      	ldr	r3, [pc, #52]	; (8005664 <UART_SetConfig+0x4e4>)
 800562e:	fba3 1302 	umull	r1, r3, r3, r2
 8005632:	095b      	lsrs	r3, r3, #5
 8005634:	2164      	movs	r1, #100	; 0x64
 8005636:	fb01 f303 	mul.w	r3, r1, r3
 800563a:	1ad3      	subs	r3, r2, r3
 800563c:	011b      	lsls	r3, r3, #4
 800563e:	3332      	adds	r3, #50	; 0x32
 8005640:	4a08      	ldr	r2, [pc, #32]	; (8005664 <UART_SetConfig+0x4e4>)
 8005642:	fba2 2303 	umull	r2, r3, r2, r3
 8005646:	095b      	lsrs	r3, r3, #5
 8005648:	f003 020f 	and.w	r2, r3, #15
 800564c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4422      	add	r2, r4
 8005654:	609a      	str	r2, [r3, #8]
}
 8005656:	bf00      	nop
 8005658:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800565c:	46bd      	mov	sp, r7
 800565e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005662:	bf00      	nop
 8005664:	51eb851f 	.word	0x51eb851f

08005668 <__errno>:
 8005668:	4b01      	ldr	r3, [pc, #4]	; (8005670 <__errno+0x8>)
 800566a:	6818      	ldr	r0, [r3, #0]
 800566c:	4770      	bx	lr
 800566e:	bf00      	nop
 8005670:	2000000c 	.word	0x2000000c

08005674 <__libc_init_array>:
 8005674:	b570      	push	{r4, r5, r6, lr}
 8005676:	4d0d      	ldr	r5, [pc, #52]	; (80056ac <__libc_init_array+0x38>)
 8005678:	4c0d      	ldr	r4, [pc, #52]	; (80056b0 <__libc_init_array+0x3c>)
 800567a:	1b64      	subs	r4, r4, r5
 800567c:	10a4      	asrs	r4, r4, #2
 800567e:	2600      	movs	r6, #0
 8005680:	42a6      	cmp	r6, r4
 8005682:	d109      	bne.n	8005698 <__libc_init_array+0x24>
 8005684:	4d0b      	ldr	r5, [pc, #44]	; (80056b4 <__libc_init_array+0x40>)
 8005686:	4c0c      	ldr	r4, [pc, #48]	; (80056b8 <__libc_init_array+0x44>)
 8005688:	f000 fc8e 	bl	8005fa8 <_init>
 800568c:	1b64      	subs	r4, r4, r5
 800568e:	10a4      	asrs	r4, r4, #2
 8005690:	2600      	movs	r6, #0
 8005692:	42a6      	cmp	r6, r4
 8005694:	d105      	bne.n	80056a2 <__libc_init_array+0x2e>
 8005696:	bd70      	pop	{r4, r5, r6, pc}
 8005698:	f855 3b04 	ldr.w	r3, [r5], #4
 800569c:	4798      	blx	r3
 800569e:	3601      	adds	r6, #1
 80056a0:	e7ee      	b.n	8005680 <__libc_init_array+0xc>
 80056a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80056a6:	4798      	blx	r3
 80056a8:	3601      	adds	r6, #1
 80056aa:	e7f2      	b.n	8005692 <__libc_init_array+0x1e>
 80056ac:	08006038 	.word	0x08006038
 80056b0:	08006038 	.word	0x08006038
 80056b4:	08006038 	.word	0x08006038
 80056b8:	0800603c 	.word	0x0800603c

080056bc <memset>:
 80056bc:	4402      	add	r2, r0
 80056be:	4603      	mov	r3, r0
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d100      	bne.n	80056c6 <memset+0xa>
 80056c4:	4770      	bx	lr
 80056c6:	f803 1b01 	strb.w	r1, [r3], #1
 80056ca:	e7f9      	b.n	80056c0 <memset+0x4>

080056cc <siprintf>:
 80056cc:	b40e      	push	{r1, r2, r3}
 80056ce:	b500      	push	{lr}
 80056d0:	b09c      	sub	sp, #112	; 0x70
 80056d2:	ab1d      	add	r3, sp, #116	; 0x74
 80056d4:	9002      	str	r0, [sp, #8]
 80056d6:	9006      	str	r0, [sp, #24]
 80056d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80056dc:	4809      	ldr	r0, [pc, #36]	; (8005704 <siprintf+0x38>)
 80056de:	9107      	str	r1, [sp, #28]
 80056e0:	9104      	str	r1, [sp, #16]
 80056e2:	4909      	ldr	r1, [pc, #36]	; (8005708 <siprintf+0x3c>)
 80056e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80056e8:	9105      	str	r1, [sp, #20]
 80056ea:	6800      	ldr	r0, [r0, #0]
 80056ec:	9301      	str	r3, [sp, #4]
 80056ee:	a902      	add	r1, sp, #8
 80056f0:	f000 f868 	bl	80057c4 <_svfiprintf_r>
 80056f4:	9b02      	ldr	r3, [sp, #8]
 80056f6:	2200      	movs	r2, #0
 80056f8:	701a      	strb	r2, [r3, #0]
 80056fa:	b01c      	add	sp, #112	; 0x70
 80056fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005700:	b003      	add	sp, #12
 8005702:	4770      	bx	lr
 8005704:	2000000c 	.word	0x2000000c
 8005708:	ffff0208 	.word	0xffff0208

0800570c <__ssputs_r>:
 800570c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005710:	688e      	ldr	r6, [r1, #8]
 8005712:	429e      	cmp	r6, r3
 8005714:	4682      	mov	sl, r0
 8005716:	460c      	mov	r4, r1
 8005718:	4690      	mov	r8, r2
 800571a:	461f      	mov	r7, r3
 800571c:	d838      	bhi.n	8005790 <__ssputs_r+0x84>
 800571e:	898a      	ldrh	r2, [r1, #12]
 8005720:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005724:	d032      	beq.n	800578c <__ssputs_r+0x80>
 8005726:	6825      	ldr	r5, [r4, #0]
 8005728:	6909      	ldr	r1, [r1, #16]
 800572a:	eba5 0901 	sub.w	r9, r5, r1
 800572e:	6965      	ldr	r5, [r4, #20]
 8005730:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005734:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005738:	3301      	adds	r3, #1
 800573a:	444b      	add	r3, r9
 800573c:	106d      	asrs	r5, r5, #1
 800573e:	429d      	cmp	r5, r3
 8005740:	bf38      	it	cc
 8005742:	461d      	movcc	r5, r3
 8005744:	0553      	lsls	r3, r2, #21
 8005746:	d531      	bpl.n	80057ac <__ssputs_r+0xa0>
 8005748:	4629      	mov	r1, r5
 800574a:	f000 fb63 	bl	8005e14 <_malloc_r>
 800574e:	4606      	mov	r6, r0
 8005750:	b950      	cbnz	r0, 8005768 <__ssputs_r+0x5c>
 8005752:	230c      	movs	r3, #12
 8005754:	f8ca 3000 	str.w	r3, [sl]
 8005758:	89a3      	ldrh	r3, [r4, #12]
 800575a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800575e:	81a3      	strh	r3, [r4, #12]
 8005760:	f04f 30ff 	mov.w	r0, #4294967295
 8005764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005768:	6921      	ldr	r1, [r4, #16]
 800576a:	464a      	mov	r2, r9
 800576c:	f000 fabe 	bl	8005cec <memcpy>
 8005770:	89a3      	ldrh	r3, [r4, #12]
 8005772:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005776:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800577a:	81a3      	strh	r3, [r4, #12]
 800577c:	6126      	str	r6, [r4, #16]
 800577e:	6165      	str	r5, [r4, #20]
 8005780:	444e      	add	r6, r9
 8005782:	eba5 0509 	sub.w	r5, r5, r9
 8005786:	6026      	str	r6, [r4, #0]
 8005788:	60a5      	str	r5, [r4, #8]
 800578a:	463e      	mov	r6, r7
 800578c:	42be      	cmp	r6, r7
 800578e:	d900      	bls.n	8005792 <__ssputs_r+0x86>
 8005790:	463e      	mov	r6, r7
 8005792:	6820      	ldr	r0, [r4, #0]
 8005794:	4632      	mov	r2, r6
 8005796:	4641      	mov	r1, r8
 8005798:	f000 fab6 	bl	8005d08 <memmove>
 800579c:	68a3      	ldr	r3, [r4, #8]
 800579e:	1b9b      	subs	r3, r3, r6
 80057a0:	60a3      	str	r3, [r4, #8]
 80057a2:	6823      	ldr	r3, [r4, #0]
 80057a4:	4433      	add	r3, r6
 80057a6:	6023      	str	r3, [r4, #0]
 80057a8:	2000      	movs	r0, #0
 80057aa:	e7db      	b.n	8005764 <__ssputs_r+0x58>
 80057ac:	462a      	mov	r2, r5
 80057ae:	f000 fba5 	bl	8005efc <_realloc_r>
 80057b2:	4606      	mov	r6, r0
 80057b4:	2800      	cmp	r0, #0
 80057b6:	d1e1      	bne.n	800577c <__ssputs_r+0x70>
 80057b8:	6921      	ldr	r1, [r4, #16]
 80057ba:	4650      	mov	r0, sl
 80057bc:	f000 fabe 	bl	8005d3c <_free_r>
 80057c0:	e7c7      	b.n	8005752 <__ssputs_r+0x46>
	...

080057c4 <_svfiprintf_r>:
 80057c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057c8:	4698      	mov	r8, r3
 80057ca:	898b      	ldrh	r3, [r1, #12]
 80057cc:	061b      	lsls	r3, r3, #24
 80057ce:	b09d      	sub	sp, #116	; 0x74
 80057d0:	4607      	mov	r7, r0
 80057d2:	460d      	mov	r5, r1
 80057d4:	4614      	mov	r4, r2
 80057d6:	d50e      	bpl.n	80057f6 <_svfiprintf_r+0x32>
 80057d8:	690b      	ldr	r3, [r1, #16]
 80057da:	b963      	cbnz	r3, 80057f6 <_svfiprintf_r+0x32>
 80057dc:	2140      	movs	r1, #64	; 0x40
 80057de:	f000 fb19 	bl	8005e14 <_malloc_r>
 80057e2:	6028      	str	r0, [r5, #0]
 80057e4:	6128      	str	r0, [r5, #16]
 80057e6:	b920      	cbnz	r0, 80057f2 <_svfiprintf_r+0x2e>
 80057e8:	230c      	movs	r3, #12
 80057ea:	603b      	str	r3, [r7, #0]
 80057ec:	f04f 30ff 	mov.w	r0, #4294967295
 80057f0:	e0d1      	b.n	8005996 <_svfiprintf_r+0x1d2>
 80057f2:	2340      	movs	r3, #64	; 0x40
 80057f4:	616b      	str	r3, [r5, #20]
 80057f6:	2300      	movs	r3, #0
 80057f8:	9309      	str	r3, [sp, #36]	; 0x24
 80057fa:	2320      	movs	r3, #32
 80057fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005800:	f8cd 800c 	str.w	r8, [sp, #12]
 8005804:	2330      	movs	r3, #48	; 0x30
 8005806:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80059b0 <_svfiprintf_r+0x1ec>
 800580a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800580e:	f04f 0901 	mov.w	r9, #1
 8005812:	4623      	mov	r3, r4
 8005814:	469a      	mov	sl, r3
 8005816:	f813 2b01 	ldrb.w	r2, [r3], #1
 800581a:	b10a      	cbz	r2, 8005820 <_svfiprintf_r+0x5c>
 800581c:	2a25      	cmp	r2, #37	; 0x25
 800581e:	d1f9      	bne.n	8005814 <_svfiprintf_r+0x50>
 8005820:	ebba 0b04 	subs.w	fp, sl, r4
 8005824:	d00b      	beq.n	800583e <_svfiprintf_r+0x7a>
 8005826:	465b      	mov	r3, fp
 8005828:	4622      	mov	r2, r4
 800582a:	4629      	mov	r1, r5
 800582c:	4638      	mov	r0, r7
 800582e:	f7ff ff6d 	bl	800570c <__ssputs_r>
 8005832:	3001      	adds	r0, #1
 8005834:	f000 80aa 	beq.w	800598c <_svfiprintf_r+0x1c8>
 8005838:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800583a:	445a      	add	r2, fp
 800583c:	9209      	str	r2, [sp, #36]	; 0x24
 800583e:	f89a 3000 	ldrb.w	r3, [sl]
 8005842:	2b00      	cmp	r3, #0
 8005844:	f000 80a2 	beq.w	800598c <_svfiprintf_r+0x1c8>
 8005848:	2300      	movs	r3, #0
 800584a:	f04f 32ff 	mov.w	r2, #4294967295
 800584e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005852:	f10a 0a01 	add.w	sl, sl, #1
 8005856:	9304      	str	r3, [sp, #16]
 8005858:	9307      	str	r3, [sp, #28]
 800585a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800585e:	931a      	str	r3, [sp, #104]	; 0x68
 8005860:	4654      	mov	r4, sl
 8005862:	2205      	movs	r2, #5
 8005864:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005868:	4851      	ldr	r0, [pc, #324]	; (80059b0 <_svfiprintf_r+0x1ec>)
 800586a:	f7fa fcb9 	bl	80001e0 <memchr>
 800586e:	9a04      	ldr	r2, [sp, #16]
 8005870:	b9d8      	cbnz	r0, 80058aa <_svfiprintf_r+0xe6>
 8005872:	06d0      	lsls	r0, r2, #27
 8005874:	bf44      	itt	mi
 8005876:	2320      	movmi	r3, #32
 8005878:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800587c:	0711      	lsls	r1, r2, #28
 800587e:	bf44      	itt	mi
 8005880:	232b      	movmi	r3, #43	; 0x2b
 8005882:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005886:	f89a 3000 	ldrb.w	r3, [sl]
 800588a:	2b2a      	cmp	r3, #42	; 0x2a
 800588c:	d015      	beq.n	80058ba <_svfiprintf_r+0xf6>
 800588e:	9a07      	ldr	r2, [sp, #28]
 8005890:	4654      	mov	r4, sl
 8005892:	2000      	movs	r0, #0
 8005894:	f04f 0c0a 	mov.w	ip, #10
 8005898:	4621      	mov	r1, r4
 800589a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800589e:	3b30      	subs	r3, #48	; 0x30
 80058a0:	2b09      	cmp	r3, #9
 80058a2:	d94e      	bls.n	8005942 <_svfiprintf_r+0x17e>
 80058a4:	b1b0      	cbz	r0, 80058d4 <_svfiprintf_r+0x110>
 80058a6:	9207      	str	r2, [sp, #28]
 80058a8:	e014      	b.n	80058d4 <_svfiprintf_r+0x110>
 80058aa:	eba0 0308 	sub.w	r3, r0, r8
 80058ae:	fa09 f303 	lsl.w	r3, r9, r3
 80058b2:	4313      	orrs	r3, r2
 80058b4:	9304      	str	r3, [sp, #16]
 80058b6:	46a2      	mov	sl, r4
 80058b8:	e7d2      	b.n	8005860 <_svfiprintf_r+0x9c>
 80058ba:	9b03      	ldr	r3, [sp, #12]
 80058bc:	1d19      	adds	r1, r3, #4
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	9103      	str	r1, [sp, #12]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	bfbb      	ittet	lt
 80058c6:	425b      	neglt	r3, r3
 80058c8:	f042 0202 	orrlt.w	r2, r2, #2
 80058cc:	9307      	strge	r3, [sp, #28]
 80058ce:	9307      	strlt	r3, [sp, #28]
 80058d0:	bfb8      	it	lt
 80058d2:	9204      	strlt	r2, [sp, #16]
 80058d4:	7823      	ldrb	r3, [r4, #0]
 80058d6:	2b2e      	cmp	r3, #46	; 0x2e
 80058d8:	d10c      	bne.n	80058f4 <_svfiprintf_r+0x130>
 80058da:	7863      	ldrb	r3, [r4, #1]
 80058dc:	2b2a      	cmp	r3, #42	; 0x2a
 80058de:	d135      	bne.n	800594c <_svfiprintf_r+0x188>
 80058e0:	9b03      	ldr	r3, [sp, #12]
 80058e2:	1d1a      	adds	r2, r3, #4
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	9203      	str	r2, [sp, #12]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	bfb8      	it	lt
 80058ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80058f0:	3402      	adds	r4, #2
 80058f2:	9305      	str	r3, [sp, #20]
 80058f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80059c0 <_svfiprintf_r+0x1fc>
 80058f8:	7821      	ldrb	r1, [r4, #0]
 80058fa:	2203      	movs	r2, #3
 80058fc:	4650      	mov	r0, sl
 80058fe:	f7fa fc6f 	bl	80001e0 <memchr>
 8005902:	b140      	cbz	r0, 8005916 <_svfiprintf_r+0x152>
 8005904:	2340      	movs	r3, #64	; 0x40
 8005906:	eba0 000a 	sub.w	r0, r0, sl
 800590a:	fa03 f000 	lsl.w	r0, r3, r0
 800590e:	9b04      	ldr	r3, [sp, #16]
 8005910:	4303      	orrs	r3, r0
 8005912:	3401      	adds	r4, #1
 8005914:	9304      	str	r3, [sp, #16]
 8005916:	f814 1b01 	ldrb.w	r1, [r4], #1
 800591a:	4826      	ldr	r0, [pc, #152]	; (80059b4 <_svfiprintf_r+0x1f0>)
 800591c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005920:	2206      	movs	r2, #6
 8005922:	f7fa fc5d 	bl	80001e0 <memchr>
 8005926:	2800      	cmp	r0, #0
 8005928:	d038      	beq.n	800599c <_svfiprintf_r+0x1d8>
 800592a:	4b23      	ldr	r3, [pc, #140]	; (80059b8 <_svfiprintf_r+0x1f4>)
 800592c:	bb1b      	cbnz	r3, 8005976 <_svfiprintf_r+0x1b2>
 800592e:	9b03      	ldr	r3, [sp, #12]
 8005930:	3307      	adds	r3, #7
 8005932:	f023 0307 	bic.w	r3, r3, #7
 8005936:	3308      	adds	r3, #8
 8005938:	9303      	str	r3, [sp, #12]
 800593a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800593c:	4433      	add	r3, r6
 800593e:	9309      	str	r3, [sp, #36]	; 0x24
 8005940:	e767      	b.n	8005812 <_svfiprintf_r+0x4e>
 8005942:	fb0c 3202 	mla	r2, ip, r2, r3
 8005946:	460c      	mov	r4, r1
 8005948:	2001      	movs	r0, #1
 800594a:	e7a5      	b.n	8005898 <_svfiprintf_r+0xd4>
 800594c:	2300      	movs	r3, #0
 800594e:	3401      	adds	r4, #1
 8005950:	9305      	str	r3, [sp, #20]
 8005952:	4619      	mov	r1, r3
 8005954:	f04f 0c0a 	mov.w	ip, #10
 8005958:	4620      	mov	r0, r4
 800595a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800595e:	3a30      	subs	r2, #48	; 0x30
 8005960:	2a09      	cmp	r2, #9
 8005962:	d903      	bls.n	800596c <_svfiprintf_r+0x1a8>
 8005964:	2b00      	cmp	r3, #0
 8005966:	d0c5      	beq.n	80058f4 <_svfiprintf_r+0x130>
 8005968:	9105      	str	r1, [sp, #20]
 800596a:	e7c3      	b.n	80058f4 <_svfiprintf_r+0x130>
 800596c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005970:	4604      	mov	r4, r0
 8005972:	2301      	movs	r3, #1
 8005974:	e7f0      	b.n	8005958 <_svfiprintf_r+0x194>
 8005976:	ab03      	add	r3, sp, #12
 8005978:	9300      	str	r3, [sp, #0]
 800597a:	462a      	mov	r2, r5
 800597c:	4b0f      	ldr	r3, [pc, #60]	; (80059bc <_svfiprintf_r+0x1f8>)
 800597e:	a904      	add	r1, sp, #16
 8005980:	4638      	mov	r0, r7
 8005982:	f3af 8000 	nop.w
 8005986:	1c42      	adds	r2, r0, #1
 8005988:	4606      	mov	r6, r0
 800598a:	d1d6      	bne.n	800593a <_svfiprintf_r+0x176>
 800598c:	89ab      	ldrh	r3, [r5, #12]
 800598e:	065b      	lsls	r3, r3, #25
 8005990:	f53f af2c 	bmi.w	80057ec <_svfiprintf_r+0x28>
 8005994:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005996:	b01d      	add	sp, #116	; 0x74
 8005998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800599c:	ab03      	add	r3, sp, #12
 800599e:	9300      	str	r3, [sp, #0]
 80059a0:	462a      	mov	r2, r5
 80059a2:	4b06      	ldr	r3, [pc, #24]	; (80059bc <_svfiprintf_r+0x1f8>)
 80059a4:	a904      	add	r1, sp, #16
 80059a6:	4638      	mov	r0, r7
 80059a8:	f000 f87a 	bl	8005aa0 <_printf_i>
 80059ac:	e7eb      	b.n	8005986 <_svfiprintf_r+0x1c2>
 80059ae:	bf00      	nop
 80059b0:	08005ffc 	.word	0x08005ffc
 80059b4:	08006006 	.word	0x08006006
 80059b8:	00000000 	.word	0x00000000
 80059bc:	0800570d 	.word	0x0800570d
 80059c0:	08006002 	.word	0x08006002

080059c4 <_printf_common>:
 80059c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059c8:	4616      	mov	r6, r2
 80059ca:	4699      	mov	r9, r3
 80059cc:	688a      	ldr	r2, [r1, #8]
 80059ce:	690b      	ldr	r3, [r1, #16]
 80059d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80059d4:	4293      	cmp	r3, r2
 80059d6:	bfb8      	it	lt
 80059d8:	4613      	movlt	r3, r2
 80059da:	6033      	str	r3, [r6, #0]
 80059dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80059e0:	4607      	mov	r7, r0
 80059e2:	460c      	mov	r4, r1
 80059e4:	b10a      	cbz	r2, 80059ea <_printf_common+0x26>
 80059e6:	3301      	adds	r3, #1
 80059e8:	6033      	str	r3, [r6, #0]
 80059ea:	6823      	ldr	r3, [r4, #0]
 80059ec:	0699      	lsls	r1, r3, #26
 80059ee:	bf42      	ittt	mi
 80059f0:	6833      	ldrmi	r3, [r6, #0]
 80059f2:	3302      	addmi	r3, #2
 80059f4:	6033      	strmi	r3, [r6, #0]
 80059f6:	6825      	ldr	r5, [r4, #0]
 80059f8:	f015 0506 	ands.w	r5, r5, #6
 80059fc:	d106      	bne.n	8005a0c <_printf_common+0x48>
 80059fe:	f104 0a19 	add.w	sl, r4, #25
 8005a02:	68e3      	ldr	r3, [r4, #12]
 8005a04:	6832      	ldr	r2, [r6, #0]
 8005a06:	1a9b      	subs	r3, r3, r2
 8005a08:	42ab      	cmp	r3, r5
 8005a0a:	dc26      	bgt.n	8005a5a <_printf_common+0x96>
 8005a0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a10:	1e13      	subs	r3, r2, #0
 8005a12:	6822      	ldr	r2, [r4, #0]
 8005a14:	bf18      	it	ne
 8005a16:	2301      	movne	r3, #1
 8005a18:	0692      	lsls	r2, r2, #26
 8005a1a:	d42b      	bmi.n	8005a74 <_printf_common+0xb0>
 8005a1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a20:	4649      	mov	r1, r9
 8005a22:	4638      	mov	r0, r7
 8005a24:	47c0      	blx	r8
 8005a26:	3001      	adds	r0, #1
 8005a28:	d01e      	beq.n	8005a68 <_printf_common+0xa4>
 8005a2a:	6823      	ldr	r3, [r4, #0]
 8005a2c:	68e5      	ldr	r5, [r4, #12]
 8005a2e:	6832      	ldr	r2, [r6, #0]
 8005a30:	f003 0306 	and.w	r3, r3, #6
 8005a34:	2b04      	cmp	r3, #4
 8005a36:	bf08      	it	eq
 8005a38:	1aad      	subeq	r5, r5, r2
 8005a3a:	68a3      	ldr	r3, [r4, #8]
 8005a3c:	6922      	ldr	r2, [r4, #16]
 8005a3e:	bf0c      	ite	eq
 8005a40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a44:	2500      	movne	r5, #0
 8005a46:	4293      	cmp	r3, r2
 8005a48:	bfc4      	itt	gt
 8005a4a:	1a9b      	subgt	r3, r3, r2
 8005a4c:	18ed      	addgt	r5, r5, r3
 8005a4e:	2600      	movs	r6, #0
 8005a50:	341a      	adds	r4, #26
 8005a52:	42b5      	cmp	r5, r6
 8005a54:	d11a      	bne.n	8005a8c <_printf_common+0xc8>
 8005a56:	2000      	movs	r0, #0
 8005a58:	e008      	b.n	8005a6c <_printf_common+0xa8>
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	4652      	mov	r2, sl
 8005a5e:	4649      	mov	r1, r9
 8005a60:	4638      	mov	r0, r7
 8005a62:	47c0      	blx	r8
 8005a64:	3001      	adds	r0, #1
 8005a66:	d103      	bne.n	8005a70 <_printf_common+0xac>
 8005a68:	f04f 30ff 	mov.w	r0, #4294967295
 8005a6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a70:	3501      	adds	r5, #1
 8005a72:	e7c6      	b.n	8005a02 <_printf_common+0x3e>
 8005a74:	18e1      	adds	r1, r4, r3
 8005a76:	1c5a      	adds	r2, r3, #1
 8005a78:	2030      	movs	r0, #48	; 0x30
 8005a7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a7e:	4422      	add	r2, r4
 8005a80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a88:	3302      	adds	r3, #2
 8005a8a:	e7c7      	b.n	8005a1c <_printf_common+0x58>
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	4622      	mov	r2, r4
 8005a90:	4649      	mov	r1, r9
 8005a92:	4638      	mov	r0, r7
 8005a94:	47c0      	blx	r8
 8005a96:	3001      	adds	r0, #1
 8005a98:	d0e6      	beq.n	8005a68 <_printf_common+0xa4>
 8005a9a:	3601      	adds	r6, #1
 8005a9c:	e7d9      	b.n	8005a52 <_printf_common+0x8e>
	...

08005aa0 <_printf_i>:
 8005aa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005aa4:	7e0f      	ldrb	r7, [r1, #24]
 8005aa6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005aa8:	2f78      	cmp	r7, #120	; 0x78
 8005aaa:	4691      	mov	r9, r2
 8005aac:	4680      	mov	r8, r0
 8005aae:	460c      	mov	r4, r1
 8005ab0:	469a      	mov	sl, r3
 8005ab2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005ab6:	d807      	bhi.n	8005ac8 <_printf_i+0x28>
 8005ab8:	2f62      	cmp	r7, #98	; 0x62
 8005aba:	d80a      	bhi.n	8005ad2 <_printf_i+0x32>
 8005abc:	2f00      	cmp	r7, #0
 8005abe:	f000 80d8 	beq.w	8005c72 <_printf_i+0x1d2>
 8005ac2:	2f58      	cmp	r7, #88	; 0x58
 8005ac4:	f000 80a3 	beq.w	8005c0e <_printf_i+0x16e>
 8005ac8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005acc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ad0:	e03a      	b.n	8005b48 <_printf_i+0xa8>
 8005ad2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ad6:	2b15      	cmp	r3, #21
 8005ad8:	d8f6      	bhi.n	8005ac8 <_printf_i+0x28>
 8005ada:	a101      	add	r1, pc, #4	; (adr r1, 8005ae0 <_printf_i+0x40>)
 8005adc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ae0:	08005b39 	.word	0x08005b39
 8005ae4:	08005b4d 	.word	0x08005b4d
 8005ae8:	08005ac9 	.word	0x08005ac9
 8005aec:	08005ac9 	.word	0x08005ac9
 8005af0:	08005ac9 	.word	0x08005ac9
 8005af4:	08005ac9 	.word	0x08005ac9
 8005af8:	08005b4d 	.word	0x08005b4d
 8005afc:	08005ac9 	.word	0x08005ac9
 8005b00:	08005ac9 	.word	0x08005ac9
 8005b04:	08005ac9 	.word	0x08005ac9
 8005b08:	08005ac9 	.word	0x08005ac9
 8005b0c:	08005c59 	.word	0x08005c59
 8005b10:	08005b7d 	.word	0x08005b7d
 8005b14:	08005c3b 	.word	0x08005c3b
 8005b18:	08005ac9 	.word	0x08005ac9
 8005b1c:	08005ac9 	.word	0x08005ac9
 8005b20:	08005c7b 	.word	0x08005c7b
 8005b24:	08005ac9 	.word	0x08005ac9
 8005b28:	08005b7d 	.word	0x08005b7d
 8005b2c:	08005ac9 	.word	0x08005ac9
 8005b30:	08005ac9 	.word	0x08005ac9
 8005b34:	08005c43 	.word	0x08005c43
 8005b38:	682b      	ldr	r3, [r5, #0]
 8005b3a:	1d1a      	adds	r2, r3, #4
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	602a      	str	r2, [r5, #0]
 8005b40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e0a3      	b.n	8005c94 <_printf_i+0x1f4>
 8005b4c:	6820      	ldr	r0, [r4, #0]
 8005b4e:	6829      	ldr	r1, [r5, #0]
 8005b50:	0606      	lsls	r6, r0, #24
 8005b52:	f101 0304 	add.w	r3, r1, #4
 8005b56:	d50a      	bpl.n	8005b6e <_printf_i+0xce>
 8005b58:	680e      	ldr	r6, [r1, #0]
 8005b5a:	602b      	str	r3, [r5, #0]
 8005b5c:	2e00      	cmp	r6, #0
 8005b5e:	da03      	bge.n	8005b68 <_printf_i+0xc8>
 8005b60:	232d      	movs	r3, #45	; 0x2d
 8005b62:	4276      	negs	r6, r6
 8005b64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b68:	485e      	ldr	r0, [pc, #376]	; (8005ce4 <_printf_i+0x244>)
 8005b6a:	230a      	movs	r3, #10
 8005b6c:	e019      	b.n	8005ba2 <_printf_i+0x102>
 8005b6e:	680e      	ldr	r6, [r1, #0]
 8005b70:	602b      	str	r3, [r5, #0]
 8005b72:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005b76:	bf18      	it	ne
 8005b78:	b236      	sxthne	r6, r6
 8005b7a:	e7ef      	b.n	8005b5c <_printf_i+0xbc>
 8005b7c:	682b      	ldr	r3, [r5, #0]
 8005b7e:	6820      	ldr	r0, [r4, #0]
 8005b80:	1d19      	adds	r1, r3, #4
 8005b82:	6029      	str	r1, [r5, #0]
 8005b84:	0601      	lsls	r1, r0, #24
 8005b86:	d501      	bpl.n	8005b8c <_printf_i+0xec>
 8005b88:	681e      	ldr	r6, [r3, #0]
 8005b8a:	e002      	b.n	8005b92 <_printf_i+0xf2>
 8005b8c:	0646      	lsls	r6, r0, #25
 8005b8e:	d5fb      	bpl.n	8005b88 <_printf_i+0xe8>
 8005b90:	881e      	ldrh	r6, [r3, #0]
 8005b92:	4854      	ldr	r0, [pc, #336]	; (8005ce4 <_printf_i+0x244>)
 8005b94:	2f6f      	cmp	r7, #111	; 0x6f
 8005b96:	bf0c      	ite	eq
 8005b98:	2308      	moveq	r3, #8
 8005b9a:	230a      	movne	r3, #10
 8005b9c:	2100      	movs	r1, #0
 8005b9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005ba2:	6865      	ldr	r5, [r4, #4]
 8005ba4:	60a5      	str	r5, [r4, #8]
 8005ba6:	2d00      	cmp	r5, #0
 8005ba8:	bfa2      	ittt	ge
 8005baa:	6821      	ldrge	r1, [r4, #0]
 8005bac:	f021 0104 	bicge.w	r1, r1, #4
 8005bb0:	6021      	strge	r1, [r4, #0]
 8005bb2:	b90e      	cbnz	r6, 8005bb8 <_printf_i+0x118>
 8005bb4:	2d00      	cmp	r5, #0
 8005bb6:	d04d      	beq.n	8005c54 <_printf_i+0x1b4>
 8005bb8:	4615      	mov	r5, r2
 8005bba:	fbb6 f1f3 	udiv	r1, r6, r3
 8005bbe:	fb03 6711 	mls	r7, r3, r1, r6
 8005bc2:	5dc7      	ldrb	r7, [r0, r7]
 8005bc4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005bc8:	4637      	mov	r7, r6
 8005bca:	42bb      	cmp	r3, r7
 8005bcc:	460e      	mov	r6, r1
 8005bce:	d9f4      	bls.n	8005bba <_printf_i+0x11a>
 8005bd0:	2b08      	cmp	r3, #8
 8005bd2:	d10b      	bne.n	8005bec <_printf_i+0x14c>
 8005bd4:	6823      	ldr	r3, [r4, #0]
 8005bd6:	07de      	lsls	r6, r3, #31
 8005bd8:	d508      	bpl.n	8005bec <_printf_i+0x14c>
 8005bda:	6923      	ldr	r3, [r4, #16]
 8005bdc:	6861      	ldr	r1, [r4, #4]
 8005bde:	4299      	cmp	r1, r3
 8005be0:	bfde      	ittt	le
 8005be2:	2330      	movle	r3, #48	; 0x30
 8005be4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005be8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005bec:	1b52      	subs	r2, r2, r5
 8005bee:	6122      	str	r2, [r4, #16]
 8005bf0:	f8cd a000 	str.w	sl, [sp]
 8005bf4:	464b      	mov	r3, r9
 8005bf6:	aa03      	add	r2, sp, #12
 8005bf8:	4621      	mov	r1, r4
 8005bfa:	4640      	mov	r0, r8
 8005bfc:	f7ff fee2 	bl	80059c4 <_printf_common>
 8005c00:	3001      	adds	r0, #1
 8005c02:	d14c      	bne.n	8005c9e <_printf_i+0x1fe>
 8005c04:	f04f 30ff 	mov.w	r0, #4294967295
 8005c08:	b004      	add	sp, #16
 8005c0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c0e:	4835      	ldr	r0, [pc, #212]	; (8005ce4 <_printf_i+0x244>)
 8005c10:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005c14:	6829      	ldr	r1, [r5, #0]
 8005c16:	6823      	ldr	r3, [r4, #0]
 8005c18:	f851 6b04 	ldr.w	r6, [r1], #4
 8005c1c:	6029      	str	r1, [r5, #0]
 8005c1e:	061d      	lsls	r5, r3, #24
 8005c20:	d514      	bpl.n	8005c4c <_printf_i+0x1ac>
 8005c22:	07df      	lsls	r7, r3, #31
 8005c24:	bf44      	itt	mi
 8005c26:	f043 0320 	orrmi.w	r3, r3, #32
 8005c2a:	6023      	strmi	r3, [r4, #0]
 8005c2c:	b91e      	cbnz	r6, 8005c36 <_printf_i+0x196>
 8005c2e:	6823      	ldr	r3, [r4, #0]
 8005c30:	f023 0320 	bic.w	r3, r3, #32
 8005c34:	6023      	str	r3, [r4, #0]
 8005c36:	2310      	movs	r3, #16
 8005c38:	e7b0      	b.n	8005b9c <_printf_i+0xfc>
 8005c3a:	6823      	ldr	r3, [r4, #0]
 8005c3c:	f043 0320 	orr.w	r3, r3, #32
 8005c40:	6023      	str	r3, [r4, #0]
 8005c42:	2378      	movs	r3, #120	; 0x78
 8005c44:	4828      	ldr	r0, [pc, #160]	; (8005ce8 <_printf_i+0x248>)
 8005c46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c4a:	e7e3      	b.n	8005c14 <_printf_i+0x174>
 8005c4c:	0659      	lsls	r1, r3, #25
 8005c4e:	bf48      	it	mi
 8005c50:	b2b6      	uxthmi	r6, r6
 8005c52:	e7e6      	b.n	8005c22 <_printf_i+0x182>
 8005c54:	4615      	mov	r5, r2
 8005c56:	e7bb      	b.n	8005bd0 <_printf_i+0x130>
 8005c58:	682b      	ldr	r3, [r5, #0]
 8005c5a:	6826      	ldr	r6, [r4, #0]
 8005c5c:	6961      	ldr	r1, [r4, #20]
 8005c5e:	1d18      	adds	r0, r3, #4
 8005c60:	6028      	str	r0, [r5, #0]
 8005c62:	0635      	lsls	r5, r6, #24
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	d501      	bpl.n	8005c6c <_printf_i+0x1cc>
 8005c68:	6019      	str	r1, [r3, #0]
 8005c6a:	e002      	b.n	8005c72 <_printf_i+0x1d2>
 8005c6c:	0670      	lsls	r0, r6, #25
 8005c6e:	d5fb      	bpl.n	8005c68 <_printf_i+0x1c8>
 8005c70:	8019      	strh	r1, [r3, #0]
 8005c72:	2300      	movs	r3, #0
 8005c74:	6123      	str	r3, [r4, #16]
 8005c76:	4615      	mov	r5, r2
 8005c78:	e7ba      	b.n	8005bf0 <_printf_i+0x150>
 8005c7a:	682b      	ldr	r3, [r5, #0]
 8005c7c:	1d1a      	adds	r2, r3, #4
 8005c7e:	602a      	str	r2, [r5, #0]
 8005c80:	681d      	ldr	r5, [r3, #0]
 8005c82:	6862      	ldr	r2, [r4, #4]
 8005c84:	2100      	movs	r1, #0
 8005c86:	4628      	mov	r0, r5
 8005c88:	f7fa faaa 	bl	80001e0 <memchr>
 8005c8c:	b108      	cbz	r0, 8005c92 <_printf_i+0x1f2>
 8005c8e:	1b40      	subs	r0, r0, r5
 8005c90:	6060      	str	r0, [r4, #4]
 8005c92:	6863      	ldr	r3, [r4, #4]
 8005c94:	6123      	str	r3, [r4, #16]
 8005c96:	2300      	movs	r3, #0
 8005c98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c9c:	e7a8      	b.n	8005bf0 <_printf_i+0x150>
 8005c9e:	6923      	ldr	r3, [r4, #16]
 8005ca0:	462a      	mov	r2, r5
 8005ca2:	4649      	mov	r1, r9
 8005ca4:	4640      	mov	r0, r8
 8005ca6:	47d0      	blx	sl
 8005ca8:	3001      	adds	r0, #1
 8005caa:	d0ab      	beq.n	8005c04 <_printf_i+0x164>
 8005cac:	6823      	ldr	r3, [r4, #0]
 8005cae:	079b      	lsls	r3, r3, #30
 8005cb0:	d413      	bmi.n	8005cda <_printf_i+0x23a>
 8005cb2:	68e0      	ldr	r0, [r4, #12]
 8005cb4:	9b03      	ldr	r3, [sp, #12]
 8005cb6:	4298      	cmp	r0, r3
 8005cb8:	bfb8      	it	lt
 8005cba:	4618      	movlt	r0, r3
 8005cbc:	e7a4      	b.n	8005c08 <_printf_i+0x168>
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	4632      	mov	r2, r6
 8005cc2:	4649      	mov	r1, r9
 8005cc4:	4640      	mov	r0, r8
 8005cc6:	47d0      	blx	sl
 8005cc8:	3001      	adds	r0, #1
 8005cca:	d09b      	beq.n	8005c04 <_printf_i+0x164>
 8005ccc:	3501      	adds	r5, #1
 8005cce:	68e3      	ldr	r3, [r4, #12]
 8005cd0:	9903      	ldr	r1, [sp, #12]
 8005cd2:	1a5b      	subs	r3, r3, r1
 8005cd4:	42ab      	cmp	r3, r5
 8005cd6:	dcf2      	bgt.n	8005cbe <_printf_i+0x21e>
 8005cd8:	e7eb      	b.n	8005cb2 <_printf_i+0x212>
 8005cda:	2500      	movs	r5, #0
 8005cdc:	f104 0619 	add.w	r6, r4, #25
 8005ce0:	e7f5      	b.n	8005cce <_printf_i+0x22e>
 8005ce2:	bf00      	nop
 8005ce4:	0800600d 	.word	0x0800600d
 8005ce8:	0800601e 	.word	0x0800601e

08005cec <memcpy>:
 8005cec:	440a      	add	r2, r1
 8005cee:	4291      	cmp	r1, r2
 8005cf0:	f100 33ff 	add.w	r3, r0, #4294967295
 8005cf4:	d100      	bne.n	8005cf8 <memcpy+0xc>
 8005cf6:	4770      	bx	lr
 8005cf8:	b510      	push	{r4, lr}
 8005cfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005cfe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d02:	4291      	cmp	r1, r2
 8005d04:	d1f9      	bne.n	8005cfa <memcpy+0xe>
 8005d06:	bd10      	pop	{r4, pc}

08005d08 <memmove>:
 8005d08:	4288      	cmp	r0, r1
 8005d0a:	b510      	push	{r4, lr}
 8005d0c:	eb01 0402 	add.w	r4, r1, r2
 8005d10:	d902      	bls.n	8005d18 <memmove+0x10>
 8005d12:	4284      	cmp	r4, r0
 8005d14:	4623      	mov	r3, r4
 8005d16:	d807      	bhi.n	8005d28 <memmove+0x20>
 8005d18:	1e43      	subs	r3, r0, #1
 8005d1a:	42a1      	cmp	r1, r4
 8005d1c:	d008      	beq.n	8005d30 <memmove+0x28>
 8005d1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005d26:	e7f8      	b.n	8005d1a <memmove+0x12>
 8005d28:	4402      	add	r2, r0
 8005d2a:	4601      	mov	r1, r0
 8005d2c:	428a      	cmp	r2, r1
 8005d2e:	d100      	bne.n	8005d32 <memmove+0x2a>
 8005d30:	bd10      	pop	{r4, pc}
 8005d32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005d36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005d3a:	e7f7      	b.n	8005d2c <memmove+0x24>

08005d3c <_free_r>:
 8005d3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005d3e:	2900      	cmp	r1, #0
 8005d40:	d044      	beq.n	8005dcc <_free_r+0x90>
 8005d42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d46:	9001      	str	r0, [sp, #4]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	f1a1 0404 	sub.w	r4, r1, #4
 8005d4e:	bfb8      	it	lt
 8005d50:	18e4      	addlt	r4, r4, r3
 8005d52:	f000 f913 	bl	8005f7c <__malloc_lock>
 8005d56:	4a1e      	ldr	r2, [pc, #120]	; (8005dd0 <_free_r+0x94>)
 8005d58:	9801      	ldr	r0, [sp, #4]
 8005d5a:	6813      	ldr	r3, [r2, #0]
 8005d5c:	b933      	cbnz	r3, 8005d6c <_free_r+0x30>
 8005d5e:	6063      	str	r3, [r4, #4]
 8005d60:	6014      	str	r4, [r2, #0]
 8005d62:	b003      	add	sp, #12
 8005d64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005d68:	f000 b90e 	b.w	8005f88 <__malloc_unlock>
 8005d6c:	42a3      	cmp	r3, r4
 8005d6e:	d908      	bls.n	8005d82 <_free_r+0x46>
 8005d70:	6825      	ldr	r5, [r4, #0]
 8005d72:	1961      	adds	r1, r4, r5
 8005d74:	428b      	cmp	r3, r1
 8005d76:	bf01      	itttt	eq
 8005d78:	6819      	ldreq	r1, [r3, #0]
 8005d7a:	685b      	ldreq	r3, [r3, #4]
 8005d7c:	1949      	addeq	r1, r1, r5
 8005d7e:	6021      	streq	r1, [r4, #0]
 8005d80:	e7ed      	b.n	8005d5e <_free_r+0x22>
 8005d82:	461a      	mov	r2, r3
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	b10b      	cbz	r3, 8005d8c <_free_r+0x50>
 8005d88:	42a3      	cmp	r3, r4
 8005d8a:	d9fa      	bls.n	8005d82 <_free_r+0x46>
 8005d8c:	6811      	ldr	r1, [r2, #0]
 8005d8e:	1855      	adds	r5, r2, r1
 8005d90:	42a5      	cmp	r5, r4
 8005d92:	d10b      	bne.n	8005dac <_free_r+0x70>
 8005d94:	6824      	ldr	r4, [r4, #0]
 8005d96:	4421      	add	r1, r4
 8005d98:	1854      	adds	r4, r2, r1
 8005d9a:	42a3      	cmp	r3, r4
 8005d9c:	6011      	str	r1, [r2, #0]
 8005d9e:	d1e0      	bne.n	8005d62 <_free_r+0x26>
 8005da0:	681c      	ldr	r4, [r3, #0]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	6053      	str	r3, [r2, #4]
 8005da6:	4421      	add	r1, r4
 8005da8:	6011      	str	r1, [r2, #0]
 8005daa:	e7da      	b.n	8005d62 <_free_r+0x26>
 8005dac:	d902      	bls.n	8005db4 <_free_r+0x78>
 8005dae:	230c      	movs	r3, #12
 8005db0:	6003      	str	r3, [r0, #0]
 8005db2:	e7d6      	b.n	8005d62 <_free_r+0x26>
 8005db4:	6825      	ldr	r5, [r4, #0]
 8005db6:	1961      	adds	r1, r4, r5
 8005db8:	428b      	cmp	r3, r1
 8005dba:	bf04      	itt	eq
 8005dbc:	6819      	ldreq	r1, [r3, #0]
 8005dbe:	685b      	ldreq	r3, [r3, #4]
 8005dc0:	6063      	str	r3, [r4, #4]
 8005dc2:	bf04      	itt	eq
 8005dc4:	1949      	addeq	r1, r1, r5
 8005dc6:	6021      	streq	r1, [r4, #0]
 8005dc8:	6054      	str	r4, [r2, #4]
 8005dca:	e7ca      	b.n	8005d62 <_free_r+0x26>
 8005dcc:	b003      	add	sp, #12
 8005dce:	bd30      	pop	{r4, r5, pc}
 8005dd0:	20000288 	.word	0x20000288

08005dd4 <sbrk_aligned>:
 8005dd4:	b570      	push	{r4, r5, r6, lr}
 8005dd6:	4e0e      	ldr	r6, [pc, #56]	; (8005e10 <sbrk_aligned+0x3c>)
 8005dd8:	460c      	mov	r4, r1
 8005dda:	6831      	ldr	r1, [r6, #0]
 8005ddc:	4605      	mov	r5, r0
 8005dde:	b911      	cbnz	r1, 8005de6 <sbrk_aligned+0x12>
 8005de0:	f000 f8bc 	bl	8005f5c <_sbrk_r>
 8005de4:	6030      	str	r0, [r6, #0]
 8005de6:	4621      	mov	r1, r4
 8005de8:	4628      	mov	r0, r5
 8005dea:	f000 f8b7 	bl	8005f5c <_sbrk_r>
 8005dee:	1c43      	adds	r3, r0, #1
 8005df0:	d00a      	beq.n	8005e08 <sbrk_aligned+0x34>
 8005df2:	1cc4      	adds	r4, r0, #3
 8005df4:	f024 0403 	bic.w	r4, r4, #3
 8005df8:	42a0      	cmp	r0, r4
 8005dfa:	d007      	beq.n	8005e0c <sbrk_aligned+0x38>
 8005dfc:	1a21      	subs	r1, r4, r0
 8005dfe:	4628      	mov	r0, r5
 8005e00:	f000 f8ac 	bl	8005f5c <_sbrk_r>
 8005e04:	3001      	adds	r0, #1
 8005e06:	d101      	bne.n	8005e0c <sbrk_aligned+0x38>
 8005e08:	f04f 34ff 	mov.w	r4, #4294967295
 8005e0c:	4620      	mov	r0, r4
 8005e0e:	bd70      	pop	{r4, r5, r6, pc}
 8005e10:	2000028c 	.word	0x2000028c

08005e14 <_malloc_r>:
 8005e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e18:	1ccd      	adds	r5, r1, #3
 8005e1a:	f025 0503 	bic.w	r5, r5, #3
 8005e1e:	3508      	adds	r5, #8
 8005e20:	2d0c      	cmp	r5, #12
 8005e22:	bf38      	it	cc
 8005e24:	250c      	movcc	r5, #12
 8005e26:	2d00      	cmp	r5, #0
 8005e28:	4607      	mov	r7, r0
 8005e2a:	db01      	blt.n	8005e30 <_malloc_r+0x1c>
 8005e2c:	42a9      	cmp	r1, r5
 8005e2e:	d905      	bls.n	8005e3c <_malloc_r+0x28>
 8005e30:	230c      	movs	r3, #12
 8005e32:	603b      	str	r3, [r7, #0]
 8005e34:	2600      	movs	r6, #0
 8005e36:	4630      	mov	r0, r6
 8005e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e3c:	4e2e      	ldr	r6, [pc, #184]	; (8005ef8 <_malloc_r+0xe4>)
 8005e3e:	f000 f89d 	bl	8005f7c <__malloc_lock>
 8005e42:	6833      	ldr	r3, [r6, #0]
 8005e44:	461c      	mov	r4, r3
 8005e46:	bb34      	cbnz	r4, 8005e96 <_malloc_r+0x82>
 8005e48:	4629      	mov	r1, r5
 8005e4a:	4638      	mov	r0, r7
 8005e4c:	f7ff ffc2 	bl	8005dd4 <sbrk_aligned>
 8005e50:	1c43      	adds	r3, r0, #1
 8005e52:	4604      	mov	r4, r0
 8005e54:	d14d      	bne.n	8005ef2 <_malloc_r+0xde>
 8005e56:	6834      	ldr	r4, [r6, #0]
 8005e58:	4626      	mov	r6, r4
 8005e5a:	2e00      	cmp	r6, #0
 8005e5c:	d140      	bne.n	8005ee0 <_malloc_r+0xcc>
 8005e5e:	6823      	ldr	r3, [r4, #0]
 8005e60:	4631      	mov	r1, r6
 8005e62:	4638      	mov	r0, r7
 8005e64:	eb04 0803 	add.w	r8, r4, r3
 8005e68:	f000 f878 	bl	8005f5c <_sbrk_r>
 8005e6c:	4580      	cmp	r8, r0
 8005e6e:	d13a      	bne.n	8005ee6 <_malloc_r+0xd2>
 8005e70:	6821      	ldr	r1, [r4, #0]
 8005e72:	3503      	adds	r5, #3
 8005e74:	1a6d      	subs	r5, r5, r1
 8005e76:	f025 0503 	bic.w	r5, r5, #3
 8005e7a:	3508      	adds	r5, #8
 8005e7c:	2d0c      	cmp	r5, #12
 8005e7e:	bf38      	it	cc
 8005e80:	250c      	movcc	r5, #12
 8005e82:	4629      	mov	r1, r5
 8005e84:	4638      	mov	r0, r7
 8005e86:	f7ff ffa5 	bl	8005dd4 <sbrk_aligned>
 8005e8a:	3001      	adds	r0, #1
 8005e8c:	d02b      	beq.n	8005ee6 <_malloc_r+0xd2>
 8005e8e:	6823      	ldr	r3, [r4, #0]
 8005e90:	442b      	add	r3, r5
 8005e92:	6023      	str	r3, [r4, #0]
 8005e94:	e00e      	b.n	8005eb4 <_malloc_r+0xa0>
 8005e96:	6822      	ldr	r2, [r4, #0]
 8005e98:	1b52      	subs	r2, r2, r5
 8005e9a:	d41e      	bmi.n	8005eda <_malloc_r+0xc6>
 8005e9c:	2a0b      	cmp	r2, #11
 8005e9e:	d916      	bls.n	8005ece <_malloc_r+0xba>
 8005ea0:	1961      	adds	r1, r4, r5
 8005ea2:	42a3      	cmp	r3, r4
 8005ea4:	6025      	str	r5, [r4, #0]
 8005ea6:	bf18      	it	ne
 8005ea8:	6059      	strne	r1, [r3, #4]
 8005eaa:	6863      	ldr	r3, [r4, #4]
 8005eac:	bf08      	it	eq
 8005eae:	6031      	streq	r1, [r6, #0]
 8005eb0:	5162      	str	r2, [r4, r5]
 8005eb2:	604b      	str	r3, [r1, #4]
 8005eb4:	4638      	mov	r0, r7
 8005eb6:	f104 060b 	add.w	r6, r4, #11
 8005eba:	f000 f865 	bl	8005f88 <__malloc_unlock>
 8005ebe:	f026 0607 	bic.w	r6, r6, #7
 8005ec2:	1d23      	adds	r3, r4, #4
 8005ec4:	1af2      	subs	r2, r6, r3
 8005ec6:	d0b6      	beq.n	8005e36 <_malloc_r+0x22>
 8005ec8:	1b9b      	subs	r3, r3, r6
 8005eca:	50a3      	str	r3, [r4, r2]
 8005ecc:	e7b3      	b.n	8005e36 <_malloc_r+0x22>
 8005ece:	6862      	ldr	r2, [r4, #4]
 8005ed0:	42a3      	cmp	r3, r4
 8005ed2:	bf0c      	ite	eq
 8005ed4:	6032      	streq	r2, [r6, #0]
 8005ed6:	605a      	strne	r2, [r3, #4]
 8005ed8:	e7ec      	b.n	8005eb4 <_malloc_r+0xa0>
 8005eda:	4623      	mov	r3, r4
 8005edc:	6864      	ldr	r4, [r4, #4]
 8005ede:	e7b2      	b.n	8005e46 <_malloc_r+0x32>
 8005ee0:	4634      	mov	r4, r6
 8005ee2:	6876      	ldr	r6, [r6, #4]
 8005ee4:	e7b9      	b.n	8005e5a <_malloc_r+0x46>
 8005ee6:	230c      	movs	r3, #12
 8005ee8:	603b      	str	r3, [r7, #0]
 8005eea:	4638      	mov	r0, r7
 8005eec:	f000 f84c 	bl	8005f88 <__malloc_unlock>
 8005ef0:	e7a1      	b.n	8005e36 <_malloc_r+0x22>
 8005ef2:	6025      	str	r5, [r4, #0]
 8005ef4:	e7de      	b.n	8005eb4 <_malloc_r+0xa0>
 8005ef6:	bf00      	nop
 8005ef8:	20000288 	.word	0x20000288

08005efc <_realloc_r>:
 8005efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f00:	4680      	mov	r8, r0
 8005f02:	4614      	mov	r4, r2
 8005f04:	460e      	mov	r6, r1
 8005f06:	b921      	cbnz	r1, 8005f12 <_realloc_r+0x16>
 8005f08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f0c:	4611      	mov	r1, r2
 8005f0e:	f7ff bf81 	b.w	8005e14 <_malloc_r>
 8005f12:	b92a      	cbnz	r2, 8005f20 <_realloc_r+0x24>
 8005f14:	f7ff ff12 	bl	8005d3c <_free_r>
 8005f18:	4625      	mov	r5, r4
 8005f1a:	4628      	mov	r0, r5
 8005f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f20:	f000 f838 	bl	8005f94 <_malloc_usable_size_r>
 8005f24:	4284      	cmp	r4, r0
 8005f26:	4607      	mov	r7, r0
 8005f28:	d802      	bhi.n	8005f30 <_realloc_r+0x34>
 8005f2a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005f2e:	d812      	bhi.n	8005f56 <_realloc_r+0x5a>
 8005f30:	4621      	mov	r1, r4
 8005f32:	4640      	mov	r0, r8
 8005f34:	f7ff ff6e 	bl	8005e14 <_malloc_r>
 8005f38:	4605      	mov	r5, r0
 8005f3a:	2800      	cmp	r0, #0
 8005f3c:	d0ed      	beq.n	8005f1a <_realloc_r+0x1e>
 8005f3e:	42bc      	cmp	r4, r7
 8005f40:	4622      	mov	r2, r4
 8005f42:	4631      	mov	r1, r6
 8005f44:	bf28      	it	cs
 8005f46:	463a      	movcs	r2, r7
 8005f48:	f7ff fed0 	bl	8005cec <memcpy>
 8005f4c:	4631      	mov	r1, r6
 8005f4e:	4640      	mov	r0, r8
 8005f50:	f7ff fef4 	bl	8005d3c <_free_r>
 8005f54:	e7e1      	b.n	8005f1a <_realloc_r+0x1e>
 8005f56:	4635      	mov	r5, r6
 8005f58:	e7df      	b.n	8005f1a <_realloc_r+0x1e>
	...

08005f5c <_sbrk_r>:
 8005f5c:	b538      	push	{r3, r4, r5, lr}
 8005f5e:	4d06      	ldr	r5, [pc, #24]	; (8005f78 <_sbrk_r+0x1c>)
 8005f60:	2300      	movs	r3, #0
 8005f62:	4604      	mov	r4, r0
 8005f64:	4608      	mov	r0, r1
 8005f66:	602b      	str	r3, [r5, #0]
 8005f68:	f7fc f996 	bl	8002298 <_sbrk>
 8005f6c:	1c43      	adds	r3, r0, #1
 8005f6e:	d102      	bne.n	8005f76 <_sbrk_r+0x1a>
 8005f70:	682b      	ldr	r3, [r5, #0]
 8005f72:	b103      	cbz	r3, 8005f76 <_sbrk_r+0x1a>
 8005f74:	6023      	str	r3, [r4, #0]
 8005f76:	bd38      	pop	{r3, r4, r5, pc}
 8005f78:	20000290 	.word	0x20000290

08005f7c <__malloc_lock>:
 8005f7c:	4801      	ldr	r0, [pc, #4]	; (8005f84 <__malloc_lock+0x8>)
 8005f7e:	f000 b811 	b.w	8005fa4 <__retarget_lock_acquire_recursive>
 8005f82:	bf00      	nop
 8005f84:	20000294 	.word	0x20000294

08005f88 <__malloc_unlock>:
 8005f88:	4801      	ldr	r0, [pc, #4]	; (8005f90 <__malloc_unlock+0x8>)
 8005f8a:	f000 b80c 	b.w	8005fa6 <__retarget_lock_release_recursive>
 8005f8e:	bf00      	nop
 8005f90:	20000294 	.word	0x20000294

08005f94 <_malloc_usable_size_r>:
 8005f94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f98:	1f18      	subs	r0, r3, #4
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	bfbc      	itt	lt
 8005f9e:	580b      	ldrlt	r3, [r1, r0]
 8005fa0:	18c0      	addlt	r0, r0, r3
 8005fa2:	4770      	bx	lr

08005fa4 <__retarget_lock_acquire_recursive>:
 8005fa4:	4770      	bx	lr

08005fa6 <__retarget_lock_release_recursive>:
 8005fa6:	4770      	bx	lr

08005fa8 <_init>:
 8005fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005faa:	bf00      	nop
 8005fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fae:	bc08      	pop	{r3}
 8005fb0:	469e      	mov	lr, r3
 8005fb2:	4770      	bx	lr

08005fb4 <_fini>:
 8005fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fb6:	bf00      	nop
 8005fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fba:	bc08      	pop	{r3}
 8005fbc:	469e      	mov	lr, r3
 8005fbe:	4770      	bx	lr
